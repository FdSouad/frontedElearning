{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { forwardRef, Component, ChangeDetectionStrategy, ContentChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { setValue, FormBase, ComponentBase, Template, ComponentMixins } from '@syncfusion/ej2-angular-base';\nimport { RichTextEditor, Toolbar, Link, Image, Audio, Video, Count, QuickToolbar, HtmlEditor, MarkdownEditor, Table, PasteCleanup, Resize, FileManager } from '@syncfusion/ej2-richtexteditor';\nexport * from '@syncfusion/ej2-richtexteditor';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"valueTemplate\"];\nvar RichTextEditorComponent_1;\nconst inputs = ['autoSaveOnIdle', 'backgroundColor', 'bulletFormatList', 'cssClass', 'editorMode', 'enableAutoUrl', 'enableHtmlEncode', 'enableHtmlSanitizer', 'enablePersistence', 'enableResize', 'enableRtl', 'enableTabKey', 'enableXhtml', 'enabled', 'enterKey', 'fileManagerSettings', 'floatingToolbarOffset', 'fontColor', 'fontFamily', 'fontSize', 'format', 'formatter', 'height', 'htmlAttributes', 'iframeSettings', 'inlineMode', 'insertAudioSettings', 'insertImageSettings', 'insertVideoSettings', 'keyConfig', 'locale', 'maxLength', 'numberFormatList', 'pasteCleanupSettings', 'placeholder', 'quickToolbarSettings', 'readonly', 'saveInterval', 'shiftEnterKey', 'showCharCount', 'tableSettings', 'toolbarSettings', 'undoRedoSteps', 'undoRedoTimer', 'value', 'valueTemplate', 'width'];\nconst outputs = ['actionBegin', 'actionComplete', 'afterImageDelete', 'afterMediaDelete', 'afterPasteCleanup', 'beforeDialogClose', 'beforeDialogOpen', 'beforeFileUpload', 'beforeImageDrop', 'beforeImageUpload', 'beforePasteCleanup', 'beforeQuickToolbarOpen', 'beforeSanitizeHtml', 'blur', 'change', 'created', 'destroyed', 'dialogClose', 'dialogOpen', 'fileRemoving', 'fileSelected', 'fileUploadFailed', 'fileUploadSuccess', 'fileUploading', 'focus', 'imageRemoving', 'imageSelected', 'imageUploadFailed', 'imageUploadSuccess', 'imageUploading', 'quickToolbarClose', 'quickToolbarOpen', 'resizeStart', 'resizeStop', 'resizing', 'toolbarClick', 'toolbarStatusUpdate', 'updatedToolbarStatus', 'valueChange'];\nconst twoWays = ['value'];\n/**\n * `ejs-richtexteditor` represents the Angular richtexteditor Component.\n * ```html\n * <ejs-richtexteditor></ejs-richtexteditor>\n * ```\n */\n\nlet RichTextEditorComponent = RichTextEditorComponent_1 = class RichTextEditorComponent extends RichTextEditor {\n  constructor(ngEle, srenderer, viewContainerRef, injector) {\n    super();\n    this.ngEle = ngEle;\n    this.srenderer = srenderer;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.skipFromEvent = true;\n    this.element = this.ngEle.nativeElement;\n    this.injectedModules = this.injectedModules || [];\n\n    try {\n      let mod = this.injector.get('RichTextEditorToolbar');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_a) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorLink');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_b) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorImage');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_c) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorAudio');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_d) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorVideo');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_e) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorCount');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_f) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorQuickToolbar');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_g) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorHtmlEditor');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_h) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorMarkdownEditor');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_j) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorTable');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_k) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorPasteCleanup');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_l) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorResize');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_m) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorFileManager');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_o) {}\n\n    this.registerEvents(outputs);\n    this.addTwoWay.call(this, twoWays);\n    setValue('currentInstance', this, this.viewContainerRef);\n    this.formContext = new FormBase();\n    this.formCompContext = new ComponentBase();\n  }\n\n  registerOnChange(registerFunction) {}\n\n  registerOnTouched(registerFunction) {}\n\n  writeValue(value) {}\n\n  setDisabledState(disabled) {}\n\n  ngOnInit() {\n    this.formCompContext.ngOnInit(this);\n  }\n\n  ngAfterViewInit() {\n    this.formContext.ngAfterViewInit(this);\n  }\n\n  ngOnDestroy() {\n    this.formCompContext.ngOnDestroy(this);\n  }\n\n  ngAfterContentChecked() {\n    this.formCompContext.ngAfterContentChecked(this);\n  }\n\n};\n\nRichTextEditorComponent.ɵfac = function RichTextEditorComponent_Factory(t) {\n  return new (t || RichTextEditorComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.Injector));\n};\n\nRichTextEditorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RichTextEditorComponent,\n  selectors: [[\"ejs-richtexteditor\"]],\n  contentQueries: function RichTextEditorComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.valueTemplate = _t.first);\n    }\n  },\n  inputs: {\n    autoSaveOnIdle: \"autoSaveOnIdle\",\n    backgroundColor: \"backgroundColor\",\n    bulletFormatList: \"bulletFormatList\",\n    cssClass: \"cssClass\",\n    editorMode: \"editorMode\",\n    enableAutoUrl: \"enableAutoUrl\",\n    enableHtmlEncode: \"enableHtmlEncode\",\n    enableHtmlSanitizer: \"enableHtmlSanitizer\",\n    enablePersistence: \"enablePersistence\",\n    enableResize: \"enableResize\",\n    enableRtl: \"enableRtl\",\n    enableTabKey: \"enableTabKey\",\n    enableXhtml: \"enableXhtml\",\n    enabled: \"enabled\",\n    enterKey: \"enterKey\",\n    fileManagerSettings: \"fileManagerSettings\",\n    floatingToolbarOffset: \"floatingToolbarOffset\",\n    fontColor: \"fontColor\",\n    fontFamily: \"fontFamily\",\n    fontSize: \"fontSize\",\n    format: \"format\",\n    formatter: \"formatter\",\n    height: \"height\",\n    htmlAttributes: \"htmlAttributes\",\n    iframeSettings: \"iframeSettings\",\n    inlineMode: \"inlineMode\",\n    insertAudioSettings: \"insertAudioSettings\",\n    insertImageSettings: \"insertImageSettings\",\n    insertVideoSettings: \"insertVideoSettings\",\n    keyConfig: \"keyConfig\",\n    locale: \"locale\",\n    maxLength: \"maxLength\",\n    numberFormatList: \"numberFormatList\",\n    pasteCleanupSettings: \"pasteCleanupSettings\",\n    placeholder: \"placeholder\",\n    quickToolbarSettings: \"quickToolbarSettings\",\n    readonly: \"readonly\",\n    saveInterval: \"saveInterval\",\n    shiftEnterKey: \"shiftEnterKey\",\n    showCharCount: \"showCharCount\",\n    tableSettings: \"tableSettings\",\n    toolbarSettings: \"toolbarSettings\",\n    undoRedoSteps: \"undoRedoSteps\",\n    undoRedoTimer: \"undoRedoTimer\",\n    value: \"value\",\n    valueTemplate: \"valueTemplate\",\n    width: \"width\"\n  },\n  outputs: {\n    actionBegin: \"actionBegin\",\n    actionComplete: \"actionComplete\",\n    afterImageDelete: \"afterImageDelete\",\n    afterMediaDelete: \"afterMediaDelete\",\n    afterPasteCleanup: \"afterPasteCleanup\",\n    beforeDialogClose: \"beforeDialogClose\",\n    beforeDialogOpen: \"beforeDialogOpen\",\n    beforeFileUpload: \"beforeFileUpload\",\n    beforeImageDrop: \"beforeImageDrop\",\n    beforeImageUpload: \"beforeImageUpload\",\n    beforePasteCleanup: \"beforePasteCleanup\",\n    beforeQuickToolbarOpen: \"beforeQuickToolbarOpen\",\n    beforeSanitizeHtml: \"beforeSanitizeHtml\",\n    blur: \"blur\",\n    change: \"change\",\n    created: \"created\",\n    destroyed: \"destroyed\",\n    dialogClose: \"dialogClose\",\n    dialogOpen: \"dialogOpen\",\n    fileRemoving: \"fileRemoving\",\n    fileSelected: \"fileSelected\",\n    fileUploadFailed: \"fileUploadFailed\",\n    fileUploadSuccess: \"fileUploadSuccess\",\n    fileUploading: \"fileUploading\",\n    focus: \"focus\",\n    imageRemoving: \"imageRemoving\",\n    imageSelected: \"imageSelected\",\n    imageUploadFailed: \"imageUploadFailed\",\n    imageUploadSuccess: \"imageUploadSuccess\",\n    imageUploading: \"imageUploading\",\n    quickToolbarClose: \"quickToolbarClose\",\n    quickToolbarOpen: \"quickToolbarOpen\",\n    resizeStart: \"resizeStart\",\n    resizeStop: \"resizeStop\",\n    resizing: \"resizing\",\n    toolbarClick: \"toolbarClick\",\n    toolbarStatusUpdate: \"toolbarStatusUpdate\",\n    updatedToolbarStatus: \"updatedToolbarStatus\",\n    valueChange: \"valueChange\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RichTextEditorComponent_1),\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function RichTextEditorComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([Template()], RichTextEditorComponent.prototype, \"valueTemplate\", void 0);\n\nRichTextEditorComponent = RichTextEditorComponent_1 = __decorate([ComponentMixins([ComponentBase, FormBase])], RichTextEditorComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * NgModule definition for the RichTextEditor component.\n */\n\n\nlet RichTextEditorModule = /*#__PURE__*/(() => {\n  class RichTextEditorModule {}\n\n  RichTextEditorModule.ɵfac = function RichTextEditorModule_Factory(t) {\n    return new (t || RichTextEditorModule)();\n  };\n\n  RichTextEditorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: RichTextEditorModule\n  });\n  RichTextEditorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return RichTextEditorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst ToolbarService = {\n  provide: 'RichTextEditorToolbar',\n  useValue: Toolbar\n};\nconst LinkService = {\n  provide: 'RichTextEditorLink',\n  useValue: Link\n};\nconst ImageService = {\n  provide: 'RichTextEditorImage',\n  useValue: Image\n};\nconst AudioService = {\n  provide: 'RichTextEditorAudio',\n  useValue: Audio\n};\nconst VideoService = {\n  provide: 'RichTextEditorVideo',\n  useValue: Video\n};\nconst CountService = {\n  provide: 'RichTextEditorCount',\n  useValue: Count\n};\nconst QuickToolbarService = {\n  provide: 'RichTextEditorQuickToolbar',\n  useValue: QuickToolbar\n};\nconst HtmlEditorService = {\n  provide: 'RichTextEditorHtmlEditor',\n  useValue: HtmlEditor\n};\nconst MarkdownEditorService = {\n  provide: 'RichTextEditorMarkdownEditor',\n  useValue: MarkdownEditor\n};\nconst TableService = {\n  provide: 'RichTextEditorTable',\n  useValue: Table\n};\nconst PasteCleanupService = {\n  provide: 'RichTextEditorPasteCleanup',\n  useValue: PasteCleanup\n};\nconst ResizeService = {\n  provide: 'RichTextEditorResize',\n  useValue: Resize\n};\nconst FileManagerService = {\n  provide: 'RichTextEditorFileManager',\n  useValue: FileManager\n};\n/**\n * NgModule definition for the RichTextEditor component with providers.\n */\n\nlet RichTextEditorAllModule = /*#__PURE__*/(() => {\n  class RichTextEditorAllModule {}\n\n  RichTextEditorAllModule.ɵfac = function RichTextEditorAllModule_Factory(t) {\n    return new (t || RichTextEditorAllModule)();\n  };\n\n  RichTextEditorAllModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: RichTextEditorAllModule\n  });\n  RichTextEditorAllModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [ToolbarService, LinkService, ImageService, AudioService, VideoService, CountService, QuickToolbarService, HtmlEditorService, MarkdownEditorService, TableService, PasteCleanupService, ResizeService, FileManagerService],\n    imports: [[CommonModule, RichTextEditorModule], RichTextEditorModule]\n  });\n  return RichTextEditorAllModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // Mapping root file for package generation\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AudioService, CountService, FileManagerService, HtmlEditorService, ImageService, LinkService, MarkdownEditorService, PasteCleanupService, QuickToolbarService, ResizeService, RichTextEditorAllModule, RichTextEditorComponent, RichTextEditorModule, TableService, ToolbarService, VideoService }; //# sourceMappingURL=syncfusion-ej2-angular-richtexteditor.mjs.map","map":null,"metadata":{},"sourceType":"module"}