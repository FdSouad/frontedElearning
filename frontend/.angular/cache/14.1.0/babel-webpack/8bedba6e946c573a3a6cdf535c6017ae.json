{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../services/token.service\";\nimport * as i2 from \"./../../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"../../layout/footer/footer.component\";\n\nfunction ResetPasswordComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3);\n    i0.ɵɵelement(3, \"img\", 4);\n    i0.ɵɵelementEnd()()();\n  }\n}\n\nfunction ResetPasswordComponent_div_1_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"p\", 30);\n    i0.ɵɵtext(2, \"Password has been changed successfully .\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction ResetPasswordComponent_div_1_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"p\", 30);\n    i0.ɵɵtext(2, \"Your password is incorrect .\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction ResetPasswordComponent_div_1_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵelement(1, \"i\", 33);\n    i0.ɵɵtext(2, \" Current password required \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ResetPasswordComponent_div_1_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵelement(1, \"i\", 33);\n    i0.ɵɵtext(2, \" must be at least 8 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ResetPasswordComponent_div_1_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵelement(1, \"i\", 33);\n    i0.ɵɵtext(2, \" Password and confirm password are not matching \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ResetPasswordComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 5)(3, \"div\", 6)(4, \"div\", 7)(5, \"div\", 8)(6, \"div\", 9)(7, \"p\", 10);\n    i0.ɵɵtext(8, \"Create New Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\", 11);\n    i0.ɵɵtext(10, \" Your new password must be different from previous used password \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, ResetPasswordComponent_div_1_div_11_Template, 3, 0, \"div\", 12);\n    i0.ɵɵtemplate(12, ResetPasswordComponent_div_1_div_12_Template, 3, 0, \"div\", 13);\n    i0.ɵɵelementStart(13, \"form\", 14)(14, \"div\", 15)(15, \"div\", 16);\n    i0.ɵɵelement(16, \"input\", 17);\n    i0.ɵɵelementStart(17, \"label\", 18);\n    i0.ɵɵtext(18, \"Current Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(19, ResetPasswordComponent_div_1_div_19_Template, 3, 0, \"div\", 19);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(20, \"div\", 20)(21, \"div\", 21);\n    i0.ɵɵelement(22, \"input\", 22);\n    i0.ɵɵelementStart(23, \"label\", 23);\n    i0.ɵɵtext(24, \"Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(25, ResetPasswordComponent_div_1_div_25_Template, 3, 0, \"div\", 19);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(26, \"div\", 20)(27, \"div\", 21);\n    i0.ɵɵelement(28, \"input\", 24);\n    i0.ɵɵelementStart(29, \"label\", 25);\n    i0.ɵɵtext(30, \"Confirm Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(31, ResetPasswordComponent_div_1_div_31_Template, 3, 0, \"div\", 19);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(32, \"div\", 26)(33, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function ResetPasswordComponent_div_1_Template_button_click_33_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.resetP());\n    });\n    i0.ɵɵtext(34, \"Reset Password\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(35, \"div\", 3);\n    i0.ɵɵelement(36, \"img\", 28);\n    i0.ɵɵelementEnd()()()()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_8_0;\n    let tmp_10_0;\n    let tmp_12_0;\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.done == true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.err == true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.changeForm);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", !ctx_r1.connected());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", !ctx_r1.connected());\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r1.changeForm.value.oldpassword);\n    i0.ɵɵproperty(\"hidden\", !ctx_r1.connected());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", !ctx_r1.connected());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_8_0 = ctx_r1.changeForm.get(\"oldpassword\")) == null ? null : tmp_8_0.invalid) && ((tmp_8_0 = ctx_r1.changeForm.get(\"oldpassword\")) == null ? null : tmp_8_0.touched));\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r1.changeForm.value.password1);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_10_0 = ctx_r1.changeForm.get(\"password1\")) == null ? null : tmp_10_0.invalid) && ((tmp_10_0 = ctx_r1.changeForm.get(\"password1\")) == null ? null : tmp_10_0.touched));\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r1.changeForm.value.password2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.changeForm.value.password2 != ctx_r1.changeForm.value.password1 && ctx_r1.changeForm.value.password2 != \"\" && (((tmp_12_0 = ctx_r1.changeForm.get(\"password2\")) == null ? null : tmp_12_0.touched) || ((tmp_12_0 = ctx_r1.changeForm.get(\"password2\")) == null ? null : tmp_12_0.dirty)));\n  }\n}\n\nexport let ResetPasswordComponent = /*#__PURE__*/(() => {\n  class ResetPasswordComponent {\n    constructor(tokenService, authService, router, route) {\n      this.tokenService = tokenService;\n      this.authService = authService;\n      this.router = router;\n      this.route = route;\n      this.changeForm = new FormGroup({\n        oldpassword: new FormControl('', [Validators.required]),\n        password1: new FormControl('', [Validators.required, Validators.minLength(8)]),\n        password2: new FormControl('', [Validators.required, this.comparePassword.bind(this)])\n      });\n      this.flag = false;\n      this.email = \"\";\n      this.done = false;\n      this.err = false;\n      this.data = {\n        email: \"\",\n        oldpassword: \"\",\n        password1: \"\",\n        password2: \"\"\n      };\n      this.dataReset = {\n        email: \"\",\n        password: \"\"\n      };\n    }\n\n    connected() {\n      console.log(\"hi\");\n\n      if (this.tokenService.getToken() != null) {\n        return true;\n      } else return false;\n    }\n\n    ngOnInit() {\n      if (this.tokenService.getToken() != null) {\n        this.email = this.tokenService.getEmail();\n        this.flag = true;\n        console.log(\"em\" + this.email);\n      } else {\n        this.email = \"\";\n        this.code1 = this.tokenService.getWithExpiry();\n        if (this.code1 == null) this.router.navigateByUrl(\"home\");else {\n          this.code2 = this.route.snapshot.queryParamMap.get(\"code\");\n          this.authService.compareCodes(this.code1, this.code2).subscribe(result => {\n            if (result == true) {\n              this.flag = true; //console.log(\"ok\")\n            } else this.router.navigateByUrl(\"/home\");\n          }, err => {\n            console.log(\"uff mnk\");\n          });\n        }\n      }\n    }\n\n    comparePassword(control) {\n      if (control.parent) {\n        //\n        console.log(\"comparing passwords ...\");\n        const password1 = control.parent.value['password1'];\n        const password2 = control.value;\n        console.log(\"chnu : \" + password1);\n        console.log(\"chnu : \" + password2);\n\n        if (password1 != password2) {\n          console.log(\"don t match\");\n          return {\n            passwordMismatch: true\n          };\n        }\n      }\n\n      return null;\n    }\n\n    invalid() {\n      console.log(\"inv\" + this.email);\n\n      if (this.email == \"\") {\n        if (this.changeForm.value.password1 == this.changeForm.value.password2 && this.changeForm.value.password1 != \"\") return false;\n      } else {\n        if (this.changeForm.invalid) return true;\n      }\n\n      return true;\n    }\n\n    resetP() {\n      console.log(\"ici\" + this.email);\n      this.data.password1 = this.changeForm.value.password1;\n\n      if (this.changeForm.valid && this.email != \"\") {\n        console.log(\"valid\");\n        this.data.oldpassword = this.changeForm.value.oldpassword;\n        this.data.email = this.email;\n        this.authService.changePassword(this.data).subscribe(res => {\n          console.log(\"changed\");\n          this.nada();\n          this.done = true;\n          this.err = false;\n        }, err => {\n          this.done = false;\n          this.err = true;\n        });\n      } else if (this.email == \"\") {\n        this.dataReset.email = this.tokenService.getEmailWithExpiry();\n        this.dataReset.password = this.changeForm.value.password1;\n        console.log(\"not conn + em\" + this.data.email);\n        this.authService.ResetPassword(this.dataReset).subscribe(res => {\n          console.log(\"done\");\n          this.nada();\n          this.err = false;\n          this.done = true;\n          this.tokenService.vider();\n        }, err => {\n          this.done = false;\n          this.err = true;\n        });\n      }\n    }\n\n    nada() {\n      this.changeForm.value.oldpassword = \"\";\n      this.changeForm.value.password1 = \"\";\n      this.changeForm.value.password2 = \"\";\n    }\n\n  }\n\n  ResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n    return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.TokenService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n\n  ResetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResetPasswordComponent,\n    selectors: [[\"app-reset-password\"]],\n    decls: 4,\n    vars: 2,\n    consts: [[\"class\", \"container\", 4, \"ngIf\"], [1, \"container\"], [1, \"row\", \"d-flex\", \"justify-content-center\", \"align-items-center\"], [1, \"col-md-10\", \"col-lg-6\", \"col-xl-7\", \"d-flex\", \"align-items-center\", \"order-1\", \"order-lg-2\"], [\"id\", \"box\", \"src\", \"../../../assets/mypics/s.png\"], [1, \"col-lg-12\", \"col-xl-11\"], [1, \"card\", \"text-black\", \"border-0\"], [1, \"card-body\", \"p-md-5\"], [1, \"row\", \"justify-content-center\"], [1, \"col-md-10\", \"col-lg-6\", \"col-xl-5\", \"order-2\", \"order-lg-1\"], [1, \"text-center\", \"h1\", \"fw-bold\", \"mb-3\", \"mx-1\", \"mx-md-2\", \"mt-2\"], [1, \"text-left\", \"mb-3\", \"mx-1\", \"mx-md-4\", \"mt-4\"], [\"class\", \"alert alert-success\", \"role\", \"alert\", 4, \"ngIf\"], [\"class\", \"alert alert-danger\", \"role\", \"alert\", 4, \"ngIf\"], [1, \"mx-1\", \"mx-md-4\", 3, \"formGroup\"], [1, \"d-flex\", \"flex-row\", \"align-items-center\", \"mb-4\", 3, \"hidden\"], [1, \"form-outline\", \"flex-fill\", \"mb-0\", 3, \"hidden\"], [\"type\", \"password\", \"id\", \"oldpassword\", \"id\", \"sizing\", \"formControlName\", \"oldpassword\", 1, \"form-control\", 3, \"value\", \"hidden\"], [\"for\", \"oldpassword\", 1, \"form-label\", 3, \"hidden\"], [\"style\", \"color: red;\", 4, \"ngIf\"], [1, \"d-flex\", \"flex-row\", \"align-items-center\", \"mb-4\"], [1, \"form-outline\", \"flex-fill\", \"mb-0\"], [\"type\", \"password\", \"id\", \"password1\", \"id\", \"sizing\", \"formControlName\", \"password1\", 1, \"form-control\", 3, \"value\"], [\"for\", \"password1\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"password2\", \"id\", \"sizing\", \"formControlName\", \"password2\", 1, \"form-control\", 3, \"value\"], [\"for\", \"password2\", 1, \"form-label\"], [1, \"d-flex\", \"justify-content-center\", \"mx-4\", \"mb-3\", \"mt-3\", \"mb-lg-4\"], [\"type\", \"button\", \"id\", \"btn\", 1, \"btn\", \"btn-primary\", \"btn-block\", 3, \"click\"], [\"src\", \"assets/mypics/reset.png\", \"alt\", \"Sample image\", 1, \"img-fluid\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\"], [1, \"mb-0\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"], [2, \"color\", \"red\"], [1, \"fa-solid\", \"fa-triangle-exclamation\"]],\n    template: function ResetPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ResetPasswordComponent_div_0_Template, 4, 0, \"div\", 0);\n        i0.ɵɵtemplate(1, ResetPasswordComponent_div_1_Template, 37, 13, \"div\", 0);\n        i0.ɵɵelementStart(2, \"footer\");\n        i0.ɵɵelement(3, \"app-footer\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.flag == false);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.flag == true);\n      }\n    },\n    dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName, i6.FooterComponent],\n    styles: [\"a[_ngcontent-%COMP%]{text-decoration:none;display:inline-block;padding:8px 16px}a[_ngcontent-%COMP%]:hover{background-color:#ddd;color:#000}.previous[_ngcontent-%COMP%]{background-color:#f1f1f1;color:#000;font-weight:700;font-size:x-large}.round[_ngcontent-%COMP%]{border-radius:50%;margin-top:40px}#btn[_ngcontent-%COMP%]{background-color:#538b9f}@keyframes taadaa{0%{opacity:0}to{opacity:1}}#box[_ngcontent-%COMP%]{height:80%;width:80%;margin:50px auto 0;animation:taadaa 2s infinite}\", \".twitter-like[_ngcontent-%COMP%]   .mat-progress-spinner[_ngcontent-%COMP%]{display:inline}\"]\n  });\n  return ResetPasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}