{"ast":null,"code":"import { ZipArchive, ZipArchiveItem } from '@syncfusion/ej2-compression';\nimport { Internationalization, isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * CellStyle class\n * @private\n */\n\nclass CellStyle {\n  constructor() {\n    this.numFmtId = 0;\n    this.backColor = 'none';\n    this.fontName = 'Calibri';\n    this.fontSize = 10.5;\n    this.fontColor = '#000000';\n    this.italic = false;\n    this.bold = false;\n    this.underline = false;\n    this.strikeThrough = false;\n    this.wrapText = false;\n    this.hAlign = 'general';\n    this.vAlign = 'bottom';\n    this.indent = 0;\n    this.rotation = 0;\n    this.numberFormat = 'GENERAL';\n    this.type = 'datetime';\n    this.borders = new Borders();\n    this.isGlobalStyle = false;\n  }\n\n}\n/**\n * Font Class\n * @private\n */\n\n\nclass Font {\n  constructor() {\n    this.sz = 10.5;\n    this.name = 'Calibri';\n    this.u = false;\n    this.b = false;\n    this.i = false;\n    this.color = 'FF000000';\n    this.strike = false;\n  }\n\n}\n/**\n * CellXfs class\n * @private\n */\n\n\nclass CellXfs {}\n/**\n * Alignment class\n * @private\n */\n\n\nclass Alignment {}\n/**\n * CellStyleXfs class\n * @private\n */\n\n\nclass CellStyleXfs {}\n/**\n * CellStyles class\n * @private\n */\n\n\nclass CellStyles {\n  constructor() {\n    this.name = 'Normal';\n    this.xfId = 0;\n  }\n\n}\n/**\n * NumFmt class\n * @private\n */\n\n\nclass NumFmt {\n  constructor(id, code) {\n    this.numFmtId = id;\n    this.formatCode = code;\n  }\n\n}\n/**\n * Border class\n * @private\n */\n\n\nclass Border {\n  constructor(mLine, mColor) {\n    this.lineStyle = mLine;\n    this.color = mColor;\n  }\n\n}\n/**\n * Borders class\n * @private\n */\n\n\nclass Borders {\n  constructor() {\n    this.left = new Border('none', '#FFFFFF');\n    this.right = new Border('none', '#FFFFFF');\n    this.top = new Border('none', '#FFFFFF');\n    this.bottom = new Border('none', '#FFFFFF');\n    this.all = new Border('none', '#FFFFFF');\n  }\n\n}\n/**\n * Worksheet class\n * @private\n */\n\n\nclass Cell {}\n/**\n * Cells class\n * @private\n */\n\n\nclass Cells extends Array {\n  constructor() {\n    super(...arguments);\n\n    this.add = cell => {\n      let inserted = false;\n      let count = 0;\n\n      for (let c of this) {\n        if (c.index === cell.index) {\n          this[count] = cell;\n          inserted = true;\n        }\n\n        count++;\n      }\n\n      if (!inserted) {\n        this.push(cell);\n      }\n    };\n  }\n\n}\n/**\n * Column class\n * @private\n */\n\n\nclass Column {}\n/**\n * Row class\n * @private\n */\n\n\nclass Row {}\n/**\n * Rows class\n * @private\n */\n\n\nclass Rows extends Array {\n  constructor() {\n    super(...arguments);\n\n    this.add = row => {\n      this.push(row);\n    };\n  }\n\n}\n/**\n * Worksheets class\n * @private\n */\n\n\nclass Worksheets extends Array {}\n/**\n * Worksheet class\n * @private\n */\n\n\nclass Worksheet {\n  constructor() {\n    this.isSummaryRowBelow = true;\n    this.showGridLines = true;\n    this.enableRtl = false;\n  }\n\n}\n/**\n * Hyperlink class\n * @private\n */\n\n\nclass HyperLink {}\n/**\n * Grouping class\n * @private\n */\n\n\nclass Grouping {}\n/**\n * FreezePane class\n * @private\n */\n\n\nclass FreezePane {}\n/**\n * MergeCell\n * @private\n */\n\n\nclass MergeCell {}\n/**\n * MergeCells class\n * @private\n */\n\n\nclass MergeCells extends Array {\n  constructor() {\n    super(...arguments);\n\n    this.add = mergeCell => {\n      let inserted = false;\n      let count = 0;\n\n      for (let mCell of this) {\n        if (MergeCells.isIntersecting(mCell, mergeCell)) {\n          let intersectingCell = new MergeCell();\n          intersectingCell.x = Math.min(mCell.x, mergeCell.x);\n          intersectingCell.y = Math.min(mCell.Y, mergeCell.y);\n          intersectingCell.width = Math.max(mCell.Width + mCell.X, mergeCell.width + mergeCell.x);\n          intersectingCell.height = Math.max(mCell.Height + mCell.Y, mergeCell.height + mergeCell.y);\n          intersectingCell.ref = this[count].ref.split(':')[0] + ':' + mergeCell.ref.split(':')[1];\n          this[count] = intersectingCell;\n          mergeCell = intersectingCell;\n          inserted = true;\n        }\n\n        count++;\n      }\n\n      if (!inserted) {\n        this.push(mergeCell);\n      }\n\n      return mergeCell;\n    };\n  }\n\n  static isIntersecting(base, compare) {\n    return base.x <= compare.x + compare.width && compare.x <= base.x + base.width && base.y <= compare.y + compare.height && compare.y <= base.y + base.height;\n  }\n\n}\n/**\n * Image class\n * @private\n */\n\n\nclass Image {} // import { IValueFormatter } from '../base/interface';\n\n/**\n * ValueFormatter class to globalize the value.\n * @private\n */\n\n\nclass ValueFormatter {\n  constructor(cultureName) {\n    this.intl = new Internationalization(); // if (!isNullOrUndefined(cultureName)) {\n    //     this.intl.culture = cultureName;\n    // }\n  }\n\n  getFormatFunction(format, isServerRendered) {\n    if (format.type) {\n      if (isServerRendered) {\n        format.isServerRendered = true;\n      }\n\n      return this.intl.getDateFormat(format);\n    } else {\n      return this.intl.getNumberFormat(format);\n    }\n  } // public getParserFunction(format: NumberFormatOptions | DateFormatOptions): Function {\n  //     if ((<DateFormatOptions>format).type) {\n  //         return this.intl.getDateParser(<DateFormatOptions>format);\n  //     } else {\n  //         return this.intl.getNumberParser(<DateFormatOptions>format);\n  //     }\n  // }\n  // public fromView(value: string, format: Function, type?: string): string | number | Date {\n  //     if (type === 'date' || type === 'datetime' || type === 'number') {\n  //         return format(value);\n  //     } else {\n  //         return value;\n  //     }\n  // }\n\n\n  toView(value, format) {\n    let result = value;\n\n    if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {\n      result = format(value);\n    }\n\n    return result;\n  } // public setCulture(cultureName: string): void {\n  //     if (!isNullOrUndefined(cultureName)) {\n  //         setCulture(cultureName);\n  //     }\n  // }\n\n  /* tslint:disable:no-any */\n\n\n  displayText(value, format, isServerRendered) {\n    return this.toView(value, this.getFormatFunction(format, isServerRendered));\n  }\n\n}\n/**\n * CsvHelper class\n * @private\n */\n\n\nclass CsvHelper {\n  /* tslint:disable:no-any */\n  constructor(json, separator) {\n    this.csvStr = '';\n\n    if (separator === null || separator === undefined) {\n      this.separator = ',';\n    } else {\n      this.separator = separator;\n    }\n\n    this.formatter = new ValueFormatter();\n    this.isMicrosoftBrowser = !!navigator.msSaveBlob;\n\n    if (json.isServerRendered !== null && json.isServerRendered !== undefined) {\n      this.isServerRendered = json.isServerRendered;\n    }\n\n    if (json.styles !== null && json.styles !== undefined) {\n      this.globalStyles = new Map();\n\n      for (let i = 0; i < json.styles.length; i++) {\n        if (json.styles[i].name !== undefined && json.styles[i].numberFormat !== undefined) {\n          this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);\n        }\n      }\n    } // Parses Worksheets data to DOM.        \n\n\n    if (json.worksheets !== null && json.worksheets !== undefined) {\n      this.parseWorksheet(json.worksheets[0]);\n    } //this.csvStr = 'a1,a2,a3\\nb1,b2,b3';\n\n  }\n\n  parseWorksheet(json) {\n    //Rows\n    if (json.rows !== null && json.rows !== undefined) {\n      this.parseRows(json.rows);\n    }\n  }\n  /* tslint:disable:no-any */\n\n\n  parseRows(rows) {\n    let count = 1;\n\n    for (let row of rows) {\n      //Row index\n      if (row.index !== null && row.index !== undefined) {\n        while (count < row.index) {\n          this.csvStr += '\\n';\n          count++;\n        }\n\n        this.parseRow(row);\n      } else {\n        throw Error('Row index is missing.');\n      }\n    }\n  }\n  /* tslint:disable:no-any */\n\n\n  parseRow(row) {\n    if (row.cells !== null && row.cells !== undefined) {\n      let count = 1;\n\n      for (let cell of row.cells) {\n        //cell index\n        if (cell.index !== null && cell.index !== undefined) {\n          while (count < cell.index) {\n            this.csvStr += this.separator;\n            count++;\n          }\n\n          this.parseCell(cell);\n        } else {\n          throw Error('Cell index is missing.');\n        }\n      }\n    }\n  }\n  /* tslint:disable:no-any */\n\n\n  parseCell(cell) {\n    let csv = this.csvStr;\n\n    if (cell.value !== undefined) {\n      if (cell.value instanceof Date) {\n        if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n          /* tslint:disable-next-line:max-line-length */\n          try {\n            csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n              type: 'dateTime',\n              skeleton: cell.style.numberFormat\n            }, this.isServerRendered));\n          } catch (error) {\n            /* tslint:disable-next-line:max-line-length */\n            csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n              type: 'dateTime',\n              format: cell.style.numberFormat\n            }, this.isServerRendered));\n          }\n        } else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n          /* tslint:disable-next-line:max-line-length */\n          try {\n            csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n              type: 'dateTime',\n              skeleton: this.globalStyles.get(cell.style.name)\n            }, this.isServerRendered));\n          } catch (error) {\n            /* tslint:disable-next-line:max-line-length */\n            csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n              type: 'dateTime',\n              format: this.globalStyles.get(cell.style.name)\n            }, this.isServerRendered));\n          }\n        } else {\n          csv += cell.value;\n        }\n      } else if (typeof cell.value === 'boolean') {\n        csv += cell.value ? 'TRUE' : 'FALSE';\n      } else if (typeof cell.value === 'number') {\n        if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n          /* tslint:disable-next-line:max-line-length */\n          csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n            format: cell.style.numberFormat\n          }, this.isServerRendered));\n        } else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n          /* tslint:disable-next-line:max-line-length */\n          csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n            format: this.globalStyles.get(cell.style.name)\n          }, this.isServerRendered));\n        } else {\n          csv += cell.value;\n        }\n      } else {\n        csv += this.parseCellValue(cell.value);\n      }\n    }\n\n    this.csvStr = csv;\n  }\n\n  parseCellValue(value) {\n    let val = '';\n    let length = value.length;\n\n    for (let start = 0; start < length; start++) {\n      if (value[start] === '\\\"') {\n        val += value[start].replace('\\\"', '\\\"\\\"');\n      } else {\n        val += value[start];\n      }\n    }\n\n    value = val;\n\n    if (value.indexOf(this.separator) !== -1 || value.indexOf('\\n') !== -1) {\n      return value = '\\\"' + value + '\\\"';\n    } else {\n      return value;\n    }\n  }\n  /**\n   * Saves the file with specified name and sends the file to client browser\n   * @param  {string} fileName- file name to save.\n   * @param  {Blob} buffer- the content to write in file\n   */\n\n\n  save(fileName) {\n    this.buffer = new Blob(['\\ufeff' + this.csvStr], {\n      type: 'text/csv;charset=UTF-8'\n    });\n\n    if (this.isMicrosoftBrowser) {\n      navigator.msSaveBlob(this.buffer, fileName);\n    } else {\n      let dataUrl = window.URL.createObjectURL(this.buffer);\n      let dwlLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n      dwlLink.download = fileName;\n      dwlLink.href = dataUrl;\n      let event = document.createEvent('MouseEvent');\n      event.initEvent('click', true, true);\n      dwlLink.dispatchEvent(event);\n      setTimeout(() => {\n        window.URL.revokeObjectURL(dataUrl);\n      });\n    }\n  }\n\n  saveAsBlob() {\n    return new Blob(['\\ufeff' + this.csvStr], {\n      type: 'text/csv;charset=UTF-8'\n    });\n  }\n\n}\n/**\n * BlobHelper class\n * @private\n */\n\n\nclass BlobHelper {\n  constructor() {\n    /* tslint:disable:no-any */\n    this.parts = [];\n  }\n  /* tslint:disable:no-any */\n\n\n  append(part) {\n    this.parts.push(part);\n    this.blob = undefined; // Invalidate the blob\n  }\n\n  getBlob() {\n    return new Blob(this.parts, {\n      type: 'text/plain'\n    });\n  }\n\n}\n/**\n * AutoFilters class\n * @private\n */\n\n\nclass AutoFilters {}\n/**\n * Workbook class\n */\n\n\nclass Workbook {\n  /* tslint:disable:no-any */\n  constructor(json, saveType, culture, currencyString, separator) {\n    this.sharedStringCount = 0;\n    this.unitsProportions = [96 / 75.0, 96 / 300.0, 96, 96 / 25.4, 96 / 2.54, 1, 96 / 72.0, 96 / 72.0 / 12700];\n    /* tslint:disable:no-any */\n\n    this.hyperlinkStyle = {\n      fontColor: '#0000FF',\n      underline: true\n    };\n\n    if (culture !== undefined) {\n      this.culture = culture;\n    } else {\n      this.culture = 'en-US';\n    }\n\n    if (currencyString !== undefined) {\n      this.currency = currencyString;\n    } else {\n      this.currency = 'USD';\n    }\n\n    this.intl = new Internationalization(this.culture);\n    this.mSaveType = saveType;\n\n    if (saveType === 'xlsx') {\n      this.mArchive = new ZipArchive();\n      this.sharedString = [];\n      this.mFonts = [];\n      this.mBorders = [];\n      this.mStyles = [];\n      this.printTitles = new Map();\n      this.cellStyles = new Map();\n      this.mNumFmt = new Map();\n      this.mFills = new Map();\n      this.mStyles.push(new CellStyle());\n      this.mFonts.push(new Font());\n      /* tslint:disable */\n\n      this.cellStyles.set('Normal', new CellStyles());\n      /* tslint:enable */\n\n      this.mCellXfs = [];\n      this.mCellStyleXfs = [];\n      this.drawingCount = 0;\n      this.imageCount = 0;\n\n      if (json.styles !== null && json.styles !== undefined) {\n        /* tslint:disable-next-line:no-any */\n        this.globalStyles = new Map();\n\n        for (let i = 0; i < json.styles.length; i++) {\n          if (json.styles[i].name !== undefined) {\n            if (!this.cellStyles.has(json.styles[i].name)) {\n              let cellStyle = new CellStyle();\n              cellStyle.isGlobalStyle = true;\n              this.parserCellStyle(json.styles[i], cellStyle, 'none');\n              let cellStylesIn = new CellStyles();\n              cellStylesIn.name = cellStyle.name;\n              cellStylesIn.xfId = cellStyle.index - 1;\n              this.cellStyles.set(cellStylesIn.name, cellStylesIn);\n              /* tslint:disable-next-line:no-any */\n\n              let tFormat = {};\n\n              if (json.styles[i].numberFormat !== undefined) {\n                tFormat.format = json.styles[i].numberFormat;\n              }\n\n              if (json.styles[i].type !== undefined) {\n                tFormat.type = json.styles[i].type;\n              } else {\n                tFormat.type = 'datetime';\n              }\n\n              if (tFormat.format !== undefined) {\n                this.globalStyles.set(json.styles[i].name, tFormat);\n              }\n            } else {\n              throw Error('Style name ' + json.styles[i].name + ' is already existed');\n            }\n          }\n        }\n      } // Parses Worksheets data to DOM.        \n\n\n      if (json.worksheets !== null && json.worksheets !== undefined) {\n        this.parserWorksheets(json.worksheets);\n      } else {\n        throw Error('Worksheet is expected.');\n      } // Parses the BuiltInProperties data to DOM.        \n\n\n      if (json.builtInProperties !== null && json.builtInProperties !== undefined) {\n        this.builtInProperties = new BuiltInProperties();\n        this.parserBuiltInProperties(json.builtInProperties, this.builtInProperties);\n      }\n    } else {\n      this.csvHelper = new CsvHelper(json, separator);\n    }\n  }\n  /* tslint:disable:no-any */\n\n\n  parserBuiltInProperties(jsonBuiltInProperties, builtInProperties) {\n    //Author\n    if (jsonBuiltInProperties.author !== null && jsonBuiltInProperties.author !== undefined) {\n      builtInProperties.author = jsonBuiltInProperties.author;\n    } //Comments\n\n\n    if (jsonBuiltInProperties.comments !== null && jsonBuiltInProperties.comments !== undefined) {\n      builtInProperties.comments = jsonBuiltInProperties.comments;\n    } //Category\n\n\n    if (jsonBuiltInProperties.category !== null && jsonBuiltInProperties.category !== undefined) {\n      builtInProperties.category = jsonBuiltInProperties.category;\n    } //Company\n\n\n    if (jsonBuiltInProperties.company !== null && jsonBuiltInProperties.company !== undefined) {\n      builtInProperties.company = jsonBuiltInProperties.company;\n    } //Manager\n\n\n    if (jsonBuiltInProperties.manager !== null && jsonBuiltInProperties.manager !== undefined) {\n      builtInProperties.manager = jsonBuiltInProperties.manager;\n    } //Subject\n\n\n    if (jsonBuiltInProperties.subject !== null && jsonBuiltInProperties.subject !== undefined) {\n      builtInProperties.subject = jsonBuiltInProperties.subject;\n    } //Title\n\n\n    if (jsonBuiltInProperties.title !== null && jsonBuiltInProperties.title !== undefined) {\n      builtInProperties.title = jsonBuiltInProperties.title;\n    } //Creation date\n\n\n    if (jsonBuiltInProperties.createdDate !== null && jsonBuiltInProperties.createdDate !== undefined) {\n      builtInProperties.createdDate = jsonBuiltInProperties.createdDate;\n    } //Modified date\n\n\n    if (jsonBuiltInProperties.modifiedDate !== null && jsonBuiltInProperties.modifiedDate !== undefined) {\n      builtInProperties.modifiedDate = jsonBuiltInProperties.modifiedDate;\n    } //Tags\n\n\n    if (jsonBuiltInProperties.tags !== null && jsonBuiltInProperties.tags !== undefined) {\n      builtInProperties.tags = jsonBuiltInProperties.tags;\n    } //Status\n\n\n    if (jsonBuiltInProperties.status !== null && jsonBuiltInProperties.status !== undefined) {\n      builtInProperties.status = jsonBuiltInProperties.status;\n    }\n  }\n  /* tslint:disable:no-any */\n\n\n  parserWorksheets(json) {\n    this.worksheets = new Worksheets();\n    let length = json.length;\n\n    for (let i = 0; i < length; i++) {\n      let jsonSheet = json[i];\n      let sheet = new Worksheet();\n      this.mergeCells = new MergeCells();\n      this.mergedCellsStyle = new Map();\n      this.mHyperLinks = []; //Name\n\n      if (jsonSheet.name !== null && jsonSheet.name !== undefined) {\n        sheet.name = jsonSheet.name;\n      } else {\n        sheet.name = 'Sheet' + (i + 1).toString();\n      }\n\n      if (jsonSheet.enableRtl !== null && jsonSheet.enableRtl !== undefined) {\n        sheet.enableRtl = jsonSheet.enableRtl;\n      }\n\n      sheet.index = i + 1; //Columns\n\n      if (jsonSheet.columns !== null && jsonSheet.columns !== undefined) {\n        this.parserColumns(jsonSheet.columns, sheet);\n      } //Rows\n\n\n      if (jsonSheet.rows !== null && jsonSheet.rows !== undefined) {\n        this.parserRows(jsonSheet.rows, sheet);\n      } //showGridLines\n\n\n      if (jsonSheet.showGridLines !== null && jsonSheet.showGridLines !== undefined) {\n        sheet.showGridLines = jsonSheet.showGridLines;\n      } //FreezePanes\n\n\n      if (jsonSheet.freeze !== null && jsonSheet.freeze !== undefined) {\n        this.parserFreezePanes(jsonSheet.freeze, sheet);\n      } //Print Title\n\n\n      if (jsonSheet.printTitle !== null && jsonSheet.printTitle !== undefined) {\n        this.parserPrintTitle(jsonSheet.printTitle, sheet);\n      }\n\n      if (jsonSheet.pageSetup !== undefined) {\n        if (jsonSheet.pageSetup.isSummaryRowBelow !== undefined) {\n          sheet.isSummaryRowBelow = jsonSheet.pageSetup.isSummaryRowBelow;\n        }\n      }\n\n      if (jsonSheet.images !== undefined) {\n        this.parserImages(jsonSheet.images, sheet);\n      }\n\n      if (jsonSheet.autoFilters !== null && jsonSheet.autoFilters !== undefined) {\n        this.parseFilters(jsonSheet.autoFilters, sheet);\n      }\n\n      sheet.index = i + 1;\n      sheet.mergeCells = this.mergeCells;\n      sheet.hyperLinks = this.mHyperLinks;\n      this.worksheets.push(sheet);\n    }\n  }\n  /* tslint:disable:no-any */\n\n\n  mergeOptions(fromJson, toJson) {\n    /* tslint:disable:no-any */\n    let result = {};\n    this.applyProperties(fromJson, result);\n    this.applyProperties(toJson, result);\n    return result;\n  }\n  /* tslint:disable:no-any */\n\n\n  applyProperties(sourceJson, destJson) {\n    let keys = Object.keys(sourceJson);\n\n    for (let index = 0; index < keys.length; index++) {\n      if (keys[index] !== 'name') {\n        destJson[keys[index]] = sourceJson[keys[index]];\n      }\n    }\n  }\n\n  getCellName(row, column) {\n    return this.getColumnName(column) + row.toString();\n  }\n\n  getColumnName(col) {\n    col--;\n    let strColumnName = '';\n\n    do {\n      let iCurrentDigit = col % 26;\n      col = col / 26 - 1;\n      strColumnName = String.fromCharCode(65 + iCurrentDigit) + strColumnName;\n    } while (col >= 0);\n\n    return strColumnName;\n  }\n  /* tslint:disable:no-any */\n\n\n  parserPrintTitle(json, sheet) {\n    let printTitleName = '';\n    let titleRowName;\n\n    if (json.fromRow !== null && json.fromRow !== undefined) {\n      let fromRow = json.fromRow;\n      let toRow;\n\n      if (json.toRow !== null && json.toRow !== undefined) {\n        toRow = json.toRow;\n      } else {\n        toRow = json.fromRow;\n      }\n\n      titleRowName = '$' + fromRow + ':$' + toRow;\n    }\n\n    let titleColName;\n\n    if (json.fromColumn !== null && json.fromColumn !== undefined) {\n      let fromColumn = json.fromColumn;\n      let toColumn;\n\n      if (json.toColumn !== null && json.toColumn !== undefined) {\n        toColumn = json.toColumn;\n      } else {\n        toColumn = json.fromColumn;\n      }\n\n      titleColName = '$' + this.getColumnName(fromColumn) + ':$' + this.getColumnName(toColumn);\n    }\n\n    if (titleRowName !== undefined) {\n      printTitleName += sheet.name + '!' + titleRowName;\n    }\n\n    if (titleColName !== undefined && titleRowName !== undefined) {\n      printTitleName += ',' + (sheet.name + '!' + titleColName);\n    } else if (titleColName !== undefined) {\n      printTitleName += sheet.name + '!' + titleColName;\n    }\n\n    if (printTitleName !== '') {\n      this.printTitles.set(sheet.index - 1, printTitleName);\n    }\n  }\n  /* tslint:disable:no-any */\n\n\n  parserFreezePanes(json, sheet) {\n    sheet.freezePanes = new FreezePane();\n\n    if (json.row !== null && json.row !== undefined) {\n      sheet.freezePanes.row = json.row;\n    } else {\n      sheet.freezePanes.row = 0;\n    }\n\n    if (json.column !== null && json.column !== undefined) {\n      sheet.freezePanes.column = json.column;\n    } else {\n      sheet.freezePanes.column = 0;\n    }\n\n    sheet.freezePanes.leftCell = this.getCellName(sheet.freezePanes.row + 1, sheet.freezePanes.column + 1);\n  }\n  /* tslint:disable:no-any */\n\n\n  parserColumns(json, sheet) {\n    let columnsLength = json.length;\n    sheet.columns = [];\n\n    for (let column = 0; column < columnsLength; column++) {\n      let col = new Column();\n\n      if (json[column].index !== null && json[column].index !== undefined) {\n        col.index = json[column].index;\n      } else {\n        throw Error('Column index is missing.');\n      }\n\n      if (json[column].width !== null && json[column].width !== undefined) {\n        col.width = json[column].width;\n      }\n\n      sheet.columns.push(col);\n    }\n  }\n  /* tslint:disable:no-any */\n\n\n  parserRows(json, sheet) {\n    let rowsLength = json.length;\n    sheet.rows = new Rows();\n    let rowId = 0;\n\n    for (let r = 0; r < rowsLength; r++) {\n      let row = this.parserRow(json[r], rowId);\n      rowId = row.index;\n      sheet.rows.add(row);\n    }\n\n    this.insertMergedCellsStyle(sheet);\n  }\n\n  insertMergedCellsStyle(sheet) {\n    if (this.mergeCells.length > 0) {\n      this.mergedCellsStyle.forEach((value, key) => {\n        let row = sheet.rows.filter(item => {\n          return item.index === value.y;\n        })[0];\n\n        if (!isNullOrUndefined(row)) {\n          let cell = row.cells.filter(item => {\n            return item.index === value.x;\n          })[0];\n\n          if (!isNullOrUndefined(cell)) {\n            cell.styleIndex = value.styleIndex;\n          } else {\n            let cells = row.cells.filter(item => {\n              return item.index <= value.x;\n            });\n            let insertIndex = 0;\n\n            if (cells.length > 0) {\n              insertIndex = row.cells.indexOf(cells[cells.length - 1]) + 1;\n            }\n\n            row.cells.splice(insertIndex, 0, this.createCell(value, key));\n          }\n        } else {\n          let rows = sheet.rows.filter(item => {\n            return item.index <= value.y;\n          });\n          let rowToInsert = new Row();\n          rowToInsert.index = value.y;\n          rowToInsert.cells = new Cells();\n          rowToInsert.cells.add(this.createCell(value, key));\n          let insertIndex = 0;\n\n          if (rows.length > 0) {\n            insertIndex = sheet.rows.indexOf(rows[rows.length - 1]) + 1;\n          }\n\n          sheet.rows.splice(insertIndex, 0, rowToInsert);\n        }\n      });\n    }\n  }\n\n  createCell(value, key) {\n    let cellToInsert = new Cell();\n    cellToInsert.refName = key;\n    cellToInsert.index = value.x;\n    cellToInsert.cellStyle = new CellStyle();\n    cellToInsert.styleIndex = value.styleIndex;\n    return cellToInsert;\n  }\n  /* tslint:disable:no-any */\n\n\n  parserRow(json, rowIndex) {\n    let row = new Row(); //Row Height\n\n    if (json.height !== null && json.height !== undefined) {\n      row.height = json.height;\n    } //Row index\n\n\n    if (json.index !== null && json.index !== undefined) {\n      row.index = json.index;\n    } else {\n      throw Error('Row index is missing.');\n    }\n\n    if (json.grouping !== null && json.grouping !== undefined) {\n      this.parseGrouping(json.grouping, row);\n    }\n\n    this.parseCells(json.cells, row);\n    return row;\n  }\n  /* tslint:disable:no-any */\n\n\n  parseGrouping(json, row) {\n    row.grouping = new Grouping();\n\n    if (json.outlineLevel !== undefined) {\n      row.grouping.outlineLevel = json.outlineLevel;\n    }\n\n    if (json.isCollapsed !== undefined) {\n      row.grouping.isCollapsed = json.isCollapsed;\n    }\n\n    if (json.isHidden !== undefined) {\n      row.grouping.isHidden = json.isHidden;\n    }\n  }\n  /* tslint:disable:no-any */\n\n\n  parseCells(json, row) {\n    row.cells = new Cells();\n    let cellsLength = json !== undefined ? json.length : 0;\n    let spanMin = 1;\n    let spanMax = 1;\n\n    for (let cellId = 0; cellId < cellsLength; cellId++) {\n      /* tslint:disable:no-any */\n      let jsonCell = json[cellId];\n      let cell = new Cell(); //cell index\n\n      if (jsonCell.index !== null && jsonCell.index !== undefined) {\n        cell.index = jsonCell.index;\n      } else {\n        throw Error('Cell index is missing.');\n      }\n\n      if (cell.index < spanMin) {\n        spanMin = cell.index;\n      } else if (cell.index > spanMax) {\n        spanMax = cell.index;\n      } //Update the Cell name\n\n\n      cell.refName = this.getCellName(row.index, cell.index); //Row span\n\n      if (jsonCell.rowSpan !== null && jsonCell.rowSpan !== undefined) {\n        cell.rowSpan = jsonCell.rowSpan - 1;\n      } else {\n        cell.rowSpan = 0;\n      } //Column span\n\n\n      if (jsonCell.colSpan !== null && jsonCell.colSpan !== undefined) {\n        cell.colSpan = jsonCell.colSpan - 1;\n      } else {\n        cell.colSpan = 0;\n      } //Hyperlink\n\n\n      if (jsonCell.hyperlink !== null && jsonCell.hyperlink !== undefined) {\n        let hyperLink = new HyperLink();\n\n        if (jsonCell.hyperlink.target !== undefined) {\n          hyperLink.target = jsonCell.hyperlink.target;\n\n          if (jsonCell.hyperlink.displayText !== undefined) {\n            cell.value = jsonCell.hyperlink.displayText;\n          } else {\n            cell.value = jsonCell.hyperlink.target;\n          }\n\n          cell.type = this.getCellValueType(cell.value);\n          hyperLink.ref = cell.refName;\n          hyperLink.rId = this.mHyperLinks.length + 1;\n          this.mHyperLinks.push(hyperLink);\n          cell.cellStyle = new CellStyle();\n          /* tslint:disable-next-line:max-line-length */\n\n          this.parserCellStyle(jsonCell.style !== undefined ? this.mergeOptions(jsonCell.style, this.hyperlinkStyle) : this.hyperlinkStyle, cell.cellStyle, 'string');\n          cell.styleIndex = cell.cellStyle.index;\n        }\n      } // formulas\n\n\n      if (jsonCell.formula !== null && jsonCell.formula !== undefined) {\n        cell.formula = jsonCell.formula;\n        cell.type = 'formula';\n      } //Cell value\n\n\n      if (jsonCell.value !== null && jsonCell.value !== undefined) {\n        if (cell.formula !== undefined) {\n          cell.value = 0;\n        } else {\n          cell.value = jsonCell.value;\n          cell.type = this.getCellValueType(cell.value);\n        }\n      }\n\n      if (jsonCell.style !== null && jsonCell.style !== undefined && cell.styleIndex === undefined) {\n        cell.cellStyle = new CellStyle();\n\n        if (cell.value instanceof Date) {\n          this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type, 14);\n        } else {\n          this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type);\n        }\n\n        cell.styleIndex = cell.cellStyle.index;\n      } else if (cell.value instanceof Date) {\n        cell.cellStyle = new CellStyle();\n        this.parserCellStyle({}, cell.cellStyle, cell.type, 14);\n        cell.styleIndex = cell.cellStyle.index;\n      }\n\n      this.parseCellType(cell);\n      this.mergeCells = this.processMergeCells(cell, row.index, this.mergeCells);\n      row.cells.add(cell);\n    }\n\n    row.spans = spanMin + ':' + spanMax;\n  }\n\n  GetColors() {\n    let colors;\n    colors = new Map();\n    /* tslint:disable */\n\n    colors.set('WHITE', 'FFFFFFFF');\n    /* tslint:disable */\n\n    colors.set('SILVER', 'FFC0C0C0');\n    /* tslint:disable */\n\n    colors.set('GRAY', 'FF808080');\n    /* tslint:disable */\n\n    colors.set('BLACK', 'FF000000');\n    /* tslint:disable */\n\n    colors.set('RED', 'FFFF0000');\n    /* tslint:disable */\n\n    colors.set('MAROON', 'FF800000');\n    /* tslint:disable */\n\n    colors.set('YELLOW', 'FFFFFF00');\n    /* tslint:disable */\n\n    colors.set('OLIVE', 'FF808000');\n    /* tslint:disable */\n\n    colors.set('LIME', 'FF00FF00');\n    /* tslint:disable */\n\n    colors.set('GREEN', 'FF008000');\n    /* tslint:disable */\n\n    colors.set('AQUA', 'FF00FFFF');\n    /* tslint:disable */\n\n    colors.set('TEAL', 'FF008080');\n    /* tslint:disable */\n\n    colors.set('BLUE', 'FF0000FF');\n    /* tslint:disable */\n\n    colors.set('NAVY', 'FF000080');\n    /* tslint:disable */\n\n    colors.set('FUCHSIA', 'FFFF00FF');\n    /* tslint:disable */\n\n    colors.set('PURPLE', 'FF800080');\n    return colors;\n  }\n\n  processColor(colorVal) {\n    if (colorVal.indexOf('#') === 0) {\n      return colorVal.replace('#', 'FF');\n    }\n\n    colorVal = colorVal.toUpperCase();\n    this.rgbColors = this.GetColors();\n\n    if (this.rgbColors.has(colorVal)) {\n      colorVal = this.rgbColors.get(colorVal);\n    } else {\n      colorVal = 'FF000000';\n    }\n\n    return colorVal;\n  }\n\n  processCellValue(value, cell) {\n    let cellValue = value;\n\n    if (value.indexOf(\"<font\") !== -1 || value.indexOf(\"<a\") !== -1 || value.indexOf(\"<b>\") !== -1 || value.indexOf(\"<i>\") !== -1 || value.indexOf(\"<u>\") !== -1) {\n      let processedVal = '';\n      let startindex = value.indexOf('<', 0);\n      let endIndex = value.indexOf('>', startindex + 1);\n\n      if (startindex >= 0 && endIndex >= 0) {\n        if (startindex !== 0) {\n          processedVal += '<r><t xml:space=\"preserve\">' + this.processString(value.substring(0, startindex)) + '</t></r>';\n        }\n\n        while (startindex >= 0 && endIndex >= 0) {\n          endIndex = value.indexOf('>', startindex + 1);\n\n          if (endIndex >= 0) {\n            let subString = value.substring(startindex + 1, endIndex);\n            startindex = value.indexOf('<', endIndex + 1);\n\n            if (startindex < 0) {\n              startindex = cellValue.length;\n            }\n\n            let text = cellValue.substring(endIndex + 1, startindex);\n\n            if (text.length !== 0) {\n              let subSplit = subString.split(' ');\n\n              if (subSplit.length > 0) {\n                processedVal += '<r><rPr>';\n              }\n\n              if (subSplit.length > 1) {\n                for (let element of subSplit) {\n                  let start = element.trim().substring(0, 5);\n\n                  switch (start) {\n                    case 'size=':\n                      processedVal += '<sz val=\"' + element.substring(6, element.length - 1) + '\"/>';\n                      break;\n\n                    case 'face=':\n                      processedVal += '<rFont val=\"' + element.substring(6, element.length - 1) + '\"/>';\n                      break;\n\n                    case 'color':\n                      processedVal += '<color rgb=\"' + this.processColor(element.substring(7, element.length - 1)) + '\"/>';\n                      break;\n\n                    case 'href=':\n                      let hyperLink = new HyperLink();\n                      hyperLink.target = element.substring(6, element.length - 1).trim();\n                      hyperLink.ref = cell.refName;\n                      hyperLink.rId = this.mHyperLinks.length + 1;\n                      this.mHyperLinks.push(hyperLink);\n                      processedVal += '<color rgb=\"FF0000FF\"/><u/><b/>';\n                      break;\n                  }\n                }\n              } else if (subSplit.length === 1) {\n                let style = subSplit[0].trim();\n\n                switch (style) {\n                  case 'b':\n                    processedVal += '<b/>';\n                    break;\n\n                  case 'i':\n                    processedVal += '<i/>';\n                    break;\n\n                  case 'u':\n                    processedVal += '<u/>';\n                    break;\n                }\n              }\n\n              processedVal += '</rPr><t xml:space=\"preserve\">' + this.processString(text) + '</t></r>';\n            }\n          }\n        }\n\n        if (processedVal === '') {\n          return cellValue;\n        }\n\n        return processedVal;\n      } else {\n        return cellValue;\n      }\n    } else {\n      return cellValue;\n    }\n  }\n\n  applyGlobalStyle(json, cellStyle) {\n    if (this.cellStyles.has(json.name)) {\n      cellStyle.index = this.mStyles.filter(a => a.name === json.name)[0].index;\n      cellStyle.name = json.name;\n    }\n  }\n  /* tslint:disable:no-any */\n\n\n  parserCellStyle(json, cellStyle, cellType, defStyleIndex) {\n    //name\n    if (json.name !== null && json.name !== undefined) {\n      if (cellStyle.isGlobalStyle) {\n        cellStyle.name = json.name;\n      } else {\n        this.applyGlobalStyle(json, cellStyle);\n        return;\n      }\n    } //background color\n\n\n    if (json.backColor !== null && json.backColor !== undefined) {\n      cellStyle.backColor = json.backColor;\n    } //borders\n    //leftBorder\n\n\n    cellStyle.borders = new Borders(); //AllBorder\n\n    if (json.borders !== null && json.borders !== undefined) {\n      this.parserBorder(json.borders, cellStyle.borders.all);\n    } //leftborder\n\n\n    if (json.leftBorder !== null && json.leftBorder !== undefined) {\n      this.parserBorder(json.leftBorder, cellStyle.borders.left);\n    } //rightBorder\n\n\n    if (json.rightBorder !== null && json.rightBorder !== undefined) {\n      this.parserBorder(json.rightBorder, cellStyle.borders.right);\n    } //topBorder\n\n\n    if (json.topBorder !== null && json.topBorder !== undefined) {\n      this.parserBorder(json.topBorder, cellStyle.borders.top);\n    } //bottomBorder\n\n\n    if (json.bottomBorder !== null && json.bottomBorder !== undefined) {\n      this.parserBorder(json.bottomBorder, cellStyle.borders.bottom);\n    } //fontName\n\n\n    if (json.fontName !== null && json.fontName !== undefined) {\n      cellStyle.fontName = json.fontName;\n    } //fontSize\n\n\n    if (json.fontSize !== null && json.fontSize !== undefined) {\n      cellStyle.fontSize = json.fontSize;\n    } //fontColor\n\n\n    if (json.fontColor !== null && json.fontColor !== undefined) {\n      cellStyle.fontColor = json.fontColor;\n    } //italic\n\n\n    if (json.italic !== null && json.italic !== undefined) {\n      cellStyle.italic = json.italic;\n    } //bold\n\n\n    if (json.bold !== null && json.bold !== undefined) {\n      cellStyle.bold = json.bold;\n    } //hAlign\n\n\n    if (json.hAlign !== null && json.hAlign !== undefined) {\n      cellStyle.hAlign = json.hAlign.toLowerCase();\n    } //indent\n\n\n    if (json.indent !== null && json.indent !== undefined) {\n      cellStyle.indent = json.indent;\n\n      if (!(cellStyle.hAlign === 'left' || cellStyle.hAlign === 'right')) {\n        cellStyle.hAlign = 'left';\n      }\n    }\n\n    if (json.rotation !== null && json.rotation !== undefined) {\n      cellStyle.rotation = json.rotation;\n    } //vAlign\n\n\n    if (json.vAlign !== null && json.vAlign !== undefined) {\n      cellStyle.vAlign = json.vAlign.toLowerCase();\n    } //underline\n\n\n    if (json.underline !== null && json.underline !== undefined) {\n      cellStyle.underline = json.underline;\n    } //strikeThrough\n\n\n    if (json.strikeThrough !== null && json.strikeThrough !== undefined) {\n      cellStyle.strikeThrough = json.strikeThrough;\n    } //wrapText\n\n\n    if (json.wrapText !== null && json.wrapText !== undefined) {\n      cellStyle.wrapText = json.wrapText;\n    } //numberFormat\n\n\n    if (json.numberFormat !== null && json.numberFormat !== undefined) {\n      if (json.type !== null && json.type !== undefined) {\n        cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, json.type);\n      } else {\n        cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, cellType);\n      }\n    } else if (defStyleIndex !== undefined) {\n      cellStyle.numFmtId = 14;\n      cellStyle.numberFormat = 'GENERAL';\n    } else {\n      cellStyle.numberFormat = 'GENERAL';\n    }\n\n    cellStyle.index = this.processCellStyle(cellStyle);\n  }\n\n  switchNumberFormat(numberFormat, type) {\n    let format = this.getNumberFormat(numberFormat, type);\n\n    if (format !== numberFormat) {\n      let numFmt = this.mNumFmt.get(numberFormat);\n\n      if (numFmt !== undefined) {\n        numFmt.formatCode = format;\n\n        if (this.mNumFmt.has(format)) {\n          for (let cellStyleXfs of this.mCellStyleXfs) {\n            if (cellStyleXfs.numFmtId === numFmt.numFmtId) {\n              cellStyleXfs.numFmtId = this.mNumFmt.get(format).numFmtId;\n            }\n          }\n\n          for (let cellXfs of this.mCellXfs) {\n            if (cellXfs.numFmtId === numFmt.numFmtId) {\n              cellXfs.numFmtId = this.mNumFmt.get(format).numFmtId;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  getNumberFormat(numberFormat, type) {\n    let returnFormat;\n\n    switch (type) {\n      case 'number':\n        try {\n          returnFormat = this.intl.getNumberPattern({\n            format: numberFormat,\n            currency: this.currency,\n            useGrouping: true\n          }, true);\n        } catch (error) {\n          returnFormat = numberFormat;\n        }\n\n        break;\n\n      case 'datetime':\n        try {\n          returnFormat = this.intl.getDatePattern({\n            skeleton: numberFormat,\n            type: 'dateTime'\n          }, true);\n        } catch (error) {\n          try {\n            returnFormat = this.intl.getDatePattern({\n              format: numberFormat,\n              type: 'dateTime'\n            }, true);\n          } catch (error) {\n            returnFormat = numberFormat;\n          }\n        }\n\n        break;\n\n      case 'date':\n        try {\n          returnFormat = this.intl.getDatePattern({\n            skeleton: numberFormat,\n            type: 'date'\n          }, true);\n        } catch (error) {\n          try {\n            returnFormat = this.intl.getDatePattern({\n              format: numberFormat,\n              type: 'date'\n            }, true);\n          } catch (error) {\n            returnFormat = numberFormat;\n          }\n        }\n\n        break;\n\n      case 'time':\n        try {\n          returnFormat = this.intl.getDatePattern({\n            skeleton: numberFormat,\n            type: 'time'\n          }, true);\n        } catch (error) {\n          try {\n            returnFormat = this.intl.getDatePattern({\n              format: numberFormat,\n              type: 'time'\n            }, true);\n          } catch (error) {\n            returnFormat = numberFormat;\n          }\n        }\n\n        break;\n\n      default:\n        returnFormat = numberFormat;\n        break;\n    }\n\n    return returnFormat;\n  }\n  /* tslint:disable:no-any */\n\n\n  parserBorder(json, border) {\n    if (json.color !== null && json.color !== undefined) {\n      border.color = json.color;\n    } else {\n      border.color = '#000000';\n    }\n\n    if (json.lineStyle !== null && json.lineStyle !== undefined) {\n      border.lineStyle = json.lineStyle;\n    } else {\n      border.lineStyle = 'thin';\n    }\n  }\n\n  processCellStyle(style) {\n    if (style.isGlobalStyle) {\n      this.processNumFormatId(style);\n      this.mStyles.push(style);\n      return this.mStyles.length;\n    } else {\n      let compareResult = this.compareStyle(style);\n\n      if (!compareResult.result) {\n        this.processNumFormatId(style);\n        this.mStyles.push(style);\n        return this.mStyles.length;\n      } else {\n        //Return the index of the already existing style.\n        return compareResult.index;\n      }\n    }\n  }\n\n  processNumFormatId(style) {\n    if (style.numberFormat !== 'GENERAL' && !this.mNumFmt.has(style.numberFormat)) {\n      let id = this.mNumFmt.size + 164;\n      this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));\n    }\n  }\n\n  isNewFont(toCompareStyle) {\n    let result = false;\n    let index = 0;\n\n    for (let font of this.mFonts) {\n      index++;\n      let fontColor = undefined;\n\n      if (toCompareStyle.fontColor !== undefined) {\n        fontColor = 'FF' + toCompareStyle.fontColor.replace('#', '');\n      }\n\n      result = font.color === fontColor && font.b === toCompareStyle.bold && font.i === toCompareStyle.italic && font.u === toCompareStyle.underline && font.strike === toCompareStyle.strikeThrough && font.name === toCompareStyle.fontName && font.sz === toCompareStyle.fontSize;\n\n      if (result) {\n        break;\n      }\n    }\n\n    index = index - 1;\n    return {\n      index,\n      result\n    };\n  }\n\n  isNewBorder(toCompareStyle) {\n    let bStyle = new CellStyle();\n\n    if (this.isAllBorder(toCompareStyle.borders)) {\n      return bStyle.borders.all.color === toCompareStyle.borders.all.color && bStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle;\n    } else {\n      return bStyle.borders.left.color === toCompareStyle.borders.left.color && bStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle && bStyle.borders.right.color === toCompareStyle.borders.right.color && bStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle && bStyle.borders.top.color === toCompareStyle.borders.top.color && bStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle && bStyle.borders.bottom.color === toCompareStyle.borders.bottom.color && bStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle;\n    }\n  }\n\n  isAllBorder(toCompareBorder) {\n    let allBorderStyle = new CellStyle();\n    return allBorderStyle.borders.all.color !== toCompareBorder.all.color && allBorderStyle.borders.all.lineStyle !== toCompareBorder.all.lineStyle;\n  }\n\n  compareStyle(toCompareStyle) {\n    let result = true;\n    let index = 0;\n\n    for (let baseStyle of this.mStyles) {\n      result = baseStyle.isGlobalStyle ? false : baseStyle.backColor === toCompareStyle.backColor && baseStyle.bold === toCompareStyle.bold && baseStyle.numFmtId === toCompareStyle.numFmtId && baseStyle.numberFormat === toCompareStyle.numberFormat && baseStyle.type === toCompareStyle.type && baseStyle.fontColor === toCompareStyle.fontColor && baseStyle.fontName === toCompareStyle.fontName && baseStyle.fontSize === toCompareStyle.fontSize && baseStyle.hAlign === toCompareStyle.hAlign && baseStyle.italic === toCompareStyle.italic && baseStyle.underline === toCompareStyle.underline && baseStyle.strikeThrough === toCompareStyle.strikeThrough && baseStyle.vAlign === toCompareStyle.vAlign && baseStyle.indent === toCompareStyle.indent && baseStyle.rotation === toCompareStyle.rotation && baseStyle.wrapText === toCompareStyle.wrapText && baseStyle.borders.all.color === toCompareStyle.borders.all.color && baseStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle && baseStyle.borders.left.color === toCompareStyle.borders.left.color && baseStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle && baseStyle.borders.right.color === toCompareStyle.borders.right.color && baseStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle && baseStyle.borders.top.color === toCompareStyle.borders.top.color && baseStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle && baseStyle.borders.bottom.color === toCompareStyle.borders.bottom.color && baseStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle;\n\n      if (result) {\n        index = baseStyle.index;\n        break;\n      }\n    }\n\n    return {\n      index,\n      result\n    };\n  }\n\n  contains(array, item) {\n    let index = array.indexOf(item);\n    return index > -1 && index < array.length;\n  }\n\n  getCellValueType(value) {\n    if (value instanceof Date) {\n      return 'datetime';\n    } else if (typeof value === 'boolean') {\n      return 'boolean';\n    } else if (typeof value === 'number') {\n      return 'number';\n    } else {\n      return 'string';\n    }\n  }\n\n  parseCellType(cell) {\n    let type = cell.type;\n    let saveType;\n    let value = cell.value;\n\n    switch (type) {\n      case 'datetime':\n        value = this.toOADate(value);\n\n        if (cell.cellStyle !== undefined && cell.cellStyle.name !== undefined) {\n          if (this.globalStyles.has(cell.cellStyle.name)) {\n            let value = this.globalStyles.get(cell.cellStyle.name);\n            this.switchNumberFormat(value.format, value.type);\n          }\n        }\n\n        saveType = 'n';\n        break;\n      //TODO: Update the number format index and style\n\n      case 'boolean':\n        value = value ? 1 : 0;\n        saveType = 'b';\n        break;\n\n      case 'number':\n        saveType = 'n';\n\n        if (cell.cellStyle !== undefined && cell.cellStyle.name !== undefined) {\n          if (this.globalStyles.has(cell.cellStyle.name)) {\n            this.switchNumberFormat(this.globalStyles.get(cell.cellStyle.name).format, 'number');\n          }\n        }\n\n        break;\n\n      case 'string':\n        this.sharedStringCount++;\n        saveType = 's';\n        let sstvalue = this.processCellValue(value, cell);\n\n        if (!this.contains(this.sharedString, sstvalue)) {\n          this.sharedString.push(sstvalue);\n        }\n\n        value = this.sharedString.indexOf(sstvalue);\n        break;\n\n      default:\n        break;\n    }\n\n    cell.saveType = saveType;\n    cell.value = value;\n  }\n\n  parserImages(json, sheet) {\n    let imagesLength = json.length;\n    sheet.images = [];\n\n    for (let p = 0; p < imagesLength; p++) {\n      let image = this.parserImage(json[p]);\n      sheet.images.push(image);\n    }\n  }\n\n  parseFilters(json, sheet) {\n    sheet.autoFilters = new AutoFilters();\n    if (json.row !== null && json.row !== undefined) sheet.autoFilters.row = json.row;else throw new Error('Argument Null Exception: row null or empty');\n    if (json.lastRow !== null && json.lastRow !== undefined) sheet.autoFilters.lastRow = json.lastRow;else throw new Error('Argument Null Exception: lastRow cannot be null or empty');\n    if (json.column !== null && json.column !== undefined) sheet.autoFilters.column = json.column;else throw new Error('Argument Null Exception: column cannot be null or empty');\n    if (json.lastColumn !== null && json.row !== undefined) sheet.autoFilters.lastColumn = json.lastColumn;else throw new Error('Argument Null Exception: lastColumn cannot be null or empty');\n  }\n\n  parserImage(json) {\n    let image = new Image();\n\n    if (json.image !== null && json.image !== undefined) {\n      image.image = json.image;\n    }\n\n    if (json.row !== null && json.row !== undefined) {\n      image.row = json.row;\n    }\n\n    if (json.column !== null && json.column !== undefined) {\n      image.column = json.column;\n    }\n\n    if (json.lastRow !== null && json.lastRow !== undefined) {\n      image.lastRow = json.lastRow;\n    }\n\n    if (json.lastColumn !== null && json.lastColumn !== undefined) {\n      image.lastColumn = json.lastColumn;\n    }\n\n    if (json.width !== null && json.width !== undefined) {\n      image.width = json.width;\n    }\n\n    if (json.height !== null && json.height !== undefined) {\n      image.height = json.height;\n    }\n\n    if (json.horizontalFlip !== null && json.horizontalFlip !== undefined) {\n      image.horizontalFlip = json.horizontalFlip;\n    }\n\n    if (json.verticalFlip !== null && json.verticalFlip !== undefined) {\n      image.verticalFlip = json.verticalFlip;\n    }\n\n    if (json.rotation !== null && json.rotation !== undefined) {\n      image.rotation = json.rotation;\n    }\n\n    return image;\n  }\n\n  saveAsBlob(blobSaveType) {\n    switch (blobSaveType) {\n      case 'text/csv':\n        return new Promise((resolve, reject) => {\n          let obj = {};\n          obj.blobData = this.csvHelper.saveAsBlob();\n          resolve(obj);\n        });\n\n      default:\n        return new Promise((resolve, reject) => {\n          this.saveInternal();\n          this.mArchive.saveAsBlob().then(blob => {\n            let obj = {};\n            obj.blobData = new Blob([blob], {\n              type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n            });\n            resolve(obj);\n          });\n        });\n    }\n  }\n\n  save(fileName, proxyUrl) {\n    if (fileName === null || fileName === undefined || fileName === '') {\n      throw new Error('Argument Null Exception: fileName cannot be null or empty');\n    }\n\n    let xlsxMatch = fileName.match('.xlsx$');\n    let csvMatch = fileName.match('.csv$');\n\n    if (xlsxMatch !== null && xlsxMatch[0] === '.' + this.mSaveType) {\n      this.saveInternal();\n      this.mArchive.save(fileName).then(() => {\n        this.mArchive.destroy();\n      });\n    } else if (csvMatch !== null && csvMatch[0] === '.' + this.mSaveType) {\n      this.csvHelper.save(fileName);\n    } else {\n      throw Error('Save type and file extension is different.');\n    }\n  }\n\n  saveInternal() {\n    this.saveWorkbook();\n    this.saveWorksheets();\n    this.saveSharedString();\n    this.saveStyles();\n    this.saveApp(this.builtInProperties);\n    this.saveCore(this.builtInProperties);\n    this.saveContentType();\n    this.saveTopLevelRelation();\n    this.saveWorkbookRelation();\n  }\n\n  saveWorkbook() {\n    /* tslint:disable-next-line:max-line-length */\n    let workbookTemp = '<?xml version=\"1.0\" encoding=\"utf-8\"?><workbook xmlns:r = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns= \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"><workbookPr codeName=\"ThisWorkbook\" defaultThemeVersion= \"153222\"/><bookViews><workbookView activeTab=\"0\"/></bookViews>';\n    let sheets = '<sheets>';\n    let length = this.worksheets.length;\n\n    for (let i = 0; i < length; i++) {\n      /* tslint:disable-next-line:max-line-length */\n      let sheetName = this.worksheets[i].name;\n      sheetName = sheetName.replace(\"&\", \"&amp;\");\n      sheetName = sheetName.replace(\"<\", \"&lt;\");\n      sheetName = sheetName.replace(\">\", \"&gt;\");\n      sheetName = sheetName.replace(\"\\\"\", \"&quot;\");\n      sheets += '<sheet name=\"' + sheetName + '\" sheetId=\"' + (i + 1).toString() + '\" r:id =\"rId' + (i + 1).toString() + '\" />';\n    }\n\n    sheets += '</sheets>';\n    workbookTemp += sheets;\n\n    if (this.printTitles.size > 0) {\n      let printTitle = '<definedNames>';\n      this.printTitles.forEach((value, key) => {\n        printTitle += '<definedName name=\"_xlnm.Print_Titles\" localSheetId=\"' + key + '\">' + value + '</definedName>';\n      });\n      printTitle += '</definedNames>';\n      workbookTemp += printTitle;\n    }\n\n    this.addToArchive(workbookTemp + '</workbook>', 'xl/workbook.xml');\n  }\n\n  saveWorksheets() {\n    let length = this.worksheets.length;\n\n    for (let i = 0; i < length; i++) {\n      this.saveWorksheet(this.worksheets[i], i);\n    }\n  }\n\n  saveWorksheet(sheet, index) {\n    let sheetBlob = new BlobHelper();\n    /* tslint:disable-next-line:max-line-length */\n\n    let sheetString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><worksheet xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n\n    if (!sheet.isSummaryRowBelow) {\n      sheetString += '<sheetPr>' + '<outlinePr ' + 'summaryBelow=\"0\" >' + '</outlinePr>' + '</sheetPr>';\n    } else {\n      sheetString += '<sheetPr />';\n    }\n\n    sheetString += this.saveSheetView(sheet);\n\n    if (sheet.columns !== undefined) {\n      let colString = '<cols>';\n\n      for (let column of sheet.columns) {\n        /* tslint:disable-next-line:max-line-length */\n        if (column.width !== undefined) {\n          colString += '<col min=\"' + column.index + '\" max=\"' + column.index + '\" width=\"' + this.pixelsToColumnWidth(column.width) + '\" customWidth=\"1\" />';\n        } else {\n          colString += '<col min=\"' + column.index + '\" max=\"' + column.index + '\" width=\"' + '8.43' + '\" customWidth=\"1\" />';\n        }\n      }\n\n      sheetString += colString + '</cols>';\n    }\n\n    sheetString += '<sheetData>';\n    sheetBlob.append(sheetString);\n    sheetString = '';\n\n    if (sheet.rows !== undefined) {\n      for (let row of sheet.rows) {\n        let rowString = '<row r=\"' + row.index + '\" ';\n\n        if (!isNullOrUndefined(row.spans)) {\n          rowString += 'spans=\"' + row.spans + '\" ';\n        }\n\n        if (row.height !== undefined) {\n          rowString += 'ht=\"' + this.pixelsToRowHeight(row.height) + '\" customHeight=\"1\" ';\n        }\n\n        if (row.grouping !== undefined) {\n          if (row.grouping.isHidden) {\n            rowString += 'hidden=\"1\" ';\n          }\n\n          if (row.grouping.outlineLevel !== undefined) {\n            rowString += 'outlineLevel=\"' + row.grouping.outlineLevel + '\" ';\n          }\n\n          if (row.grouping.isCollapsed) {\n            rowString += 'collapsed=\"1\" ';\n          }\n        }\n\n        rowString += '>';\n\n        for (let cell of row.cells) {\n          if (cell !== undefined && (cell.value !== undefined || cell.cellStyle !== undefined)) {\n            rowString += '<c r=\"' + cell.refName + '\" ';\n\n            if (cell.saveType !== undefined) {\n              rowString += 't=\"' + cell.saveType + '\" ';\n            }\n\n            if (cell.styleIndex !== undefined) {\n              rowString += 's=\"' + cell.styleIndex + '\" ';\n            }\n\n            rowString += ' >';\n\n            if (cell.formula !== undefined) {\n              rowString += '<f>' + cell.formula + '</f>';\n            }\n\n            if (cell.value !== undefined) {\n              rowString += '<v>' + cell.value + '</v></c>';\n            } else {\n              rowString += '</c>';\n            }\n          }\n        }\n\n        rowString += '</row>';\n        sheetBlob.append(rowString);\n      }\n    }\n\n    sheetString += '</sheetData>';\n    /* tslint:disable-next-line:max-line-length */\n\n    if (sheet.autoFilters !== null && sheet.autoFilters !== undefined) sheetString += '<autoFilter ref=\"' + this.getCellName(sheet.autoFilters.row, sheet.autoFilters.column) + ':' + this.getCellName(sheet.autoFilters.lastRow, sheet.autoFilters.lastColumn) + '\"/>';\n\n    if (sheet.mergeCells.length > 0) {\n      sheetString += '<mergeCells count=\"' + sheet.mergeCells.length + '\">';\n\n      for (let mCell of sheet.mergeCells) {\n        sheetString += '<mergeCell ref=\"' + mCell.ref + '\" />';\n      }\n\n      sheetString += '</mergeCells>';\n    }\n\n    if (sheet.hyperLinks.length > 0) {\n      sheetString += '<hyperlinks>';\n\n      for (let hLink of sheet.hyperLinks) {\n        sheetString += '<hyperlink ref=\"' + hLink.ref + '\" r:id=\"rId' + hLink.rId + '\" />';\n      }\n\n      sheetString += '</hyperlinks>';\n    }\n    /* tslint:disable-next-line:max-line-length */\n\n\n    sheetString += '<pageMargins left=\"0.75\" right=\"0.75\" top=\"1\" bottom=\"1\" header=\"0.5\" footer=\"0.5\" /><headerFooter scaleWithDoc=\"1\" alignWithMargins=\"0\" differentFirst=\"0\" differentOddEven=\"0\" />';\n\n    if (sheet.images != undefined && sheet.images.length > 0) {\n      this.drawingCount++;\n      this.saveDrawings(sheet, sheet.index);\n      sheetString += '<drawing r:id=\"rId' + (sheet.hyperLinks.length + 1) + '\"/>';\n    }\n\n    this.addToArchive(this.saveSheetRelations(sheet), 'xl/worksheets/_rels/sheet' + sheet.index + '.xml.rels');\n    sheetBlob.append(sheetString + '</worksheet>');\n    this.addToArchive(sheetBlob.getBlob(), 'xl/worksheets' + '/sheet' + (index + 1) + '.xml');\n  }\n\n  saveDrawings(sheet, index) {\n    let drawings = new BlobHelper();\n    /* tslint:disable-next-line:max-line-length */\n\n    let sheetDrawingString = '<xdr:wsDr xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\" xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\">';\n\n    if (sheet.images !== undefined) {\n      let imgId = 0;\n\n      for (let pic of sheet.images) {\n        if (pic.height !== undefined && pic.width !== undefined) {\n          this.updatelastRowOffset(sheet, pic);\n          this.updatelastColumnOffSet(sheet, pic);\n          pic.lastRow -= 1;\n          pic.lastColumn -= 1;\n        } else if (pic.lastRow !== undefined && pic.lastColumn !== undefined) {\n          pic.lastRowOffset = 0;\n          pic.lastColOffset = 0;\n        }\n\n        imgId++;\n        sheetDrawingString += '<xdr:twoCellAnchor editAs=\"oneCell\">';\n        sheetDrawingString += '<xdr:from><xdr:col>'; //col\n\n        sheetDrawingString += pic.column - 1;\n        sheetDrawingString += '</xdr:col><xdr:colOff>'; //colOff\n\n        sheetDrawingString += 0;\n        sheetDrawingString += '</xdr:colOff><xdr:row>'; //row\n\n        sheetDrawingString += pic.row - 1;\n        sheetDrawingString += '</xdr:row><xdr:rowOff>'; //rowOff\n\n        sheetDrawingString += 0;\n        sheetDrawingString += '</xdr:rowOff></xdr:from>';\n        sheetDrawingString += '<xdr:to><xdr:col>'; //col\n\n        sheetDrawingString += pic.lastColumn;\n        sheetDrawingString += '</xdr:col><xdr:colOff>'; //colOff\n\n        sheetDrawingString += pic.lastColOffset;\n        sheetDrawingString += '</xdr:colOff><xdr:row>'; //row\n\n        sheetDrawingString += pic.lastRow;\n        sheetDrawingString += '</xdr:row><xdr:rowOff>'; //rowOff\n\n        sheetDrawingString += pic.lastRowOffset;\n        sheetDrawingString += '</xdr:rowOff></xdr:to>';\n        sheetDrawingString += '<xdr:pic>';\n        sheetDrawingString += '<xdr:nvPicPr>';\n        sheetDrawingString += '<xdr:cNvPr id=\"' + imgId + '\" name=\"Picture ' + imgId + '\"> </xdr:cNvPr>';\n        sheetDrawingString += '<xdr:cNvPicPr><a:picLocks noChangeAspect=\"1\"/></xdr:cNvPicPr> </xdr:nvPicPr>';\n        sheetDrawingString += '<xdr:blipFill>';\n        /* tslint:disable-next-line:max-line-length */\n\n        sheetDrawingString += '<a:blip xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" r:embed=\"rId' + imgId + '\" cstate=\"print\">';\n        sheetDrawingString += '</a:blip><a:stretch><a:fillRect /></a:stretch></xdr:blipFill>';\n        sheetDrawingString += '<xdr:spPr>';\n        sheetDrawingString += '<a:xfrm';\n\n        if (pic.rotation != undefined && pic.rotation <= 3600 && pic.rotation >= -3600) {\n          sheetDrawingString += ' rot=\"' + pic.rotation * 60000 + '\"';\n        }\n\n        if (pic.verticalFlip != undefined && pic.verticalFlip != false) {\n          sheetDrawingString += ' flipV=\"1\"';\n        }\n\n        if (pic.horizontalFlip != undefined && pic.horizontalFlip != false) {\n          sheetDrawingString += ' flipH=\"1\"';\n        }\n\n        sheetDrawingString += '/>';\n        sheetDrawingString += '<a:prstGeom prst=\"rect\"><a:avLst /></a:prstGeom></xdr:spPr>';\n        sheetDrawingString += '</xdr:pic><xdr:clientData /></xdr:twoCellAnchor>';\n        let imageData = this.convertBase64toImage(pic.image);\n        this.imageCount += 1;\n        this.addToArchive(imageData, 'xl/media/image' + this.imageCount + '.png');\n      }\n\n      drawings.append(sheetDrawingString);\n      drawings.append('</xdr:wsDr>');\n      this.saveDrawingRelations(sheet);\n      this.addToArchive(drawings.getBlob(), 'xl/drawings/drawing' + this.drawingCount + '.xml');\n    }\n  }\n\n  updatelastRowOffset(sheet, picture) {\n    let iCurHeight = picture.height;\n    let iCurRow = picture.row;\n    let iCurOffset = 0;\n\n    while (iCurHeight >= 0) {\n      let iRowHeight = 0;\n      if (sheet.rows !== undefined && sheet.rows[iCurRow - 1] !== undefined) iRowHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === undefined ? 15 : sheet.rows[iCurRow - 1].height);else iRowHeight = this.convertToPixels(15);\n      let iSpaceInCell = iRowHeight - iCurOffset * iRowHeight / 256;\n\n      if (iSpaceInCell > iCurHeight) {\n        picture.lastRow = iCurRow;\n        picture.lastRowOffset = iCurOffset + iCurHeight * 256 / iRowHeight;\n        let rowHiddenHeight = 0;\n        if (sheet.rows !== undefined && sheet.rows[iCurRow - 1] !== undefined) rowHiddenHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === undefined ? 15 : sheet.rows[iCurRow - 1].height);else rowHiddenHeight = this.convertToPixels(15);\n        picture.lastRowOffset = rowHiddenHeight * picture.lastRowOffset / 256;\n        picture.lastRowOffset = Math.round(picture.lastRowOffset / this.unitsProportions[7]);\n        break;\n      } else {\n        iCurHeight -= iSpaceInCell;\n        iCurRow++;\n        iCurOffset = 0;\n      }\n    }\n  }\n\n  updatelastColumnOffSet(sheet, picture) {\n    let iCurWidth = picture.width;\n    let iCurCol = picture.column;\n    let iCurOffset = 0;\n\n    while (iCurWidth >= 0) {\n      let iColWidth = 0;\n      if (sheet.columns !== undefined && sheet.columns[iCurCol - 1] !== undefined) iColWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === undefined ? 8.43 : sheet.columns[iCurCol - 1].width);else iColWidth = this.ColumnWidthToPixels(8.43);\n      let iSpaceInCell = iColWidth - iCurOffset * iColWidth / 1024;\n\n      if (iSpaceInCell > iCurWidth) {\n        picture.lastColumn = iCurCol;\n        picture.lastColOffset = iCurOffset + iCurWidth * 1024 / iColWidth;\n        let colHiddenWidth = 0;\n        if (sheet.columns !== undefined && sheet.columns[iCurCol - 1] !== undefined) colHiddenWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === undefined ? 8.43 : sheet.columns[iCurCol].width);else colHiddenWidth = this.ColumnWidthToPixels(8.43);\n        picture.lastColOffset = colHiddenWidth * picture.lastColOffset / 1024;\n        picture.lastColOffset = Math.round(picture.lastColOffset / this.unitsProportions[7]);\n        break;\n      } else {\n        iCurWidth -= iSpaceInCell;\n        iCurCol++;\n        iCurOffset = 0;\n      }\n    }\n  }\n\n  convertToPixels(value) {\n    return value * this.unitsProportions[6];\n  }\n\n  convertBase64toImage(img) {\n    const byteStr = window.atob(img);\n    const buffer = new ArrayBuffer(byteStr.length);\n    const data = new Uint8Array(buffer);\n\n    for (let i = 0; i < byteStr.length; i++) {\n      data[i] = byteStr.charCodeAt(i);\n    }\n\n    const blob = new Blob([data], {\n      type: 'image/png'\n    });\n    return blob;\n  }\n\n  saveDrawingRelations(sheet) {\n    /* tslint:disable-next-line:max-line-length */\n    let drawingRelation = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n    let length = sheet.images.length;\n    let id = this.imageCount - sheet.images.length;\n\n    for (let i = 1; i <= length; i++) {\n      id++;\n      /* tslint:disable-next-line:max-line-length */\n\n      drawingRelation += '<Relationship Id=\"rId' + i + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\" Target=\"../media/image' + id + '.png\" />';\n    }\n\n    this.addToArchive(drawingRelation + '</Relationships>', 'xl/drawings/_rels/drawing' + this.drawingCount + '.xml.rels');\n  }\n\n  pixelsToColumnWidth(pixels) {\n    let dDigitWidth = 7;\n    let val = pixels > dDigitWidth + 5 ? this.trunc((pixels - 5) / dDigitWidth * 100 + 0.5) / 100 : pixels / (dDigitWidth + 5);\n    return val > 1 ? (val * dDigitWidth + 5) / dDigitWidth * 256.0 / 256.0 : val * (dDigitWidth + 5) / dDigitWidth * 256.0 / 256.0;\n  }\n\n  ColumnWidthToPixels(val) {\n    let dDigitWidth = 7;\n    let fileWidth = val > 1 ? (val * dDigitWidth + 5) / dDigitWidth * 256.0 / 256.0 : val * (dDigitWidth + 5) / dDigitWidth * 256.0 / 256.0;\n    return this.trunc((256 * fileWidth + this.trunc(128 / dDigitWidth)) / 256 * dDigitWidth);\n  }\n\n  trunc(x) {\n    let n = x - x % 1;\n    return n === 0 && (x < 0 || x === 0 && 1 / x !== 1 / 0) ? -0 : n;\n  }\n\n  pixelsToRowHeight(pixels) {\n    return pixels * this.unitsProportions[5] / this.unitsProportions[6];\n  }\n\n  saveSheetRelations(sheet) {\n    /* tslint:disable-next-line:max-line-length */\n    let relStr = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n\n    for (let hLink of sheet.hyperLinks) {\n      /* tslint:disable-next-line:max-line-length */\n      relStr += '<Relationship Id=\"rId' + hLink.rId + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\" Target=\"' + this.processString(hLink.target) + '\" TargetMode=\"External\" />';\n    }\n\n    if (sheet.images != undefined && sheet.images.length > 0) {\n      /* tslint:disable-next-line:max-line-length */\n      relStr += '<Relationship Id=\"rId' + (sheet.hyperLinks.length + 1) + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing\" Target=\"../drawings/drawing' + this.drawingCount + '.xml\" />';\n    }\n\n    relStr += '</Relationships>';\n    return relStr;\n  }\n\n  saveSheetView(sheet) {\n    let paneString = '<sheetViews><sheetView workbookViewId=\"0\" ';\n\n    if (sheet.enableRtl === true) {\n      paneString += 'rightToLeft=\"1\"';\n    }\n\n    if (sheet.showGridLines === false) {\n      paneString += 'showGridLines=\"0\" >';\n    } else {\n      paneString += '>';\n    }\n\n    if (sheet.freezePanes !== undefined) {\n      paneString += '<pane state=\"frozen\"' + ' topLeftCell=\"' + sheet.freezePanes.leftCell + '\" ';\n\n      if (sheet.freezePanes.row !== 0) {\n        paneString += 'ySplit=\"' + sheet.freezePanes.row + '\" ';\n      }\n\n      if (sheet.freezePanes.column !== 0) {\n        paneString += 'xSplit=\"' + sheet.freezePanes.column + '\" ';\n      }\n\n      paneString += '/>';\n    }\n\n    paneString += '</sheetView></sheetViews > ';\n    return paneString;\n  }\n\n  saveSharedString() {\n    let length = this.sharedString.length;\n\n    if (length > 0) {\n      /* tslint:disable-next-line:max-line-length */\n      let sstStart = '<?xml version=\"1.0\" encoding=\"utf-8\"?><sst uniqueCount=\"' + length + '\" count=\"' + this.sharedStringCount + '\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n      let si = '';\n\n      for (let i = 0; i < length; i++) {\n        if (this.sharedString[i].indexOf('<r>') !== 0) {\n          si += '<si><t>';\n          si += this.processString(this.sharedString[i]);\n          si += '</t></si>';\n        } else {\n          si += '<si>';\n          si += this.sharedString[i];\n          si += '</si>';\n        }\n      }\n\n      si += '</sst>';\n      this.addToArchive(sstStart + si, 'xl/sharedStrings.xml');\n    }\n  }\n\n  processString(value) {\n    if (value.indexOf('&') !== -1) {\n      value = value.replace(/&/g, '&amp;');\n    }\n\n    if (value.indexOf('<') !== -1) {\n      value = value.replace(/</g, '&lt;');\n    }\n\n    if (value.indexOf('>') !== -1) {\n      value = value.replace(/>/g, '&gt;');\n    }\n\n    return value;\n  }\n\n  saveStyles() {\n    this.updateCellXfsStyleXfs();\n    /* tslint:disable-next-line:max-line-length */\n\n    let styleTemp = '<?xml version=\"1.0\" encoding=\"utf-8\"?><styleSheet xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n    styleTemp += this.saveNumberFormats();\n    styleTemp += this.saveFonts();\n    styleTemp += this.saveFills();\n    styleTemp += this.saveBorders();\n    styleTemp += this.saveCellStyleXfs();\n    styleTemp += this.saveCellXfs();\n    styleTemp += this.saveCellStyles();\n    this.addToArchive(styleTemp + '</styleSheet>', 'xl/styles.xml');\n  }\n\n  updateCellXfsStyleXfs() {\n    for (let style of this.mStyles) {\n      let cellXfs = undefined;\n\n      if (style.isGlobalStyle) {\n        cellXfs = new CellStyleXfs();\n        cellXfs.xfId = style.index - 1;\n      } else {\n        cellXfs = new CellXfs();\n        cellXfs.xfId = 0;\n      } //Add font\n\n\n      let compareFontResult = this.isNewFont(style);\n\n      if (!compareFontResult.result) {\n        let font = new Font();\n        font.b = style.bold;\n        font.i = style.italic;\n        font.name = style.fontName;\n        font.sz = style.fontSize;\n        font.u = style.underline;\n        font.strike = style.strikeThrough;\n        font.color = 'FF' + style.fontColor.replace('#', '');\n        this.mFonts.push(font);\n        cellXfs.fontId = this.mFonts.length - 1;\n      } else {\n        cellXfs.fontId = compareFontResult.index;\n      } //Add fill\n\n\n      if (style.backColor !== 'none') {\n        let backColor = 'FF' + style.backColor.replace('#', '');\n\n        if (this.mFills.has(backColor)) {\n          let fillId = this.mFills.get(backColor);\n          cellXfs.fillId = fillId;\n        } else {\n          let fillId = this.mFills.size + 2;\n          this.mFills.set(backColor, fillId);\n          cellXfs.fillId = fillId;\n        }\n      } else {\n        cellXfs.fillId = 0;\n      } //Add border            \n\n\n      if (!this.isNewBorder(style)) {\n        this.mBorders.push(style.borders);\n        cellXfs.borderId = this.mBorders.length;\n      } else {\n        cellXfs.borderId = 0;\n      } //Add Number Format            \n\n\n      if (style.numberFormat !== 'GENERAL') {\n        if (this.mNumFmt.has(style.numberFormat)) {\n          let numFmt = this.mNumFmt.get(style.numberFormat);\n          cellXfs.numFmtId = numFmt.numFmtId;\n        } else {\n          let id = this.mNumFmt.size + 164;\n          this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));\n          cellXfs.numFmtId = id;\n        }\n      } else {\n        if (style.numberFormat === 'GENERAL' && style.numFmtId === 14) {\n          cellXfs.numFmtId = 14;\n        } else {\n          cellXfs.numFmtId = 0;\n        }\n      } //Add alignment            \n\n\n      if (!style.isGlobalStyle) {\n        cellXfs.applyAlignment = 1;\n      }\n\n      cellXfs.alignment = new Alignment();\n      cellXfs.alignment.indent = style.indent;\n      cellXfs.alignment.horizontal = style.hAlign;\n      cellXfs.alignment.vertical = style.vAlign;\n      cellXfs.alignment.wrapText = style.wrapText ? 1 : 0;\n      cellXfs.alignment.rotation = style.rotation;\n\n      if (style.isGlobalStyle) {\n        this.mCellStyleXfs.push(cellXfs);\n        this.mCellXfs.push(cellXfs);\n      } else {\n        //Add cellxfs\n        this.mCellXfs.push(cellXfs);\n      }\n    }\n  }\n\n  saveNumberFormats() {\n    if (this.mNumFmt.size >= 1) {\n      let numFmtStyle = '<numFmts count=\"' + this.mNumFmt.size + '\">';\n      this.mNumFmt.forEach((value, key) => {\n        numFmtStyle += '<numFmt numFmtId=\"' + value.numFmtId + '\" formatCode=\"' + value.formatCode.replace(/\"/g, '&quot;') + '\" />';\n      });\n      return numFmtStyle += '</numFmts>';\n    } else {\n      return '';\n    }\n  }\n\n  saveFonts() {\n    /* tslint:disable-next-line:max-line-length */\n    let fontStyle = '<fonts count=\"' + this.mFonts.length + '\">';\n\n    if (this.mFonts.length >= 1) {\n      for (let font of this.mFonts) {\n        fontStyle += '<font>';\n\n        if (font.b) {\n          fontStyle += '<b />';\n        }\n\n        if (font.i) {\n          fontStyle += '<i />';\n        }\n\n        if (font.u) {\n          fontStyle += '<u />';\n        }\n\n        if (font.strike) {\n          fontStyle += '<strike />';\n        }\n\n        fontStyle += '<sz val=\"' + font.sz + '\" />';\n        fontStyle += '<color rgb=\"' + font.color + '\" />';\n        fontStyle += '<name val=\"' + font.name + '\" /></font>';\n      }\n    }\n\n    return fontStyle + '</fonts>';\n  }\n\n  saveFills() {\n    /* tslint:disable-next-line:max-line-length */\n    let fillsStyle = '<fills count=\"' + (this.mFills.size + 2) + '\"><fill><patternFill patternType=\"none\"></patternFill></fill><fill><patternFill patternType=\"gray125\"></patternFill></fill>';\n\n    if (this.mFills.size >= 1) {\n      this.mFills.forEach((value, key) => {\n        /* tslint:disable-next-line:max-line-length */\n        fillsStyle += '<fill><patternFill patternType=\"solid\"><fgColor rgb=\"' + key + '\" /><bgColor rgb=\"FFFFFFFF\" /></patternFill></fill>';\n      });\n    }\n\n    return fillsStyle + '</fills>';\n  }\n\n  saveBorders() {\n    /* tslint:disable-next-line:max-line-length */\n    let bordersStyle = '<borders count=\"' + (this.mBorders.length + 1) + '\"><border><left /><right /><top /><bottom /><diagonal /></border>';\n\n    if (this.mBorders.length >= 1) {\n      for (let borders of this.mBorders) {\n        if (this.isAllBorder(borders)) {\n          let color = borders.all.color.replace('#', '');\n          let lineStyle = borders.all.lineStyle;\n          /* tslint:disable-next-line:max-line-length */\n\n          bordersStyle += '<border><left style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></left><right style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></right><top style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></top><bottom style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></bottom></border>';\n        } else {\n          /* tslint:disable-next-line:max-line-length */\n          bordersStyle += '<border><left style=\"' + borders.left.lineStyle + '\"><color rgb=\"FF' + borders.left.color.replace('#', '') + '\" /></left><right style=\"' + borders.right.lineStyle + '\"><color rgb=\"FF' + borders.right.color.replace('#', '') + '\" /></right><top style=\"' + borders.top.lineStyle + '\"><color rgb=\"FF' + borders.top.color.replace('#', '') + '\" /></top><bottom style=\"' + borders.bottom.lineStyle + '\"><color rgb=\"FF' + borders.bottom.color.replace('#', '') + '\" /></bottom></border>';\n        }\n      }\n    }\n\n    return bordersStyle + '</borders>';\n  }\n\n  saveCellStyles() {\n    let cellStyleString = '<cellStyles  count=\"' + this.cellStyles.size + '\">';\n    this.cellStyles.forEach((value, key) => {\n      cellStyleString += '<cellStyle name=\"' + key + '\" xfId=\"' + this.cellStyles.get(key).xfId + '\"';\n\n      if (key === 'Normal') {\n        cellStyleString += ' builtinId=\"0\"';\n      }\n\n      cellStyleString += ' />';\n    });\n    return cellStyleString += '</cellStyles>';\n  }\n\n  saveCellStyleXfs() {\n    /* tslint:disable-next-line:max-line-length */\n    let cellXfsStyle = '<cellStyleXfs count=\"' + (this.mCellStyleXfs.length + 1) + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" />';\n\n    if (this.mCellStyleXfs.length >= 1) {\n      for (let cellStyleXf of this.mCellStyleXfs) {\n        /* tslint:disable-next-line:max-line-length */\n        cellXfsStyle += '<xf numFmtId=\"' + cellStyleXf.numFmtId + '\" fontId=\"' + cellStyleXf.fontId + '\" fillId=\"' + cellStyleXf.fillId + '\" borderId=\"' + cellStyleXf.borderId + '\" ';\n\n        if (cellStyleXf.alignment !== undefined) {\n          cellXfsStyle += '>' + this.saveAlignment(cellStyleXf) + '</xf>';\n        } else {\n          cellXfsStyle += ' />';\n        }\n      }\n    }\n\n    return cellXfsStyle + '</cellStyleXfs>';\n  }\n\n  saveCellXfs() {\n    /* tslint:disable-next-line:max-line-length */\n    let cellXfsStyle = '<cellXfs count=\"' + (this.mCellXfs.length + 1) + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" />';\n\n    if (this.mCellXfs.length >= 1) {\n      for (let cellXf of this.mCellXfs) {\n        /* tslint:disable-next-line:max-line-length */\n        cellXfsStyle += '<xf numFmtId=\"' + cellXf.numFmtId + '\" fontId=\"' + cellXf.fontId + '\" fillId=\"' + cellXf.fillId + '\" borderId=\"' + cellXf.borderId + '\" xfId=\"' + cellXf.xfId + '\" ';\n\n        if (cellXf.applyAlignment === 1) {\n          cellXfsStyle += 'applyAlignment=\"1\"';\n        }\n\n        cellXfsStyle += '>' + this.saveAlignment(cellXf) + '</xf>';\n      }\n    }\n\n    return cellXfsStyle + '</cellXfs>';\n  }\n\n  saveAlignment(cellXf) {\n    let alignString = '<alignment ';\n\n    if (cellXf.alignment.horizontal !== undefined) {\n      alignString += 'horizontal=\"' + cellXf.alignment.horizontal + '\" ';\n    }\n\n    if (cellXf.alignment.indent !== undefined && cellXf.alignment.indent !== 0) {\n      alignString += 'indent=\"' + cellXf.alignment.indent + '\" ';\n    } else if (cellXf.alignment.rotation !== undefined && cellXf.alignment.rotation !== 0) {\n      alignString += 'textRotation=\"' + cellXf.alignment.rotation + '\" ';\n    }\n\n    if (cellXf.alignment.vertical !== undefined) {\n      alignString += 'vertical=\"' + cellXf.alignment.vertical + '\" ';\n    }\n\n    alignString += 'wrapText=\"' + cellXf.alignment.wrapText + '\" />';\n    return alignString;\n  }\n\n  saveApp(builtInProperties) {\n    /* tslint:disable-next-line:max-line-length */\n    let appString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\"><Application>Essential XlsIO</Application>';\n\n    if (builtInProperties !== undefined) {\n      if (builtInProperties.manager !== undefined) {\n        appString += '<Manager>' + builtInProperties.manager + '</Manager>';\n      }\n\n      if (builtInProperties.company !== undefined) {\n        appString += '<Company>' + builtInProperties.company + '</Company>';\n      }\n    }\n\n    this.addToArchive(appString + '</Properties>', 'docProps/app.xml');\n  }\n\n  saveCore(builtInProperties) {\n    let createdDate = new Date();\n    /* tslint:disable-next-line:max-line-length */\n\n    let coreString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><cp:coreProperties xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\">';\n\n    if (this.builtInProperties !== undefined) {\n      if (builtInProperties.author !== undefined) {\n        coreString += '<dc:creator>' + builtInProperties.author + '</dc:creator>';\n      }\n\n      if (builtInProperties.subject !== undefined) {\n        coreString += '<dc:subject>' + builtInProperties.subject + '</dc:subject>';\n      }\n\n      if (builtInProperties.category !== undefined) {\n        coreString += '<cp:category>' + builtInProperties.category + '</cp:category>';\n      }\n\n      if (builtInProperties.comments !== undefined) {\n        coreString += '<dc:description>' + builtInProperties.comments + '</dc:description>';\n      }\n\n      if (builtInProperties.title !== undefined) {\n        coreString += '<dc:title>' + builtInProperties.title + '</dc:title>';\n      }\n\n      if (builtInProperties.tags !== undefined) {\n        coreString += '<cp:keywords>' + builtInProperties.tags + '</cp:keywords>';\n      }\n\n      if (builtInProperties.status !== undefined) {\n        coreString += '<cp:contentStatus>' + builtInProperties.status + '</cp:contentStatus>';\n      }\n\n      if (builtInProperties.createdDate !== undefined) {\n        /* tslint:disable-next-line:max-line-length */\n        coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + builtInProperties.createdDate.toISOString() + '</dcterms:created>';\n      } else {\n        coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:created>';\n      }\n\n      if (builtInProperties.modifiedDate !== undefined) {\n        /* tslint:disable-next-line:max-line-length */\n        coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + builtInProperties.modifiedDate.toISOString() + '</dcterms:modified>';\n      } else {\n        coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:modified>';\n      }\n    } else {\n      coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:created>';\n      coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:modified>';\n    }\n    /* tslint:disable-next-line:max-line-length */\n\n\n    coreString += '</cp:coreProperties>';\n    this.addToArchive(coreString, 'docProps/core.xml');\n  }\n\n  saveTopLevelRelation() {\n    /* tslint:disable-next-line:max-line-length */\n    let topRelation = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\" /><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\" /><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\" /></Relationships>';\n    this.addToArchive(topRelation, '_rels/.rels');\n  }\n\n  saveWorkbookRelation() {\n    /* tslint:disable-next-line:max-line-length */\n    let wbRelation = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n    let length = this.worksheets.length;\n    let count = 0;\n\n    for (let i = 0; i < length; i++, count++) {\n      /* tslint:disable-next-line:max-line-length */\n      wbRelation += '<Relationship Id=\"rId' + (i + 1).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet' + (i + 1).toString() + '.xml\" />';\n    }\n    /* tslint:disable-next-line:max-line-length */\n\n\n    wbRelation += '<Relationship Id=\"rId' + (++count).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\" />';\n\n    if (this.sharedStringCount > 0) {\n      /* tslint:disable-next-line:max-line-length */\n      wbRelation += '<Relationship Id=\"rId' + (++count).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n    }\n\n    this.addToArchive(wbRelation + '</Relationships>', 'xl/_rels/workbook.xml.rels');\n  }\n\n  saveContentType() {\n    /* tslint:disable-next-line:max-line-length */\n    let contentTypeString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\"><Default Extension=\"xml\" ContentType=\"application/xml\" /><Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" /><Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\" /><Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" /><Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\" /><Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\" />';\n    let sheetsOverride = '';\n    let length = this.worksheets.length;\n\n    for (let i = 0; i < length; i++) {\n      /* tslint:disable-next-line:max-line-length */\n      sheetsOverride += '<Override PartName=\"/xl/worksheets/sheet' + (i + 1).toString() + '.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" />';\n\n      if (this.worksheets[i].images != undefined && this.worksheets[i].images.length > 0) {\n        /* tslint:disable-next-line:max-line-length */\n        sheetsOverride += '<Override PartName=\"/xl/drawings/drawing' + (i + 1).toString() + '.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.drawing+xml\" />';\n      }\n    }\n\n    if (this.imageCount > 0) sheetsOverride += '<Default Extension=\"png\" ContentType=\"image/png\" />';\n\n    if (this.sharedStringCount > 0) {\n      /* tslint:disable-next-line:max-line-length */\n      contentTypeString += '<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\" />';\n    }\n\n    this.addToArchive(contentTypeString + sheetsOverride + '</Types>', '[Content_Types].xml');\n  }\n\n  addToArchive(xmlString, itemName) {\n    if (typeof xmlString === 'string') {\n      let blob = new Blob([xmlString], {\n        type: 'text/plain'\n      });\n      let archiveItem = new ZipArchiveItem(blob, itemName);\n      this.mArchive.addItem(archiveItem);\n    } else {\n      let archiveItem = new ZipArchiveItem(xmlString, itemName);\n      this.mArchive.addItem(archiveItem);\n    }\n  }\n\n  processMergeCells(cell, rowIndex, mergeCells) {\n    if (cell.rowSpan !== 0 || cell.colSpan !== 0) {\n      let mCell = new MergeCell();\n      mCell.x = cell.index;\n      mCell.width = cell.colSpan;\n      mCell.y = rowIndex;\n      mCell.height = cell.rowSpan;\n      let startCell = this.getCellName(mCell.y, mCell.x);\n      let endCell = this.getCellName(rowIndex + mCell.height, cell.index + mCell.width);\n      mCell.ref = startCell + ':' + endCell;\n      let mergedCell = mergeCells.add(mCell);\n      let start = {\n        x: mCell.x,\n        y: mCell.y\n      };\n      let end = {\n        x: cell.index + mCell.width,\n        y: rowIndex + mCell.height\n      };\n      this.updatedMergedCellStyles(start, end, cell);\n    }\n\n    return mergeCells;\n  }\n\n  updatedMergedCellStyles(sCell, eCell, cell) {\n    for (let x = sCell.x; x <= eCell.x; x++) {\n      for (let y = sCell.y; y <= eCell.y; y++) {\n        this.mergedCellsStyle.set(this.getCellName(y, x), {\n          x: x,\n          y: y,\n          styleIndex: cell.styleIndex\n        });\n      }\n    }\n  }\n  /**\n   * Returns the tick count corresponding to the given year, month, and day.\n   * @param year number value of year\n   * @param month number value of month\n   * @param day number value of day\n   */\n\n\n  dateToTicks(year, month, day) {\n    let ticksPerDay = 10000 * 1000 * 60 * 60 * 24;\n    let daysToMonth365 = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n    let daysToMonth366 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\n\n    if (year >= 1 && year <= 9999 && month >= 1 && month <= 12) {\n      let days = this.isLeapYear(year) ? daysToMonth366 : daysToMonth365;\n      let y = year - 1;\n      let n = y * 365 + (y / 4 | 0) - (y / 100 | 0) + (y / 400 | 0) + days[month - 1] + day - 1;\n      return n * ticksPerDay;\n    }\n\n    throw new Error('Not a valid date');\n  }\n  /**\n   * Return the tick count corresponding to the given hour, minute, second.\n   * @param hour number value of hour\n   * @param minute number value if minute\n   * @param second number value of second\n   */\n\n\n  timeToTicks(hour, minute, second) {\n    if (hour >= 0 && hour < 24 && minute >= 0 && minute < 60 && second >= 0 && second < 60) {\n      let totalSeconds = hour * 3600 + minute * 60 + second;\n      return totalSeconds * 10000 * 1000;\n    }\n\n    throw new Error('Not valid time');\n  }\n  /**\n   * Checks if given year is a leap year.\n   * @param year Year value.\n   */\n\n\n  isLeapYear(year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n  }\n  /**\n   * Converts `DateTime` to the equivalent OLE Automation date.\n   */\n\n\n  toOADate(date) {\n    let ticks = 0;\n    /* tslint:disable-next-line:max-line-length */\n\n    ticks = this.dateToTicks(date.getFullYear(), date.getMonth() + 1, date.getDate()) + this.timeToTicks(date.getHours(), date.getMinutes(), date.getSeconds());\n\n    if (ticks === 0) {\n      return 0.0;\n    }\n\n    let ticksPerDay = 10000 * 1000 * 60 * 60 * 24;\n    let daysTo1899 = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 4 + ((365 * 4 + 1) * 25 - 1) * 3 - 367;\n    let doubleDateOffset = daysTo1899 * ticksPerDay;\n    let oaDateMinAsTicks = ((365 * 4 + 1) * 25 - 1 - 365) * ticksPerDay;\n\n    if (ticks < oaDateMinAsTicks) {\n      throw new Error('Arg_OleAutDateInvalid');\n    }\n\n    let millisPerDay = 1000 * 60 * 60 * 24;\n    return (ticks - doubleDateOffset) / 10000 / millisPerDay;\n  }\n\n}\n/**\n * BuiltInProperties Class\n * @private\n */\n\n\nclass BuiltInProperties {}\n/**\n * index class\n */\n\n\nexport { CellStyle, Font, CellXfs, Alignment, CellStyleXfs, CellStyles, NumFmt, Border, Borders, Cell, Cells, Column, Row, Rows, Workbook, BuiltInProperties, Worksheet, HyperLink, Grouping, FreezePane, MergeCell, MergeCells, Worksheets, CsvHelper, ValueFormatter, BlobHelper };","map":{"version":3,"names":["ZipArchive","ZipArchiveItem","Internationalization","isNullOrUndefined","CellStyle","constructor","numFmtId","backColor","fontName","fontSize","fontColor","italic","bold","underline","strikeThrough","wrapText","hAlign","vAlign","indent","rotation","numberFormat","type","borders","Borders","isGlobalStyle","Font","sz","name","u","b","i","color","strike","CellXfs","Alignment","CellStyleXfs","CellStyles","xfId","NumFmt","id","code","formatCode","Border","mLine","mColor","lineStyle","left","right","top","bottom","all","Cell","Cells","Array","arguments","add","cell","inserted","count","c","index","push","Column","Row","Rows","row","Worksheets","Worksheet","isSummaryRowBelow","showGridLines","enableRtl","HyperLink","Grouping","FreezePane","MergeCell","MergeCells","mergeCell","mCell","isIntersecting","intersectingCell","x","Math","min","y","Y","width","max","Width","X","height","Height","ref","split","base","compare","Image","ValueFormatter","cultureName","intl","getFormatFunction","format","isServerRendered","getDateFormat","getNumberFormat","toView","value","result","displayText","CsvHelper","json","separator","csvStr","undefined","formatter","isMicrosoftBrowser","navigator","msSaveBlob","styles","globalStyles","Map","length","set","worksheets","parseWorksheet","rows","parseRows","parseRow","Error","cells","parseCell","csv","Date","style","parseCellValue","skeleton","error","has","get","val","start","replace","indexOf","save","fileName","buffer","Blob","dataUrl","window","URL","createObjectURL","dwlLink","document","createElementNS","download","href","event","createEvent","initEvent","dispatchEvent","setTimeout","revokeObjectURL","saveAsBlob","BlobHelper","parts","append","part","blob","getBlob","AutoFilters","Workbook","saveType","culture","currencyString","sharedStringCount","unitsProportions","hyperlinkStyle","currency","mSaveType","mArchive","sharedString","mFonts","mBorders","mStyles","printTitles","cellStyles","mNumFmt","mFills","mCellXfs","mCellStyleXfs","drawingCount","imageCount","cellStyle","parserCellStyle","cellStylesIn","tFormat","parserWorksheets","builtInProperties","BuiltInProperties","parserBuiltInProperties","csvHelper","jsonBuiltInProperties","author","comments","category","company","manager","subject","title","createdDate","modifiedDate","tags","status","jsonSheet","sheet","mergeCells","mergedCellsStyle","mHyperLinks","toString","columns","parserColumns","parserRows","freeze","parserFreezePanes","printTitle","parserPrintTitle","pageSetup","images","parserImages","autoFilters","parseFilters","hyperLinks","mergeOptions","fromJson","toJson","applyProperties","sourceJson","destJson","keys","Object","getCellName","column","getColumnName","col","strColumnName","iCurrentDigit","String","fromCharCode","printTitleName","titleRowName","fromRow","toRow","titleColName","fromColumn","toColumn","freezePanes","leftCell","columnsLength","rowsLength","rowId","r","parserRow","insertMergedCellsStyle","forEach","key","filter","item","styleIndex","insertIndex","splice","createCell","rowToInsert","cellToInsert","refName","rowIndex","grouping","parseGrouping","parseCells","outlineLevel","isCollapsed","isHidden","cellsLength","spanMin","spanMax","cellId","jsonCell","rowSpan","colSpan","hyperlink","hyperLink","target","getCellValueType","rId","formula","parseCellType","processMergeCells","spans","GetColors","colors","processColor","colorVal","toUpperCase","rgbColors","processCellValue","cellValue","processedVal","startindex","endIndex","processString","substring","subString","text","subSplit","element","trim","applyGlobalStyle","a","cellType","defStyleIndex","parserBorder","leftBorder","rightBorder","topBorder","bottomBorder","toLowerCase","processCellStyle","switchNumberFormat","numFmt","cellStyleXfs","cellXfs","returnFormat","getNumberPattern","useGrouping","getDatePattern","border","processNumFormatId","compareResult","compareStyle","size","isNewFont","toCompareStyle","font","isNewBorder","bStyle","isAllBorder","toCompareBorder","allBorderStyle","baseStyle","contains","array","toOADate","sstvalue","imagesLength","p","image","parserImage","lastRow","lastColumn","horizontalFlip","verticalFlip","blobSaveType","Promise","resolve","reject","obj","blobData","saveInternal","then","proxyUrl","xlsxMatch","match","csvMatch","destroy","saveWorkbook","saveWorksheets","saveSharedString","saveStyles","saveApp","saveCore","saveContentType","saveTopLevelRelation","saveWorkbookRelation","workbookTemp","sheets","sheetName","addToArchive","saveWorksheet","sheetBlob","sheetString","saveSheetView","colString","pixelsToColumnWidth","rowString","pixelsToRowHeight","hLink","saveDrawings","saveSheetRelations","drawings","sheetDrawingString","imgId","pic","updatelastRowOffset","updatelastColumnOffSet","lastRowOffset","lastColOffset","imageData","convertBase64toImage","saveDrawingRelations","picture","iCurHeight","iCurRow","iCurOffset","iRowHeight","convertToPixels","iSpaceInCell","rowHiddenHeight","round","iCurWidth","iCurCol","iColWidth","ColumnWidthToPixels","colHiddenWidth","img","byteStr","atob","ArrayBuffer","data","Uint8Array","charCodeAt","drawingRelation","pixels","dDigitWidth","trunc","fileWidth","n","relStr","paneString","sstStart","si","updateCellXfsStyleXfs","styleTemp","saveNumberFormats","saveFonts","saveFills","saveBorders","saveCellStyleXfs","saveCellXfs","saveCellStyles","compareFontResult","fontId","fillId","borderId","applyAlignment","alignment","horizontal","vertical","numFmtStyle","fontStyle","fillsStyle","bordersStyle","cellStyleString","cellXfsStyle","cellStyleXf","saveAlignment","cellXf","alignString","appString","coreString","toISOString","topRelation","wbRelation","contentTypeString","sheetsOverride","xmlString","itemName","archiveItem","addItem","startCell","endCell","mergedCell","end","updatedMergedCellStyles","sCell","eCell","dateToTicks","year","month","day","ticksPerDay","daysToMonth365","daysToMonth366","days","isLeapYear","timeToTicks","hour","minute","second","totalSeconds","date","ticks","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","daysTo1899","doubleDateOffset","oaDateMinAsTicks","millisPerDay"],"sources":["D:/StageCap2022/e-learningProject__frontend/frontend/node_modules/@syncfusion/ej2-excel-export/dist/es6/ej2-excel-export.es2015.js"],"sourcesContent":["import { ZipArchive, ZipArchiveItem } from '@syncfusion/ej2-compression';\nimport { Internationalization, isNullOrUndefined } from '@syncfusion/ej2-base';\n\n/**\n * CellStyle class\n * @private\n */\nclass CellStyle {\n    constructor() {\n        this.numFmtId = 0;\n        this.backColor = 'none';\n        this.fontName = 'Calibri';\n        this.fontSize = 10.5;\n        this.fontColor = '#000000';\n        this.italic = false;\n        this.bold = false;\n        this.underline = false;\n        this.strikeThrough = false;\n        this.wrapText = false;\n        this.hAlign = 'general';\n        this.vAlign = 'bottom';\n        this.indent = 0;\n        this.rotation = 0;\n        this.numberFormat = 'GENERAL';\n        this.type = 'datetime';\n        this.borders = new Borders();\n        this.isGlobalStyle = false;\n    }\n}\n/**\n * Font Class\n * @private\n */\nclass Font {\n    constructor() {\n        this.sz = 10.5;\n        this.name = 'Calibri';\n        this.u = false;\n        this.b = false;\n        this.i = false;\n        this.color = 'FF000000';\n        this.strike = false;\n    }\n}\n/**\n * CellXfs class\n * @private\n */\nclass CellXfs {\n}\n/**\n * Alignment class\n * @private\n */\nclass Alignment {\n}\n/**\n * CellStyleXfs class\n * @private\n */\nclass CellStyleXfs {\n}\n/**\n * CellStyles class\n * @private\n */\nclass CellStyles {\n    constructor() {\n        this.name = 'Normal';\n        this.xfId = 0;\n    }\n}\n/**\n * NumFmt class\n * @private\n */\nclass NumFmt {\n    constructor(id, code) {\n        this.numFmtId = id;\n        this.formatCode = code;\n    }\n}\n/**\n * Border class\n * @private\n */\nclass Border {\n    constructor(mLine, mColor) {\n        this.lineStyle = mLine;\n        this.color = mColor;\n    }\n}\n/**\n * Borders class\n * @private\n */\nclass Borders {\n    constructor() {\n        this.left = new Border('none', '#FFFFFF');\n        this.right = new Border('none', '#FFFFFF');\n        this.top = new Border('none', '#FFFFFF');\n        this.bottom = new Border('none', '#FFFFFF');\n        this.all = new Border('none', '#FFFFFF');\n    }\n}\n\n/**\n * Worksheet class\n * @private\n */\nclass Cell {\n}\n/**\n * Cells class\n * @private\n */\nclass Cells extends Array {\n    constructor() {\n        super(...arguments);\n        this.add = (cell) => {\n            let inserted = false;\n            let count = 0;\n            for (let c of this) {\n                if (c.index === cell.index) {\n                    this[count] = cell;\n                    inserted = true;\n                }\n                count++;\n            }\n            if (!inserted) {\n                this.push(cell);\n            }\n        };\n    }\n}\n\n/**\n * Column class\n * @private\n */\nclass Column {\n}\n\n/**\n * Row class\n * @private\n */\nclass Row {\n}\n/**\n * Rows class\n * @private\n */\nclass Rows extends Array {\n    constructor() {\n        super(...arguments);\n        this.add = (row) => {\n            this.push(row);\n        };\n    }\n}\n\n/**\n * Worksheets class\n * @private\n */\nclass Worksheets extends Array {\n}\n\n/**\n * Worksheet class\n * @private\n */\nclass Worksheet {\n    constructor() {\n        this.isSummaryRowBelow = true;\n        this.showGridLines = true;\n        this.enableRtl = false;\n    }\n}\n/**\n * Hyperlink class\n * @private\n */\nclass HyperLink {\n}\n/**\n * Grouping class\n * @private\n */\nclass Grouping {\n}\n/**\n * FreezePane class\n * @private\n */\nclass FreezePane {\n}\n/**\n * MergeCell\n * @private\n */\nclass MergeCell {\n}\n/**\n * MergeCells class\n * @private\n */\nclass MergeCells extends Array {\n    constructor() {\n        super(...arguments);\n        this.add = (mergeCell) => {\n            let inserted = false;\n            let count = 0;\n            for (let mCell of this) {\n                if (MergeCells.isIntersecting(mCell, mergeCell)) {\n                    let intersectingCell = new MergeCell();\n                    intersectingCell.x = Math.min(mCell.x, mergeCell.x);\n                    intersectingCell.y = Math.min(mCell.Y, mergeCell.y);\n                    intersectingCell.width = Math.max(mCell.Width + mCell.X, mergeCell.width + mergeCell.x);\n                    intersectingCell.height = Math.max(mCell.Height + mCell.Y, mergeCell.height + mergeCell.y);\n                    intersectingCell.ref = (this[count].ref.split(':')[0]) + ':' + (mergeCell.ref.split(':')[1]);\n                    this[count] = intersectingCell;\n                    mergeCell = intersectingCell;\n                    inserted = true;\n                }\n                count++;\n            }\n            if (!inserted) {\n                this.push(mergeCell);\n            }\n            return mergeCell;\n        };\n    }\n    static isIntersecting(base, compare) {\n        return (base.x <= compare.x + compare.width)\n            && (compare.x <= base.x + base.width)\n            && (base.y <= compare.y + compare.height)\n            && (compare.y <= base.y + base.height);\n    }\n}\n\n/**\n * Image class\n * @private\n */\nclass Image {\n}\n\n// import { IValueFormatter } from '../base/interface';\n/**\n * ValueFormatter class to globalize the value.\n * @private\n */\nclass ValueFormatter {\n    constructor(cultureName) {\n        this.intl = new Internationalization();\n        // if (!isNullOrUndefined(cultureName)) {\n        //     this.intl.culture = cultureName;\n        // }\n    }\n    getFormatFunction(format, isServerRendered) {\n        if (format.type) {\n            if (isServerRendered) {\n                format.isServerRendered = true;\n            }\n            return this.intl.getDateFormat(format);\n        }\n        else {\n            return this.intl.getNumberFormat(format);\n        }\n    }\n    // public getParserFunction(format: NumberFormatOptions | DateFormatOptions): Function {\n    //     if ((<DateFormatOptions>format).type) {\n    //         return this.intl.getDateParser(<DateFormatOptions>format);\n    //     } else {\n    //         return this.intl.getNumberParser(<DateFormatOptions>format);\n    //     }\n    // }\n    // public fromView(value: string, format: Function, type?: string): string | number | Date {\n    //     if (type === 'date' || type === 'datetime' || type === 'number') {\n    //         return format(value);\n    //     } else {\n    //         return value;\n    //     }\n    // }\n    toView(value, format) {\n        let result = value;\n        if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {\n            result = format(value);\n        }\n        return result;\n    }\n    // public setCulture(cultureName: string): void {\n    //     if (!isNullOrUndefined(cultureName)) {\n    //         setCulture(cultureName);\n    //     }\n    // }\n    /* tslint:disable:no-any */\n    displayText(value, format, isServerRendered) {\n        return this.toView(value, this.getFormatFunction(format, isServerRendered));\n    }\n}\n\n/**\n * CsvHelper class\n * @private\n */\nclass CsvHelper {\n    /* tslint:disable:no-any */\n    constructor(json, separator) {\n        this.csvStr = '';\n        if (separator === null || separator === undefined) {\n            this.separator = ',';\n        }\n        else {\n            this.separator = separator;\n        }\n        this.formatter = new ValueFormatter();\n        this.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n        if (json.isServerRendered !== null && json.isServerRendered !== undefined) {\n            this.isServerRendered = json.isServerRendered;\n        }\n        if (json.styles !== null && json.styles !== undefined) {\n            this.globalStyles = new Map();\n            for (let i = 0; i < json.styles.length; i++) {\n                if (json.styles[i].name !== undefined && json.styles[i].numberFormat !== undefined) {\n                    this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);\n                }\n            }\n        }\n        // Parses Worksheets data to DOM.        \n        if (json.worksheets !== null && json.worksheets !== undefined) {\n            this.parseWorksheet(json.worksheets[0]);\n        }\n        //this.csvStr = 'a1,a2,a3\\nb1,b2,b3';\n    }\n    parseWorksheet(json) {\n        //Rows\n        if (json.rows !== null && json.rows !== undefined) {\n            this.parseRows(json.rows);\n        }\n    }\n    /* tslint:disable:no-any */\n    parseRows(rows) {\n        let count = 1;\n        for (let row of rows) {\n            //Row index\n            if (row.index !== null && row.index !== undefined) {\n                while (count < row.index) {\n                    this.csvStr += '\\n';\n                    count++;\n                }\n                this.parseRow(row);\n            }\n            else {\n                throw Error('Row index is missing.');\n            }\n        }\n    }\n    /* tslint:disable:no-any */\n    parseRow(row) {\n        if (row.cells !== null && row.cells !== undefined) {\n            let count = 1;\n            for (let cell of row.cells) {\n                //cell index\n                if (cell.index !== null && cell.index !== undefined) {\n                    while (count < cell.index) {\n                        this.csvStr += this.separator;\n                        count++;\n                    }\n                    this.parseCell(cell);\n                }\n                else {\n                    throw Error('Cell index is missing.');\n                }\n            }\n        }\n    }\n    /* tslint:disable:no-any */\n    parseCell(cell) {\n        let csv = this.csvStr;\n        if (cell.value !== undefined) {\n            if (cell.value instanceof Date) {\n                if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n                    /* tslint:disable-next-line:max-line-length */\n                    try {\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', skeleton: cell.style.numberFormat }, this.isServerRendered));\n                    }\n                    catch (error) {\n                        /* tslint:disable-next-line:max-line-length */\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', format: cell.style.numberFormat }, this.isServerRendered));\n                    }\n                }\n                else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n                    /* tslint:disable-next-line:max-line-length */\n                    try {\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', skeleton: this.globalStyles.get(cell.style.name) }, this.isServerRendered));\n                    }\n                    catch (error) {\n                        /* tslint:disable-next-line:max-line-length */\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', format: this.globalStyles.get(cell.style.name) }, this.isServerRendered));\n                    }\n                }\n                else {\n                    csv += cell.value;\n                }\n            }\n            else if (typeof (cell.value) === 'boolean') {\n                csv += cell.value ? 'TRUE' : 'FALSE';\n            }\n            else if (typeof (cell.value) === 'number') {\n                if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n                    /* tslint:disable-next-line:max-line-length */\n                    csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: cell.style.numberFormat }, this.isServerRendered));\n                }\n                else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n                    /* tslint:disable-next-line:max-line-length */\n                    csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: this.globalStyles.get(cell.style.name) }, this.isServerRendered));\n                }\n                else {\n                    csv += cell.value;\n                }\n            }\n            else {\n                csv += this.parseCellValue(cell.value);\n            }\n        }\n        this.csvStr = csv;\n    }\n    parseCellValue(value) {\n        let val = '';\n        let length = value.length;\n        for (let start = 0; start < length; start++) {\n            if (value[start] === '\\\"') {\n                val += value[start].replace('\\\"', '\\\"\\\"');\n            }\n            else {\n                val += value[start];\n            }\n        }\n        value = val;\n        if (value.indexOf(this.separator) !== -1 || value.indexOf('\\n') !== -1) {\n            return value = '\\\"' + value + '\\\"';\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName- file name to save.\n     * @param  {Blob} buffer- the content to write in file\n     */\n    save(fileName) {\n        this.buffer = new Blob(['\\ufeff' + this.csvStr], { type: 'text/csv;charset=UTF-8' });\n        if (this.isMicrosoftBrowser) {\n            navigator.msSaveBlob(this.buffer, fileName);\n        }\n        else {\n            let dataUrl = window.URL.createObjectURL(this.buffer);\n            let dwlLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n            dwlLink.download = fileName;\n            dwlLink.href = dataUrl;\n            let event = document.createEvent('MouseEvent');\n            event.initEvent('click', true, true);\n            dwlLink.dispatchEvent(event);\n            setTimeout(() => {\n                window.URL.revokeObjectURL(dataUrl);\n            });\n        }\n    }\n    saveAsBlob() {\n        return new Blob(['\\ufeff' + this.csvStr], { type: 'text/csv;charset=UTF-8' });\n    }\n}\n\n/**\n * BlobHelper class\n * @private\n */\nclass BlobHelper {\n    constructor() {\n        /* tslint:disable:no-any */\n        this.parts = [];\n    }\n    /* tslint:disable:no-any */\n    append(part) {\n        this.parts.push(part);\n        this.blob = undefined; // Invalidate the blob\n    }\n    getBlob() {\n        return new Blob(this.parts, { type: 'text/plain' });\n    }\n}\n\n/**\n * AutoFilters class\n * @private\n */\nclass AutoFilters {\n}\n\n/**\n * Workbook class\n */\nclass Workbook {\n    /* tslint:disable:no-any */\n    constructor(json, saveType, culture, currencyString, separator) {\n        this.sharedStringCount = 0;\n        this.unitsProportions = [\n            96 / 75.0,\n            96 / 300.0,\n            96,\n            96 / 25.4,\n            96 / 2.54,\n            1,\n            96 / 72.0,\n            96 / 72.0 / 12700,\n        ];\n        /* tslint:disable:no-any */\n        this.hyperlinkStyle = { fontColor: '#0000FF', underline: true };\n        if (culture !== undefined) {\n            this.culture = culture;\n        }\n        else {\n            this.culture = 'en-US';\n        }\n        if (currencyString !== undefined) {\n            this.currency = currencyString;\n        }\n        else {\n            this.currency = 'USD';\n        }\n        this.intl = new Internationalization(this.culture);\n        this.mSaveType = saveType;\n        if (saveType === 'xlsx') {\n            this.mArchive = new ZipArchive();\n            this.sharedString = [];\n            this.mFonts = [];\n            this.mBorders = [];\n            this.mStyles = [];\n            this.printTitles = new Map();\n            this.cellStyles = new Map();\n            this.mNumFmt = new Map();\n            this.mFills = new Map();\n            this.mStyles.push(new CellStyle());\n            this.mFonts.push(new Font());\n            /* tslint:disable */\n            this.cellStyles.set('Normal', new CellStyles());\n            /* tslint:enable */\n            this.mCellXfs = [];\n            this.mCellStyleXfs = [];\n            this.drawingCount = 0;\n            this.imageCount = 0;\n            if (json.styles !== null && json.styles !== undefined) {\n                /* tslint:disable-next-line:no-any */\n                this.globalStyles = new Map();\n                for (let i = 0; i < json.styles.length; i++) {\n                    if (json.styles[i].name !== undefined) {\n                        if (!this.cellStyles.has(json.styles[i].name)) {\n                            let cellStyle = new CellStyle();\n                            cellStyle.isGlobalStyle = true;\n                            this.parserCellStyle(json.styles[i], cellStyle, 'none');\n                            let cellStylesIn = new CellStyles();\n                            cellStylesIn.name = cellStyle.name;\n                            cellStylesIn.xfId = (cellStyle.index - 1);\n                            this.cellStyles.set(cellStylesIn.name, cellStylesIn);\n                            /* tslint:disable-next-line:no-any */\n                            let tFormat = {};\n                            if (json.styles[i].numberFormat !== undefined) {\n                                tFormat.format = json.styles[i].numberFormat;\n                            }\n                            if (json.styles[i].type !== undefined) {\n                                tFormat.type = json.styles[i].type;\n                            }\n                            else {\n                                tFormat.type = 'datetime';\n                            }\n                            if (tFormat.format !== undefined) {\n                                this.globalStyles.set(json.styles[i].name, tFormat);\n                            }\n                        }\n                        else {\n                            throw Error('Style name ' + json.styles[i].name + ' is already existed');\n                        }\n                    }\n                }\n            }\n            // Parses Worksheets data to DOM.        \n            if (json.worksheets !== null && json.worksheets !== undefined) {\n                this.parserWorksheets(json.worksheets);\n            }\n            else {\n                throw Error('Worksheet is expected.');\n            }\n            // Parses the BuiltInProperties data to DOM.        \n            if (json.builtInProperties !== null && json.builtInProperties !== undefined) {\n                this.builtInProperties = new BuiltInProperties();\n                this.parserBuiltInProperties(json.builtInProperties, this.builtInProperties);\n            }\n        }\n        else {\n            this.csvHelper = new CsvHelper(json, separator);\n        }\n    }\n    /* tslint:disable:no-any */\n    parserBuiltInProperties(jsonBuiltInProperties, builtInProperties) {\n        //Author\n        if (jsonBuiltInProperties.author !== null && jsonBuiltInProperties.author !== undefined) {\n            builtInProperties.author = jsonBuiltInProperties.author;\n        }\n        //Comments\n        if (jsonBuiltInProperties.comments !== null && jsonBuiltInProperties.comments !== undefined) {\n            builtInProperties.comments = jsonBuiltInProperties.comments;\n        }\n        //Category\n        if (jsonBuiltInProperties.category !== null && jsonBuiltInProperties.category !== undefined) {\n            builtInProperties.category = jsonBuiltInProperties.category;\n        }\n        //Company\n        if (jsonBuiltInProperties.company !== null && jsonBuiltInProperties.company !== undefined) {\n            builtInProperties.company = jsonBuiltInProperties.company;\n        }\n        //Manager\n        if (jsonBuiltInProperties.manager !== null && jsonBuiltInProperties.manager !== undefined) {\n            builtInProperties.manager = jsonBuiltInProperties.manager;\n        }\n        //Subject\n        if (jsonBuiltInProperties.subject !== null && jsonBuiltInProperties.subject !== undefined) {\n            builtInProperties.subject = jsonBuiltInProperties.subject;\n        }\n        //Title\n        if (jsonBuiltInProperties.title !== null && jsonBuiltInProperties.title !== undefined) {\n            builtInProperties.title = jsonBuiltInProperties.title;\n        }\n        //Creation date\n        if (jsonBuiltInProperties.createdDate !== null && jsonBuiltInProperties.createdDate !== undefined) {\n            builtInProperties.createdDate = jsonBuiltInProperties.createdDate;\n        }\n        //Modified date\n        if (jsonBuiltInProperties.modifiedDate !== null && jsonBuiltInProperties.modifiedDate !== undefined) {\n            builtInProperties.modifiedDate = jsonBuiltInProperties.modifiedDate;\n        }\n        //Tags\n        if (jsonBuiltInProperties.tags !== null && jsonBuiltInProperties.tags !== undefined) {\n            builtInProperties.tags = jsonBuiltInProperties.tags;\n        }\n        //Status\n        if (jsonBuiltInProperties.status !== null && jsonBuiltInProperties.status !== undefined) {\n            builtInProperties.status = jsonBuiltInProperties.status;\n        }\n    }\n    /* tslint:disable:no-any */\n    parserWorksheets(json) {\n        this.worksheets = new Worksheets();\n        let length = json.length;\n        for (let i = 0; i < length; i++) {\n            let jsonSheet = json[i];\n            let sheet = new Worksheet();\n            this.mergeCells = new MergeCells();\n            this.mergedCellsStyle = new Map();\n            this.mHyperLinks = [];\n            //Name\n            if (jsonSheet.name !== null && jsonSheet.name !== undefined) {\n                sheet.name = jsonSheet.name;\n            }\n            else {\n                sheet.name = 'Sheet' + (i + 1).toString();\n            }\n            if (jsonSheet.enableRtl !== null && jsonSheet.enableRtl !== undefined) {\n                sheet.enableRtl = jsonSheet.enableRtl;\n            }\n            sheet.index = (i + 1);\n            //Columns\n            if (jsonSheet.columns !== null && jsonSheet.columns !== undefined) {\n                this.parserColumns(jsonSheet.columns, sheet);\n            }\n            //Rows\n            if (jsonSheet.rows !== null && jsonSheet.rows !== undefined) {\n                this.parserRows(jsonSheet.rows, sheet);\n            }\n            //showGridLines\n            if (jsonSheet.showGridLines !== null && jsonSheet.showGridLines !== undefined) {\n                sheet.showGridLines = jsonSheet.showGridLines;\n            }\n            //FreezePanes\n            if (jsonSheet.freeze !== null && jsonSheet.freeze !== undefined) {\n                this.parserFreezePanes(jsonSheet.freeze, sheet);\n            }\n            //Print Title\n            if (jsonSheet.printTitle !== null && jsonSheet.printTitle !== undefined) {\n                this.parserPrintTitle(jsonSheet.printTitle, sheet);\n            }\n            if (jsonSheet.pageSetup !== undefined) {\n                if (jsonSheet.pageSetup.isSummaryRowBelow !== undefined) {\n                    sheet.isSummaryRowBelow = jsonSheet.pageSetup.isSummaryRowBelow;\n                }\n            }\n            if (jsonSheet.images !== undefined) {\n                this.parserImages(jsonSheet.images, sheet);\n            }\n            if (jsonSheet.autoFilters !== null && jsonSheet.autoFilters !== undefined) {\n                this.parseFilters(jsonSheet.autoFilters, sheet);\n            }\n            sheet.index = (i + 1);\n            sheet.mergeCells = this.mergeCells;\n            sheet.hyperLinks = this.mHyperLinks;\n            this.worksheets.push(sheet);\n        }\n    }\n    /* tslint:disable:no-any */\n    mergeOptions(fromJson, toJson) {\n        /* tslint:disable:no-any */\n        let result = {};\n        this.applyProperties(fromJson, result);\n        this.applyProperties(toJson, result);\n        return result;\n    }\n    /* tslint:disable:no-any */\n    applyProperties(sourceJson, destJson) {\n        let keys = Object.keys(sourceJson);\n        for (let index = 0; index < keys.length; index++) {\n            if (keys[index] !== 'name') {\n                destJson[keys[index]] = sourceJson[keys[index]];\n            }\n        }\n    }\n    getCellName(row, column) {\n        return this.getColumnName(column) + row.toString();\n    }\n    getColumnName(col) {\n        col--;\n        let strColumnName = '';\n        do {\n            let iCurrentDigit = col % 26;\n            col = col / 26 - 1;\n            strColumnName = String.fromCharCode(65 + iCurrentDigit) + strColumnName;\n        } while (col >= 0);\n        return strColumnName;\n    }\n    /* tslint:disable:no-any */\n    parserPrintTitle(json, sheet) {\n        let printTitleName = '';\n        let titleRowName;\n        if (json.fromRow !== null && json.fromRow !== undefined) {\n            let fromRow = json.fromRow;\n            let toRow;\n            if (json.toRow !== null && json.toRow !== undefined) {\n                toRow = json.toRow;\n            }\n            else {\n                toRow = json.fromRow;\n            }\n            titleRowName = '$' + fromRow + ':$' + toRow;\n        }\n        let titleColName;\n        if (json.fromColumn !== null && json.fromColumn !== undefined) {\n            let fromColumn = json.fromColumn;\n            let toColumn;\n            if (json.toColumn !== null && json.toColumn !== undefined) {\n                toColumn = json.toColumn;\n            }\n            else {\n                toColumn = json.fromColumn;\n            }\n            titleColName = '$' + this.getColumnName(fromColumn) + ':$' + this.getColumnName(toColumn);\n        }\n        if (titleRowName !== undefined) {\n            printTitleName += (sheet.name + '!' + titleRowName);\n        }\n        if (titleColName !== undefined && titleRowName !== undefined) {\n            printTitleName += ',' + (sheet.name + '!' + titleColName);\n        }\n        else if (titleColName !== undefined) {\n            printTitleName += (sheet.name + '!' + titleColName);\n        }\n        if (printTitleName !== '') {\n            this.printTitles.set(sheet.index - 1, printTitleName);\n        }\n    }\n    /* tslint:disable:no-any */\n    parserFreezePanes(json, sheet) {\n        sheet.freezePanes = new FreezePane();\n        if (json.row !== null && json.row !== undefined) {\n            sheet.freezePanes.row = json.row;\n        }\n        else {\n            sheet.freezePanes.row = 0;\n        }\n        if (json.column !== null && json.column !== undefined) {\n            sheet.freezePanes.column = json.column;\n        }\n        else {\n            sheet.freezePanes.column = 0;\n        }\n        sheet.freezePanes.leftCell = this.getCellName(sheet.freezePanes.row + 1, sheet.freezePanes.column + 1);\n    }\n    /* tslint:disable:no-any */\n    parserColumns(json, sheet) {\n        let columnsLength = json.length;\n        sheet.columns = [];\n        for (let column = 0; column < columnsLength; column++) {\n            let col = new Column();\n            if (json[column].index !== null && json[column].index !== undefined) {\n                col.index = json[column].index;\n            }\n            else {\n                throw Error('Column index is missing.');\n            }\n            if (json[column].width !== null && json[column].width !== undefined) {\n                col.width = json[column].width;\n            }\n            sheet.columns.push(col);\n        }\n    }\n    /* tslint:disable:no-any */\n    parserRows(json, sheet) {\n        let rowsLength = json.length;\n        sheet.rows = new Rows();\n        let rowId = 0;\n        for (let r = 0; r < rowsLength; r++) {\n            let row = this.parserRow(json[r], rowId);\n            rowId = row.index;\n            sheet.rows.add(row);\n        }\n        this.insertMergedCellsStyle(sheet);\n    }\n    insertMergedCellsStyle(sheet) {\n        if (this.mergeCells.length > 0) {\n            this.mergedCellsStyle.forEach((value, key) => {\n                let row = sheet.rows.filter((item) => {\n                    return item.index === value.y;\n                })[0];\n                if (!isNullOrUndefined(row)) {\n                    let cell = row.cells.filter((item) => {\n                        return item.index === value.x;\n                    })[0];\n                    if (!isNullOrUndefined(cell)) {\n                        cell.styleIndex = value.styleIndex;\n                    }\n                    else {\n                        let cells = row.cells.filter((item) => {\n                            return item.index <= value.x;\n                        });\n                        let insertIndex = 0;\n                        if (cells.length > 0) {\n                            insertIndex = row.cells.indexOf(cells[cells.length - 1]) + 1;\n                        }\n                        row.cells.splice(insertIndex, 0, this.createCell(value, key));\n                    }\n                }\n                else {\n                    let rows = sheet.rows.filter((item) => {\n                        return item.index <= value.y;\n                    });\n                    let rowToInsert = new Row();\n                    rowToInsert.index = value.y;\n                    rowToInsert.cells = new Cells();\n                    rowToInsert.cells.add(this.createCell(value, key));\n                    let insertIndex = 0;\n                    if (rows.length > 0) {\n                        insertIndex = sheet.rows.indexOf(rows[rows.length - 1]) + 1;\n                    }\n                    sheet.rows.splice(insertIndex, 0, rowToInsert);\n                }\n            });\n        }\n    }\n    createCell(value, key) {\n        let cellToInsert = new Cell();\n        cellToInsert.refName = key;\n        cellToInsert.index = value.x;\n        cellToInsert.cellStyle = new CellStyle();\n        cellToInsert.styleIndex = value.styleIndex;\n        return cellToInsert;\n    }\n    /* tslint:disable:no-any */\n    parserRow(json, rowIndex) {\n        let row = new Row();\n        //Row Height\n        if (json.height !== null && json.height !== undefined) {\n            row.height = json.height;\n        }\n        //Row index\n        if (json.index !== null && json.index !== undefined) {\n            row.index = json.index;\n        }\n        else {\n            throw Error('Row index is missing.');\n        }\n        if (json.grouping !== null && json.grouping !== undefined) {\n            this.parseGrouping(json.grouping, row);\n        }\n        this.parseCells(json.cells, row);\n        return row;\n    }\n    /* tslint:disable:no-any */\n    parseGrouping(json, row) {\n        row.grouping = new Grouping();\n        if (json.outlineLevel !== undefined) {\n            row.grouping.outlineLevel = json.outlineLevel;\n        }\n        if (json.isCollapsed !== undefined) {\n            row.grouping.isCollapsed = json.isCollapsed;\n        }\n        if (json.isHidden !== undefined) {\n            row.grouping.isHidden = json.isHidden;\n        }\n    }\n    /* tslint:disable:no-any */\n    parseCells(json, row) {\n        row.cells = new Cells();\n        let cellsLength = json !== undefined ? json.length : 0;\n        let spanMin = 1;\n        let spanMax = 1;\n        for (let cellId = 0; cellId < cellsLength; cellId++) {\n            /* tslint:disable:no-any */\n            let jsonCell = json[cellId];\n            let cell = new Cell();\n            //cell index\n            if (jsonCell.index !== null && jsonCell.index !== undefined) {\n                cell.index = jsonCell.index;\n            }\n            else {\n                throw Error('Cell index is missing.');\n            }\n            if (cell.index < spanMin) {\n                spanMin = cell.index;\n            }\n            else if (cell.index > spanMax) {\n                spanMax = cell.index;\n            }\n            //Update the Cell name\n            cell.refName = this.getCellName(row.index, cell.index);\n            //Row span\n            if (jsonCell.rowSpan !== null && jsonCell.rowSpan !== undefined) {\n                cell.rowSpan = jsonCell.rowSpan - 1;\n            }\n            else {\n                cell.rowSpan = 0;\n            }\n            //Column span\n            if (jsonCell.colSpan !== null && jsonCell.colSpan !== undefined) {\n                cell.colSpan = jsonCell.colSpan - 1;\n            }\n            else {\n                cell.colSpan = 0;\n            }\n            //Hyperlink\n            if (jsonCell.hyperlink !== null && jsonCell.hyperlink !== undefined) {\n                let hyperLink = new HyperLink();\n                if (jsonCell.hyperlink.target !== undefined) {\n                    hyperLink.target = jsonCell.hyperlink.target;\n                    if (jsonCell.hyperlink.displayText !== undefined) {\n                        cell.value = jsonCell.hyperlink.displayText;\n                    }\n                    else {\n                        cell.value = jsonCell.hyperlink.target;\n                    }\n                    cell.type = this.getCellValueType(cell.value);\n                    hyperLink.ref = cell.refName;\n                    hyperLink.rId = (this.mHyperLinks.length + 1);\n                    this.mHyperLinks.push(hyperLink);\n                    cell.cellStyle = new CellStyle();\n                    /* tslint:disable-next-line:max-line-length */\n                    this.parserCellStyle((jsonCell.style !== undefined ? this.mergeOptions(jsonCell.style, this.hyperlinkStyle) : this.hyperlinkStyle), cell.cellStyle, 'string');\n                    cell.styleIndex = cell.cellStyle.index;\n                }\n            }\n            // formulas\n            if (jsonCell.formula !== null && jsonCell.formula !== undefined) {\n                cell.formula = jsonCell.formula;\n                cell.type = 'formula';\n            }\n            //Cell value\n            if (jsonCell.value !== null && jsonCell.value !== undefined) {\n                if (cell.formula !== undefined) {\n                    cell.value = 0;\n                }\n                else {\n                    cell.value = jsonCell.value;\n                    cell.type = this.getCellValueType(cell.value);\n                }\n            }\n            if (jsonCell.style !== null && jsonCell.style !== undefined && cell.styleIndex === undefined) {\n                cell.cellStyle = new CellStyle();\n                if (cell.value instanceof Date) {\n                    this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type, 14);\n                }\n                else {\n                    this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type);\n                }\n                cell.styleIndex = cell.cellStyle.index;\n            }\n            else if (cell.value instanceof Date) {\n                cell.cellStyle = new CellStyle();\n                this.parserCellStyle({}, cell.cellStyle, cell.type, 14);\n                cell.styleIndex = cell.cellStyle.index;\n            }\n            this.parseCellType(cell);\n            this.mergeCells = this.processMergeCells(cell, row.index, this.mergeCells);\n            row.cells.add(cell);\n            \n        }\n        row.spans = (spanMin) + ':' + (spanMax);\n    }\n    GetColors() {\n        let colors;\n        colors = new Map();\n        /* tslint:disable */\n        colors.set('WHITE', 'FFFFFFFF');\n        /* tslint:disable */\n        colors.set('SILVER', 'FFC0C0C0');\n        /* tslint:disable */\n        colors.set('GRAY', 'FF808080');\n        /* tslint:disable */\n        colors.set('BLACK', 'FF000000');\n        /* tslint:disable */\n        colors.set('RED', 'FFFF0000');\n        /* tslint:disable */\n        colors.set('MAROON', 'FF800000');\n        /* tslint:disable */\n        colors.set('YELLOW', 'FFFFFF00');\n        /* tslint:disable */\n        colors.set('OLIVE', 'FF808000');\n        /* tslint:disable */\n        colors.set('LIME', 'FF00FF00');\n        /* tslint:disable */\n        colors.set('GREEN', 'FF008000');\n        /* tslint:disable */\n        colors.set('AQUA', 'FF00FFFF');\n        /* tslint:disable */\n        colors.set('TEAL', 'FF008080');\n        /* tslint:disable */\n        colors.set('BLUE', 'FF0000FF');\n        /* tslint:disable */\n        colors.set('NAVY', 'FF000080');\n        /* tslint:disable */\n        colors.set('FUCHSIA', 'FFFF00FF');\n        /* tslint:disable */\n        colors.set('PURPLE', 'FF800080');\n        return colors;\n    }\n    processColor(colorVal) {\n        if (colorVal.indexOf('#') === 0) {\n            return colorVal.replace('#', 'FF');\n        }\n        colorVal = colorVal.toUpperCase();\n        this.rgbColors = this.GetColors();\n        if (this.rgbColors.has(colorVal)) {\n            colorVal = this.rgbColors.get(colorVal);\n        }\n        else {\n            colorVal = 'FF000000';\n        }\n        return colorVal;\n    }\n    processCellValue(value, cell) {\n        let cellValue = value;\n        if (value.indexOf(\"<font\") !== -1 || value.indexOf(\"<a\") !== -1 || value.indexOf(\"<b>\") !== -1 ||\n            value.indexOf(\"<i>\") !== -1 || value.indexOf(\"<u>\") !== -1) {\n            let processedVal = '';\n            let startindex = value.indexOf('<', 0);\n            let endIndex = value.indexOf('>', startindex + 1);\n            if (startindex >= 0 && endIndex >= 0) {\n                if (startindex !== 0) {\n                    processedVal += '<r><t xml:space=\"preserve\">' + this.processString(value.substring(0, startindex)) + '</t></r>';\n                }\n                while (startindex >= 0 && endIndex >= 0) {\n                    endIndex = value.indexOf('>', startindex + 1);\n                    if (endIndex >= 0) {\n                        let subString = value.substring(startindex + 1, endIndex);\n                        startindex = value.indexOf('<', endIndex + 1);\n                        if (startindex < 0) {\n                            startindex = cellValue.length;\n                        }\n                        let text = cellValue.substring(endIndex + 1, startindex);\n                        if (text.length !== 0) {\n                            let subSplit = subString.split(' ');\n                            if (subSplit.length > 0) {\n                                processedVal += '<r><rPr>';\n                            }\n                            if (subSplit.length > 1) {\n                                for (let element of subSplit) {\n                                    let start = element.trim().substring(0, 5);\n                                    switch (start) {\n                                        case 'size=':\n                                            processedVal += '<sz val=\"' + element.substring(6, element.length - 1) + '\"/>';\n                                            break;\n                                        case 'face=':\n                                            processedVal += '<rFont val=\"' + element.substring(6, element.length - 1) + '\"/>';\n                                            break;\n                                        case 'color':\n                                            processedVal += '<color rgb=\"' + this.processColor(element.substring(7, element.length - 1)) + '\"/>';\n                                            break;\n                                        case 'href=':\n                                            let hyperLink = new HyperLink();\n                                            hyperLink.target = element.substring(6, element.length - 1).trim();\n                                            hyperLink.ref = cell.refName;\n                                            hyperLink.rId = (this.mHyperLinks.length + 1);\n                                            this.mHyperLinks.push(hyperLink);\n                                            processedVal += '<color rgb=\"FF0000FF\"/><u/><b/>';\n                                            break;\n                                    }\n                                }\n                            }\n                            else if (subSplit.length === 1) {\n                                let style = subSplit[0].trim();\n                                switch (style) {\n                                    case 'b':\n                                        processedVal += '<b/>';\n                                        break;\n                                    case 'i':\n                                        processedVal += '<i/>';\n                                        break;\n                                    case 'u':\n                                        processedVal += '<u/>';\n                                        break;\n                                }\n                            }\n                            processedVal += '</rPr><t xml:space=\"preserve\">' + this.processString(text) + '</t></r>';\n                        }\n                    }\n                }\n                if (processedVal === '') {\n                    return cellValue;\n                }\n                return processedVal;\n            }\n            else {\n                return cellValue;\n            }\n        }\n        else {\n            return cellValue;\n        }\n    }\n    applyGlobalStyle(json, cellStyle) {\n        if (this.cellStyles.has(json.name)) {\n            cellStyle.index = this.mStyles.filter((a) => (a.name === json.name))[0].index;\n            cellStyle.name = json.name;\n        }\n    }\n    /* tslint:disable:no-any */\n    parserCellStyle(json, cellStyle, cellType, defStyleIndex) {\n        //name\n        if (json.name !== null && json.name !== undefined) {\n            if (cellStyle.isGlobalStyle) {\n                cellStyle.name = json.name;\n            }\n            else {\n                this.applyGlobalStyle(json, cellStyle);\n                return;\n            }\n        }\n        //background color\n        if (json.backColor !== null && json.backColor !== undefined) {\n            cellStyle.backColor = json.backColor;\n        }\n        //borders\n        //leftBorder\n        cellStyle.borders = new Borders();\n        //AllBorder\n        if (json.borders !== null && json.borders !== undefined) {\n            this.parserBorder(json.borders, cellStyle.borders.all);\n        }\n        //leftborder\n        if (json.leftBorder !== null && json.leftBorder !== undefined) {\n            this.parserBorder(json.leftBorder, cellStyle.borders.left);\n        }\n        //rightBorder\n        if (json.rightBorder !== null && json.rightBorder !== undefined) {\n            this.parserBorder(json.rightBorder, cellStyle.borders.right);\n        }\n        //topBorder\n        if (json.topBorder !== null && json.topBorder !== undefined) {\n            this.parserBorder(json.topBorder, cellStyle.borders.top);\n        }\n        //bottomBorder\n        if (json.bottomBorder !== null && json.bottomBorder !== undefined) {\n            this.parserBorder(json.bottomBorder, cellStyle.borders.bottom);\n        }\n        //fontName\n        if (json.fontName !== null && json.fontName !== undefined) {\n            cellStyle.fontName = json.fontName;\n        }\n        //fontSize\n        if (json.fontSize !== null && json.fontSize !== undefined) {\n            cellStyle.fontSize = json.fontSize;\n        }\n        //fontColor\n        if (json.fontColor !== null && json.fontColor !== undefined) {\n            cellStyle.fontColor = json.fontColor;\n        }\n        //italic\n        if (json.italic !== null && json.italic !== undefined) {\n            cellStyle.italic = json.italic;\n        }\n        //bold\n        if (json.bold !== null && json.bold !== undefined) {\n            cellStyle.bold = json.bold;\n        }\n        //hAlign\n        if (json.hAlign !== null && json.hAlign !== undefined) {\n            cellStyle.hAlign = json.hAlign.toLowerCase();\n        }\n        //indent\n        if (json.indent !== null && json.indent !== undefined) {\n            cellStyle.indent = json.indent;\n            if (!(cellStyle.hAlign === 'left' || cellStyle.hAlign === 'right')) {\n                cellStyle.hAlign = 'left';\n            }\n        }\n        if (json.rotation !== null && json.rotation !== undefined) {\n            cellStyle.rotation = json.rotation;\n        }\n        //vAlign\n        if (json.vAlign !== null && json.vAlign !== undefined) {\n            cellStyle.vAlign = json.vAlign.toLowerCase();\n        }\n        //underline\n        if (json.underline !== null && json.underline !== undefined) {\n            cellStyle.underline = json.underline;\n        }\n        //strikeThrough\n        if (json.strikeThrough !== null && json.strikeThrough !== undefined) {\n            cellStyle.strikeThrough = json.strikeThrough;\n        }\n        //wrapText\n        if (json.wrapText !== null && json.wrapText !== undefined) {\n            cellStyle.wrapText = json.wrapText;\n        }\n        //numberFormat\n        if (json.numberFormat !== null && json.numberFormat !== undefined) {\n            if (json.type !== null && json.type !== undefined) {\n                cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, json.type);\n            }\n            else {\n                cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, cellType);\n            }\n        }\n        else if (defStyleIndex !== undefined) {\n            cellStyle.numFmtId = 14;\n            cellStyle.numberFormat = 'GENERAL';\n        }\n        else {\n            cellStyle.numberFormat = 'GENERAL';\n        }\n        cellStyle.index = this.processCellStyle(cellStyle);\n    }\n    switchNumberFormat(numberFormat, type) {\n        let format = this.getNumberFormat(numberFormat, type);\n        if (format !== numberFormat) {\n            let numFmt = this.mNumFmt.get(numberFormat);\n            if (numFmt !== undefined) {\n                numFmt.formatCode = format;\n                if (this.mNumFmt.has(format)) {\n                    for (let cellStyleXfs of this.mCellStyleXfs) {\n                        if (cellStyleXfs.numFmtId === numFmt.numFmtId) {\n                            cellStyleXfs.numFmtId = this.mNumFmt.get(format).numFmtId;\n                        }\n                    }\n                    for (let cellXfs of this.mCellXfs) {\n                        if (cellXfs.numFmtId === numFmt.numFmtId) {\n                            cellXfs.numFmtId = this.mNumFmt.get(format).numFmtId;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    getNumberFormat(numberFormat, type) {\n        let returnFormat;\n        switch (type) {\n            case 'number':\n                try {\n                    returnFormat = this.intl.getNumberPattern({ format: numberFormat, currency: this.currency, useGrouping: true }, true);\n                }\n                catch (error) {\n                    returnFormat = numberFormat;\n                }\n                break;\n            case 'datetime':\n                try {\n                    returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: 'dateTime' }, true);\n                }\n                catch (error) {\n                    try {\n                        returnFormat = this.intl.getDatePattern({ format: numberFormat, type: 'dateTime' }, true);\n                    }\n                    catch (error) {\n                        returnFormat = numberFormat;\n                    }\n                }\n                break;\n            case 'date':\n                try {\n                    returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: 'date' }, true);\n                }\n                catch (error) {\n                    try {\n                        returnFormat = this.intl.getDatePattern({ format: numberFormat, type: 'date' }, true);\n                    }\n                    catch (error) {\n                        returnFormat = numberFormat;\n                    }\n                }\n                break;\n            case 'time':\n                try {\n                    returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: 'time' }, true);\n                }\n                catch (error) {\n                    try {\n                        returnFormat = this.intl.getDatePattern({ format: numberFormat, type: 'time' }, true);\n                    }\n                    catch (error) {\n                        returnFormat = numberFormat;\n                    }\n                }\n                break;\n            default:\n                returnFormat = numberFormat;\n                break;\n        }\n        return returnFormat;\n    }\n    /* tslint:disable:no-any */\n    parserBorder(json, border) {\n        if (json.color !== null && json.color !== undefined) {\n            border.color = json.color;\n        }\n        else {\n            border.color = '#000000';\n        }\n        if (json.lineStyle !== null && json.lineStyle !== undefined) {\n            border.lineStyle = json.lineStyle;\n        }\n        else {\n            border.lineStyle = 'thin';\n        }\n    }\n    processCellStyle(style) {\n        if (style.isGlobalStyle) {\n            this.processNumFormatId(style);\n            this.mStyles.push(style);\n            return this.mStyles.length;\n        }\n        else {\n            let compareResult = this.compareStyle(style);\n            if (!compareResult.result) {\n                this.processNumFormatId(style);\n                this.mStyles.push(style);\n                return this.mStyles.length;\n            }\n            else {\n                //Return the index of the already existing style.\n                return compareResult.index;\n            }\n        }\n    }\n    processNumFormatId(style) {\n        if (style.numberFormat !== 'GENERAL' && !this.mNumFmt.has(style.numberFormat)) {\n            let id = this.mNumFmt.size + 164;\n            this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));\n        }\n    }\n    isNewFont(toCompareStyle) {\n        let result = false;\n        let index = 0;\n        for (let font of this.mFonts) {\n            index++;\n            let fontColor = undefined;\n            if (toCompareStyle.fontColor !== undefined) {\n                fontColor = ('FF' + toCompareStyle.fontColor.replace('#', ''));\n            }\n            result = font.color === fontColor &&\n                font.b === toCompareStyle.bold &&\n                font.i === toCompareStyle.italic &&\n                font.u === toCompareStyle.underline &&\n                font.strike === toCompareStyle.strikeThrough &&\n                font.name === toCompareStyle.fontName &&\n                font.sz === toCompareStyle.fontSize;\n            if (result) {\n                break;\n            }\n        }\n        index = index - 1;\n        return { index, result };\n    }\n    isNewBorder(toCompareStyle) {\n        let bStyle = new CellStyle();\n        if (this.isAllBorder(toCompareStyle.borders)) {\n            return (bStyle.borders.all.color === toCompareStyle.borders.all.color &&\n                bStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle);\n        }\n        else {\n            return (bStyle.borders.left.color === toCompareStyle.borders.left.color &&\n                bStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle &&\n                bStyle.borders.right.color === toCompareStyle.borders.right.color &&\n                bStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle &&\n                bStyle.borders.top.color === toCompareStyle.borders.top.color &&\n                bStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle &&\n                bStyle.borders.bottom.color === toCompareStyle.borders.bottom.color &&\n                bStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle);\n        }\n    }\n    isAllBorder(toCompareBorder) {\n        let allBorderStyle = new CellStyle();\n        return allBorderStyle.borders.all.color !== toCompareBorder.all.color &&\n            allBorderStyle.borders.all.lineStyle !== toCompareBorder.all.lineStyle;\n    }\n    compareStyle(toCompareStyle) {\n        let result = true;\n        let index = 0;\n        for (let baseStyle of this.mStyles) {\n            result = baseStyle.isGlobalStyle ? false : (baseStyle.backColor === toCompareStyle.backColor &&\n                baseStyle.bold === toCompareStyle.bold &&\n                baseStyle.numFmtId === toCompareStyle.numFmtId &&\n                baseStyle.numberFormat === toCompareStyle.numberFormat &&\n                baseStyle.type === toCompareStyle.type &&\n                baseStyle.fontColor === toCompareStyle.fontColor &&\n                baseStyle.fontName === toCompareStyle.fontName &&\n                baseStyle.fontSize === toCompareStyle.fontSize &&\n                baseStyle.hAlign === toCompareStyle.hAlign &&\n                baseStyle.italic === toCompareStyle.italic &&\n                baseStyle.underline === toCompareStyle.underline &&\n                baseStyle.strikeThrough === toCompareStyle.strikeThrough &&\n                baseStyle.vAlign === toCompareStyle.vAlign &&\n                baseStyle.indent === toCompareStyle.indent &&\n                baseStyle.rotation === toCompareStyle.rotation &&\n                baseStyle.wrapText === toCompareStyle.wrapText &&\n                (baseStyle.borders.all.color === toCompareStyle.borders.all.color &&\n                    baseStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle) &&\n                (baseStyle.borders.left.color === toCompareStyle.borders.left.color &&\n                    baseStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle &&\n                    baseStyle.borders.right.color === toCompareStyle.borders.right.color &&\n                    baseStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle &&\n                    baseStyle.borders.top.color === toCompareStyle.borders.top.color &&\n                    baseStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle &&\n                    baseStyle.borders.bottom.color === toCompareStyle.borders.bottom.color &&\n                    baseStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle));\n            if (result) {\n                index = baseStyle.index;\n                break;\n            }\n        }\n        return { index, result };\n    }\n    contains(array, item) {\n        let index = array.indexOf(item);\n        return index > -1 && index < array.length;\n    }\n    getCellValueType(value) {\n        if (value instanceof Date) {\n            return 'datetime';\n        }\n        else if (typeof (value) === 'boolean') {\n            return 'boolean';\n        }\n        else if (typeof (value) === 'number') {\n            return 'number';\n        }\n        else {\n            return 'string';\n        }\n    }\n    parseCellType(cell) {\n        let type = cell.type;\n        let saveType;\n        let value = cell.value;\n        switch (type) {\n            case 'datetime':\n                value = this.toOADate(value);\n                if (cell.cellStyle !== undefined && cell.cellStyle.name !== undefined) {\n                    if (this.globalStyles.has(cell.cellStyle.name)) {\n                        let value = this.globalStyles.get(cell.cellStyle.name);\n                        this.switchNumberFormat(value.format, value.type);\n                    }\n                }\n                saveType = 'n';\n                break;\n            //TODO: Update the number format index and style\n            case 'boolean':\n                value = value ? 1 : 0;\n                saveType = 'b';\n                break;\n            case 'number':\n                saveType = 'n';\n                if (cell.cellStyle !== undefined && cell.cellStyle.name !== undefined) {\n                    if (this.globalStyles.has(cell.cellStyle.name)) {\n                        this.switchNumberFormat(this.globalStyles.get(cell.cellStyle.name).format, 'number');\n                    }\n                }\n                break;\n            case 'string':\n                this.sharedStringCount++;\n                saveType = 's';\n                let sstvalue = this.processCellValue(value, cell);\n                if (!this.contains(this.sharedString, sstvalue)) {\n                    this.sharedString.push(sstvalue);\n                }\n                value = this.sharedString.indexOf(sstvalue);\n                break;\n            default:\n                break;\n        }\n        cell.saveType = saveType;\n        cell.value = value;\n    }\n    parserImages(json, sheet) {\n        let imagesLength = json.length;\n        sheet.images = [];\n        for (let p = 0; p < imagesLength; p++) {\n            let image = this.parserImage(json[p]);\n            sheet.images.push(image);\n        }\n    }\n    parseFilters(json, sheet) {\n        sheet.autoFilters = new AutoFilters();\n        if (json.row !== null && json.row !== undefined)\n            sheet.autoFilters.row = json.row;\n        else\n            throw new Error('Argument Null Exception: row null or empty');\n        if (json.lastRow !== null && json.lastRow !== undefined)\n            sheet.autoFilters.lastRow = json.lastRow;\n        else\n            throw new Error('Argument Null Exception: lastRow cannot be null or empty');\n        if (json.column !== null && json.column !== undefined)\n            sheet.autoFilters.column = json.column;\n        else\n            throw new Error('Argument Null Exception: column cannot be null or empty');\n        if (json.lastColumn !== null && json.row !== undefined)\n            sheet.autoFilters.lastColumn = json.lastColumn;\n        else\n            throw new Error('Argument Null Exception: lastColumn cannot be null or empty');\n    }\n    parserImage(json) {\n        let image = new Image();\n        if (json.image !== null && json.image !== undefined) {\n            image.image = json.image;\n        }\n        if (json.row !== null && json.row !== undefined) {\n            image.row = json.row;\n        }\n        if (json.column !== null && json.column !== undefined) {\n            image.column = json.column;\n        }\n        if (json.lastRow !== null && json.lastRow !== undefined) {\n            image.lastRow = json.lastRow;\n        }\n        if (json.lastColumn !== null && json.lastColumn !== undefined) {\n            image.lastColumn = json.lastColumn;\n        }\n        if (json.width !== null && json.width !== undefined) {\n            image.width = json.width;\n        }\n        if (json.height !== null && json.height !== undefined) {\n            image.height = json.height;\n        }\n        if (json.horizontalFlip !== null && json.horizontalFlip !== undefined) {\n            image.horizontalFlip = json.horizontalFlip;\n        }\n        if (json.verticalFlip !== null && json.verticalFlip !== undefined) {\n            image.verticalFlip = json.verticalFlip;\n        }\n        if (json.rotation !== null && json.rotation !== undefined) {\n            image.rotation = json.rotation;\n        }\n        return image;\n    }\n    saveAsBlob(blobSaveType) {\n        switch (blobSaveType) {\n            case 'text/csv':\n                return new Promise((resolve, reject) => {\n                    let obj = {};\n                    obj.blobData = this.csvHelper.saveAsBlob();\n                    resolve(obj);\n                });\n            default:\n                return new Promise((resolve, reject) => {\n                    this.saveInternal();\n                    this.mArchive.saveAsBlob().then((blob) => {\n                        let obj = {};\n                        obj.blobData = new Blob([blob], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n                        resolve(obj);\n                    });\n                });\n        }\n    }\n    save(fileName, proxyUrl) {\n        if (fileName === null || fileName === undefined || fileName === '') {\n            throw new Error('Argument Null Exception: fileName cannot be null or empty');\n        }\n        let xlsxMatch = fileName.match('.xlsx$');\n        let csvMatch = fileName.match('.csv$');\n        if (xlsxMatch !== null && xlsxMatch[0] === ('.' + this.mSaveType)) {\n            this.saveInternal();\n            this.mArchive.save(fileName).then(() => {\n                this.mArchive.destroy();\n            });\n        }\n        else if (csvMatch !== null && csvMatch[0] === ('.' + this.mSaveType)) {\n            this.csvHelper.save(fileName);\n        }\n        else {\n            throw Error('Save type and file extension is different.');\n        }\n    }\n    saveInternal() {\n        this.saveWorkbook();\n        this.saveWorksheets();\n        this.saveSharedString();\n        this.saveStyles();\n        this.saveApp(this.builtInProperties);\n        this.saveCore(this.builtInProperties);\n        this.saveContentType();\n        this.saveTopLevelRelation();\n        this.saveWorkbookRelation();\n    }\n    saveWorkbook() {\n        /* tslint:disable-next-line:max-line-length */\n        let workbookTemp = '<?xml version=\"1.0\" encoding=\"utf-8\"?><workbook xmlns:r = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns= \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"><workbookPr codeName=\"ThisWorkbook\" defaultThemeVersion= \"153222\"/><bookViews><workbookView activeTab=\"0\"/></bookViews>';\n        let sheets = '<sheets>';\n        let length = this.worksheets.length;\n        for (let i = 0; i < length; i++) {\n            /* tslint:disable-next-line:max-line-length */\n            let sheetName = this.worksheets[i].name;\n            sheetName = sheetName.replace(\"&\", \"&amp;\");\n            sheetName = sheetName.replace(\"<\", \"&lt;\");\n            sheetName = sheetName.replace(\">\", \"&gt;\");\n            sheetName = sheetName.replace(\"\\\"\", \"&quot;\");\n            sheets += '<sheet name=\"' + sheetName + '\" sheetId=\"' + (i + 1).toString() + '\" r:id =\"rId' + (i + 1).toString() + '\" />';\n        }\n        sheets += '</sheets>';\n        workbookTemp += sheets;\n        if (this.printTitles.size > 0) {\n            let printTitle = '<definedNames>';\n            this.printTitles.forEach((value, key) => {\n                printTitle += '<definedName name=\"_xlnm.Print_Titles\" localSheetId=\"' + key + '\">' + value + '</definedName>';\n            });\n            printTitle += '</definedNames>';\n            workbookTemp += printTitle;\n        }\n        this.addToArchive(workbookTemp + '</workbook>', 'xl/workbook.xml');\n    }\n    saveWorksheets() {\n        let length = this.worksheets.length;\n        for (let i = 0; i < length; i++) {\n            this.saveWorksheet(this.worksheets[i], i);\n        }\n    }\n    saveWorksheet(sheet, index) {\n        let sheetBlob = new BlobHelper();\n        /* tslint:disable-next-line:max-line-length */\n        let sheetString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><worksheet xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n        if (!sheet.isSummaryRowBelow) {\n            sheetString += ('<sheetPr>' + '<outlinePr ' + 'summaryBelow=\"0\" >' + '</outlinePr>' + '</sheetPr>');\n        }\n        else {\n            sheetString += ('<sheetPr />');\n        }\n        sheetString += this.saveSheetView(sheet);\n        if (sheet.columns !== undefined) {\n            let colString = '<cols>';\n            for (let column of sheet.columns) {\n                /* tslint:disable-next-line:max-line-length */\n                if (column.width !== undefined) {\n                    colString += '<col min=\"' + (column.index) + '\" max=\"' + (column.index) + '\" width=\"' + this.pixelsToColumnWidth(column.width) + '\" customWidth=\"1\" />';\n                }\n                else {\n                    colString += '<col min=\"' + (column.index) + '\" max=\"' + (column.index) + '\" width=\"' + '8.43' + '\" customWidth=\"1\" />';\n                }\n            }\n            sheetString += (colString + '</cols>');\n        }\n        sheetString += ('<sheetData>');\n        sheetBlob.append(sheetString);\n        sheetString = '';\n        if (sheet.rows !== undefined) {\n            for (let row of sheet.rows) {\n                let rowString = '<row r=\"' + (row.index) + '\" ';\n                if (!isNullOrUndefined(row.spans)) {\n                    rowString += 'spans=\"' + row.spans + '\" ';\n                }\n                if (row.height !== undefined) {\n                    rowString += ('ht=\"' + this.pixelsToRowHeight(row.height) + '\" customHeight=\"1\" ');\n                }\n                if (row.grouping !== undefined) {\n                    if (row.grouping.isHidden) {\n                        rowString += ('hidden=\"1\" ');\n                    }\n                    if (row.grouping.outlineLevel !== undefined) {\n                        rowString += ('outlineLevel=\"' + row.grouping.outlineLevel + '\" ');\n                    }\n                    if (row.grouping.isCollapsed) {\n                        rowString += ('collapsed=\"1\" ');\n                    }\n                }\n                rowString += ('>');\n                for (let cell of row.cells) {\n                    if (cell !== undefined && (cell.value !== undefined || cell.cellStyle !== undefined)) {\n                        rowString += ('<c r=\"' + cell.refName + '\" ');\n                        if (cell.saveType !== undefined) {\n                            rowString += ('t=\"' + cell.saveType + '\" ');\n                        }\n                        if (cell.styleIndex !== undefined) {\n                            rowString += ('s=\"' + cell.styleIndex + '\" ');\n                        }\n                        rowString += (' >');\n                        if (cell.formula !== undefined) {\n                            rowString += ('<f>' + cell.formula + '</f>');\n                        }\n                        if (cell.value !== undefined) {\n                            rowString += ('<v>' + cell.value + '</v></c>');\n                        }\n                        else {\n                            rowString += ('</c>');\n                        }\n                    }\n                }\n                rowString += ('</row>');\n                sheetBlob.append(rowString);\n            }\n        }\n        sheetString += ('</sheetData>');\n        /* tslint:disable-next-line:max-line-length */\n        if (sheet.autoFilters !== null && sheet.autoFilters !== undefined)\n            sheetString += ('<autoFilter ref=\"' + this.getCellName(sheet.autoFilters.row, sheet.autoFilters.column) + ':' + this.getCellName(sheet.autoFilters.lastRow, sheet.autoFilters.lastColumn) + '\"/>');\n        if (sheet.mergeCells.length > 0) {\n            sheetString += ('<mergeCells count=\"' + sheet.mergeCells.length + '\">');\n            for (let mCell of sheet.mergeCells) {\n                sheetString += ('<mergeCell ref=\"' + mCell.ref + '\" />');\n            }\n            sheetString += ('</mergeCells>');\n        }\n        if (sheet.hyperLinks.length > 0) {\n            sheetString += ('<hyperlinks>');\n            for (let hLink of sheet.hyperLinks) {\n                sheetString += ('<hyperlink ref=\"' + hLink.ref + '\" r:id=\"rId' + hLink.rId + '\" />');\n            }\n            sheetString += ('</hyperlinks>');\n        }\n        /* tslint:disable-next-line:max-line-length */\n        sheetString += ('<pageMargins left=\"0.75\" right=\"0.75\" top=\"1\" bottom=\"1\" header=\"0.5\" footer=\"0.5\" /><headerFooter scaleWithDoc=\"1\" alignWithMargins=\"0\" differentFirst=\"0\" differentOddEven=\"0\" />');\n        if (sheet.images != undefined && sheet.images.length > 0) {\n            this.drawingCount++;\n            this.saveDrawings(sheet, sheet.index);\n            sheetString += '<drawing r:id=\"rId' + (sheet.hyperLinks.length + 1) + '\"/>';\n        }\n        this.addToArchive(this.saveSheetRelations(sheet), ('xl/worksheets/_rels/sheet' + sheet.index + '.xml.rels'));\n        sheetBlob.append(sheetString + '</worksheet>');\n        this.addToArchive(sheetBlob.getBlob(), 'xl/worksheets' + '/sheet' + (index + 1) + '.xml');\n    }\n    saveDrawings(sheet, index) {\n        let drawings = new BlobHelper();\n        /* tslint:disable-next-line:max-line-length */\n        let sheetDrawingString = '<xdr:wsDr xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\" xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\">';\n        if (sheet.images !== undefined) {\n            let imgId = 0;\n            for (let pic of sheet.images) {\n                if (pic.height !== undefined && pic.width !== undefined) {\n                    this.updatelastRowOffset(sheet, pic);\n                    this.updatelastColumnOffSet(sheet, pic);\n                    pic.lastRow -= 1;\n                    pic.lastColumn -= 1;\n                }\n                else if (pic.lastRow !== undefined && pic.lastColumn !== undefined) {\n                    pic.lastRowOffset = 0;\n                    pic.lastColOffset = 0;\n                }\n                imgId++;\n                sheetDrawingString += '<xdr:twoCellAnchor editAs=\"oneCell\">';\n                sheetDrawingString += '<xdr:from><xdr:col>';\n                //col\n                sheetDrawingString += pic.column - 1;\n                sheetDrawingString += '</xdr:col><xdr:colOff>';\n                //colOff\n                sheetDrawingString += 0;\n                sheetDrawingString += '</xdr:colOff><xdr:row>';\n                //row\n                sheetDrawingString += pic.row - 1;\n                sheetDrawingString += '</xdr:row><xdr:rowOff>';\n                //rowOff\n                sheetDrawingString += 0;\n                sheetDrawingString += '</xdr:rowOff></xdr:from>';\n                sheetDrawingString += '<xdr:to><xdr:col>';\n                //col\n                sheetDrawingString += pic.lastColumn;\n                sheetDrawingString += '</xdr:col><xdr:colOff>';\n                //colOff\n                sheetDrawingString += pic.lastColOffset;\n                sheetDrawingString += '</xdr:colOff><xdr:row>';\n                //row\n                sheetDrawingString += pic.lastRow;\n                sheetDrawingString += '</xdr:row><xdr:rowOff>';\n                //rowOff\n                sheetDrawingString += pic.lastRowOffset;\n                sheetDrawingString += '</xdr:rowOff></xdr:to>';\n                sheetDrawingString += '<xdr:pic>';\n                sheetDrawingString += '<xdr:nvPicPr>';\n                sheetDrawingString += '<xdr:cNvPr id=\"' + imgId + '\" name=\"Picture ' + imgId + '\"> </xdr:cNvPr>';\n                sheetDrawingString += '<xdr:cNvPicPr><a:picLocks noChangeAspect=\"1\"/></xdr:cNvPicPr> </xdr:nvPicPr>';\n                sheetDrawingString += '<xdr:blipFill>';\n                /* tslint:disable-next-line:max-line-length */\n                sheetDrawingString += '<a:blip xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" r:embed=\"rId' + imgId + '\" cstate=\"print\">';\n                sheetDrawingString += '</a:blip><a:stretch><a:fillRect /></a:stretch></xdr:blipFill>';\n                sheetDrawingString += '<xdr:spPr>';\n                sheetDrawingString += '<a:xfrm';\n                if (pic.rotation != undefined && pic.rotation <= 3600 && pic.rotation >= -3600) {\n                    sheetDrawingString += ' rot=\"' + (pic.rotation * 60000) + '\"';\n                }\n                if (pic.verticalFlip != undefined && pic.verticalFlip != false) {\n                    sheetDrawingString += ' flipV=\"1\"';\n                }\n                if (pic.horizontalFlip != undefined && pic.horizontalFlip != false) {\n                    sheetDrawingString += ' flipH=\"1\"';\n                }\n                sheetDrawingString += '/>';\n                sheetDrawingString += '<a:prstGeom prst=\"rect\"><a:avLst /></a:prstGeom></xdr:spPr>';\n                sheetDrawingString += '</xdr:pic><xdr:clientData /></xdr:twoCellAnchor>';\n                let imageData = this.convertBase64toImage(pic.image);\n                this.imageCount += 1;\n                this.addToArchive(imageData, 'xl/media/image' + this.imageCount + '.png');\n            }\n            drawings.append(sheetDrawingString);\n            drawings.append('</xdr:wsDr>');\n            this.saveDrawingRelations(sheet);\n            this.addToArchive(drawings.getBlob(), 'xl/drawings/drawing' + this.drawingCount + '.xml');\n        }\n    }\n    updatelastRowOffset(sheet, picture) {\n        let iCurHeight = picture.height;\n        let iCurRow = picture.row;\n        let iCurOffset = 0;\n        while (iCurHeight >= 0) {\n            let iRowHeight = 0;\n            if (sheet.rows !== undefined && sheet.rows[iCurRow - 1] !== undefined)\n                iRowHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === undefined ? 15 : sheet.rows[iCurRow - 1].height);\n            else\n                iRowHeight = this.convertToPixels(15);\n            let iSpaceInCell = iRowHeight - (iCurOffset * iRowHeight / 256);\n            if (iSpaceInCell > iCurHeight) {\n                picture.lastRow = iCurRow;\n                picture.lastRowOffset = iCurOffset + (iCurHeight * 256 / iRowHeight);\n                let rowHiddenHeight = 0;\n                if (sheet.rows !== undefined && sheet.rows[iCurRow - 1] !== undefined)\n                    rowHiddenHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === undefined ? 15 : sheet.rows[iCurRow - 1].height);\n                else\n                    rowHiddenHeight = this.convertToPixels(15);\n                picture.lastRowOffset = (rowHiddenHeight * picture.lastRowOffset) / 256;\n                picture.lastRowOffset = Math.round(picture.lastRowOffset / this.unitsProportions[7]);\n                break;\n            }\n            else {\n                iCurHeight -= iSpaceInCell;\n                iCurRow++;\n                iCurOffset = 0;\n            }\n        }\n    }\n    updatelastColumnOffSet(sheet, picture) {\n        let iCurWidth = picture.width;\n        let iCurCol = picture.column;\n        let iCurOffset = 0;\n        while (iCurWidth >= 0) {\n            let iColWidth = 0;\n            if (sheet.columns !== undefined && sheet.columns[iCurCol - 1] !== undefined)\n                iColWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === undefined ? 8.43 : sheet.columns[iCurCol - 1].width);\n            else\n                iColWidth = this.ColumnWidthToPixels(8.43);\n            let iSpaceInCell = iColWidth - (iCurOffset * iColWidth / 1024);\n            if (iSpaceInCell > iCurWidth) {\n                picture.lastColumn = iCurCol;\n                picture.lastColOffset = iCurOffset + (iCurWidth * 1024 / iColWidth);\n                let colHiddenWidth = 0;\n                if (sheet.columns !== undefined && sheet.columns[iCurCol - 1] !== undefined)\n                    colHiddenWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === undefined ? 8.43 : sheet.columns[iCurCol].width);\n                else\n                    colHiddenWidth = this.ColumnWidthToPixels(8.43);\n                picture.lastColOffset = (colHiddenWidth * picture.lastColOffset) / 1024;\n                picture.lastColOffset = Math.round(picture.lastColOffset / this.unitsProportions[7]);\n                break;\n            }\n            else {\n                iCurWidth -= iSpaceInCell;\n                iCurCol++;\n                iCurOffset = 0;\n            }\n        }\n    }\n    convertToPixels(value) {\n        return value * this.unitsProportions[6];\n    }\n    convertBase64toImage(img) {\n        const byteStr = window.atob(img);\n        const buffer = new ArrayBuffer(byteStr.length);\n        const data = new Uint8Array(buffer);\n        for (let i = 0; i < byteStr.length; i++) {\n            data[i] = byteStr.charCodeAt(i);\n        }\n        const blob = new Blob([data], { type: 'image/png' });\n        return blob;\n    }\n    saveDrawingRelations(sheet) {\n        /* tslint:disable-next-line:max-line-length */\n        let drawingRelation = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n        let length = sheet.images.length;\n        let id = this.imageCount - sheet.images.length;\n        for (let i = 1; i <= length; i++) {\n            id++;\n            /* tslint:disable-next-line:max-line-length */\n            drawingRelation += '<Relationship Id=\"rId' + i + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\" Target=\"../media/image' + id + '.png\" />';\n        }\n        this.addToArchive((drawingRelation + '</Relationships>'), 'xl/drawings/_rels/drawing' + this.drawingCount + '.xml.rels');\n    }\n    pixelsToColumnWidth(pixels) {\n        let dDigitWidth = 7;\n        let val = (pixels > dDigitWidth + 5) ?\n            this.trunc((pixels - 5) / dDigitWidth * 100 + 0.5) / 100 :\n            pixels / (dDigitWidth + 5);\n        return (val > 1) ?\n            ((val * dDigitWidth + 5) / dDigitWidth * 256.0) / 256.0 :\n            (val * (dDigitWidth + 5) / dDigitWidth * 256.0) / 256.0;\n    }\n    ColumnWidthToPixels(val) {\n        let dDigitWidth = 7;\n        let fileWidth = (val > 1) ?\n            ((val * dDigitWidth + 5) / dDigitWidth * 256.0) / 256.0 :\n            (val * (dDigitWidth + 5) / dDigitWidth * 256.0) / 256.0;\n        return this.trunc(((256 * fileWidth + this.trunc(128 / dDigitWidth)) / 256) * dDigitWidth);\n    }\n    trunc(x) {\n        let n = x - x % 1;\n        return n === 0 && (x < 0 || (x === 0 && (1 / x !== 1 / 0))) ? -0 : n;\n    }\n    pixelsToRowHeight(pixels) {\n        return (pixels * this.unitsProportions[5] / this.unitsProportions[6]);\n    }\n    saveSheetRelations(sheet) {\n        /* tslint:disable-next-line:max-line-length */\n        let relStr = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n        for (let hLink of sheet.hyperLinks) {\n            /* tslint:disable-next-line:max-line-length */\n            relStr += '<Relationship Id=\"rId' + hLink.rId + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\" Target=\"' + this.processString(hLink.target) + '\" TargetMode=\"External\" />';\n        }\n        if (sheet.images != undefined && sheet.images.length > 0) {\n            /* tslint:disable-next-line:max-line-length */\n            relStr += '<Relationship Id=\"rId' + (sheet.hyperLinks.length + 1) + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing\" Target=\"../drawings/drawing' + this.drawingCount + '.xml\" />';\n        }\n        relStr += '</Relationships>';\n        return relStr;\n    }\n    saveSheetView(sheet) {\n        let paneString = '<sheetViews><sheetView workbookViewId=\"0\" ';\n        if (sheet.enableRtl === true) {\n            paneString += 'rightToLeft=\"1\"';\n        }\n        if (sheet.showGridLines === false) {\n            paneString += 'showGridLines=\"0\" >';\n        }\n        else {\n            paneString += '>';\n        }\n        if (sheet.freezePanes !== undefined) {\n            paneString += '<pane state=\"frozen\"' +\n                ' topLeftCell=\"' + sheet.freezePanes.leftCell + '\" ';\n            if (sheet.freezePanes.row !== 0) {\n                paneString += 'ySplit=\"' + sheet.freezePanes.row + '\" ';\n            }\n            if (sheet.freezePanes.column !== 0) {\n                paneString += 'xSplit=\"' + sheet.freezePanes.column + '\" ';\n            }\n            paneString += '/>';\n        }\n        paneString += '</sheetView></sheetViews > ';\n        return paneString;\n    }\n    saveSharedString() {\n        let length = this.sharedString.length;\n        if (length > 0) {\n            /* tslint:disable-next-line:max-line-length */\n            let sstStart = '<?xml version=\"1.0\" encoding=\"utf-8\"?><sst uniqueCount=\"' + length + '\" count=\"' + this.sharedStringCount + '\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n            let si = '';\n            for (let i = 0; i < length; i++) {\n                if (this.sharedString[i].indexOf('<r>') !== 0) {\n                    si += '<si><t>';\n                    si += this.processString(this.sharedString[i]);\n                    si += '</t></si>';\n                }\n                else {\n                    si += '<si>';\n                    si += this.sharedString[i];\n                    si += '</si>';\n                }\n            }\n            si += '</sst>';\n            this.addToArchive(sstStart + si, 'xl/sharedStrings.xml');\n        }\n    }\n    processString(value) {\n        if (value.indexOf('&') !== -1) {\n            value = value.replace(/&/g, '&amp;');\n        }\n        if (value.indexOf('<') !== -1) {\n            value = value.replace(/</g, '&lt;');\n        }\n        if (value.indexOf('>') !== -1) {\n            value = value.replace(/>/g, '&gt;');\n        }\n        return value;\n    }\n    saveStyles() {\n        this.updateCellXfsStyleXfs();\n        /* tslint:disable-next-line:max-line-length */\n        let styleTemp = '<?xml version=\"1.0\" encoding=\"utf-8\"?><styleSheet xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n        styleTemp += this.saveNumberFormats();\n        styleTemp += this.saveFonts();\n        styleTemp += this.saveFills();\n        styleTemp += this.saveBorders();\n        styleTemp += this.saveCellStyleXfs();\n        styleTemp += this.saveCellXfs();\n        styleTemp += this.saveCellStyles();\n        this.addToArchive(styleTemp + '</styleSheet>', 'xl/styles.xml');\n    }\n    updateCellXfsStyleXfs() {\n        for (let style of this.mStyles) {\n            let cellXfs = undefined;\n            if (style.isGlobalStyle) {\n                cellXfs = new CellStyleXfs();\n                cellXfs.xfId = (style.index - 1);\n            }\n            else {\n                cellXfs = new CellXfs();\n                cellXfs.xfId = 0;\n            }\n            //Add font\n            let compareFontResult = this.isNewFont(style);\n            if (!compareFontResult.result) {\n                let font = new Font();\n                font.b = style.bold;\n                font.i = style.italic;\n                font.name = style.fontName;\n                font.sz = style.fontSize;\n                font.u = style.underline;\n                font.strike = style.strikeThrough;\n                font.color = ('FF' + style.fontColor.replace('#', ''));\n                this.mFonts.push(font);\n                cellXfs.fontId = this.mFonts.length - 1;\n            }\n            else {\n                cellXfs.fontId = compareFontResult.index;\n            }\n            //Add fill\n            if (style.backColor !== 'none') {\n                let backColor = 'FF' + style.backColor.replace('#', '');\n                if (this.mFills.has(backColor)) {\n                    let fillId = this.mFills.get(backColor);\n                    cellXfs.fillId = fillId;\n                }\n                else {\n                    let fillId = this.mFills.size + 2;\n                    this.mFills.set(backColor, fillId);\n                    cellXfs.fillId = (fillId);\n                }\n            }\n            else {\n                cellXfs.fillId = 0;\n            }\n            //Add border            \n            if (!this.isNewBorder(style)) {\n                this.mBorders.push(style.borders);\n                cellXfs.borderId = this.mBorders.length;\n            }\n            else {\n                cellXfs.borderId = 0;\n            }\n            //Add Number Format            \n            if (style.numberFormat !== 'GENERAL') {\n                if (this.mNumFmt.has(style.numberFormat)) {\n                    let numFmt = this.mNumFmt.get(style.numberFormat);\n                    cellXfs.numFmtId = numFmt.numFmtId;\n                }\n                else {\n                    let id = this.mNumFmt.size + 164;\n                    this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));\n                    cellXfs.numFmtId = id;\n                }\n            }\n            else {\n                if (style.numberFormat === 'GENERAL' && style.numFmtId === 14) {\n                    cellXfs.numFmtId = 14;\n                }\n                else {\n                    cellXfs.numFmtId = 0;\n                }\n            }\n            //Add alignment            \n            if (!style.isGlobalStyle) {\n                cellXfs.applyAlignment = 1;\n            }\n            cellXfs.alignment = new Alignment();\n            cellXfs.alignment.indent = style.indent;\n            cellXfs.alignment.horizontal = style.hAlign;\n            cellXfs.alignment.vertical = style.vAlign;\n            cellXfs.alignment.wrapText = style.wrapText ? 1 : 0;\n            cellXfs.alignment.rotation = style.rotation;\n            if (style.isGlobalStyle) {\n                this.mCellStyleXfs.push(cellXfs);\n                this.mCellXfs.push(cellXfs);\n            }\n            else {\n                //Add cellxfs\n                this.mCellXfs.push(cellXfs);\n            }\n        }\n    }\n    saveNumberFormats() {\n        if (this.mNumFmt.size >= 1) {\n            let numFmtStyle = '<numFmts count=\"' + (this.mNumFmt.size) + '\">';\n            this.mNumFmt.forEach((value, key) => {\n                numFmtStyle += '<numFmt numFmtId=\"' + value.numFmtId + '\" formatCode=\"' + value.formatCode.replace(/\"/g, '&quot;') + '\" />';\n            });\n            return (numFmtStyle += '</numFmts>');\n        }\n        else {\n            return '';\n        }\n    }\n    saveFonts() {\n        /* tslint:disable-next-line:max-line-length */\n        let fontStyle = '<fonts count=\"' + (this.mFonts.length) + '\">';\n        if (this.mFonts.length >= 1) {\n            for (let font of this.mFonts) {\n                fontStyle += '<font>';\n                if (font.b) {\n                    fontStyle += '<b />';\n                }\n                if (font.i) {\n                    fontStyle += '<i />';\n                }\n                if (font.u) {\n                    fontStyle += '<u />';\n                }\n                if (font.strike) {\n                    fontStyle += '<strike />';\n                }\n                fontStyle += '<sz val=\"' + font.sz + '\" />';\n                fontStyle += '<color rgb=\"' + font.color + '\" />';\n                fontStyle += '<name val=\"' + font.name + '\" /></font>';\n            }\n        }\n        return fontStyle + '</fonts>';\n    }\n    saveFills() {\n        /* tslint:disable-next-line:max-line-length */\n        let fillsStyle = '<fills count=\"' + (this.mFills.size + 2) + '\"><fill><patternFill patternType=\"none\"></patternFill></fill><fill><patternFill patternType=\"gray125\"></patternFill></fill>';\n        if (this.mFills.size >= 1) {\n            this.mFills.forEach((value, key) => {\n                /* tslint:disable-next-line:max-line-length */\n                fillsStyle += '<fill><patternFill patternType=\"solid\"><fgColor rgb=\"' + key + '\" /><bgColor rgb=\"FFFFFFFF\" /></patternFill></fill>';\n            });\n        }\n        return fillsStyle + '</fills>';\n    }\n    saveBorders() {\n        /* tslint:disable-next-line:max-line-length */\n        let bordersStyle = '<borders count=\"' + (this.mBorders.length + 1) + '\"><border><left /><right /><top /><bottom /><diagonal /></border>';\n        if (this.mBorders.length >= 1) {\n            for (let borders of this.mBorders) {\n                if (this.isAllBorder(borders)) {\n                    let color = borders.all.color.replace('#', '');\n                    let lineStyle = borders.all.lineStyle;\n                    /* tslint:disable-next-line:max-line-length */\n                    bordersStyle += '<border><left style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></left><right style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></right><top style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></top><bottom style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></bottom></border>';\n                }\n                else {\n                    /* tslint:disable-next-line:max-line-length */\n                    bordersStyle += '<border><left style=\"' + borders.left.lineStyle + '\"><color rgb=\"FF' + borders.left.color.replace('#', '') + '\" /></left><right style=\"' + borders.right.lineStyle + '\"><color rgb=\"FF' + borders.right.color.replace('#', '') + '\" /></right><top style=\"' + borders.top.lineStyle + '\"><color rgb=\"FF' + borders.top.color.replace('#', '') + '\" /></top><bottom style=\"' + borders.bottom.lineStyle + '\"><color rgb=\"FF' + borders.bottom.color.replace('#', '') + '\" /></bottom></border>';\n                }\n            }\n        }\n        return bordersStyle + '</borders>';\n    }\n    saveCellStyles() {\n        let cellStyleString = '<cellStyles  count=\"' + (this.cellStyles.size) + '\">';\n        this.cellStyles.forEach((value, key) => {\n            cellStyleString += '<cellStyle name=\"' + key + '\" xfId=\"' + this.cellStyles.get(key).xfId + '\"';\n            if (key === 'Normal') {\n                cellStyleString += ' builtinId=\"0\"';\n            }\n            cellStyleString += ' />';\n        });\n        return cellStyleString += '</cellStyles>';\n    }\n    saveCellStyleXfs() {\n        /* tslint:disable-next-line:max-line-length */\n        let cellXfsStyle = '<cellStyleXfs count=\"' + (this.mCellStyleXfs.length + 1) + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" />';\n        if (this.mCellStyleXfs.length >= 1) {\n            for (let cellStyleXf of this.mCellStyleXfs) {\n                /* tslint:disable-next-line:max-line-length */\n                cellXfsStyle += '<xf numFmtId=\"' + cellStyleXf.numFmtId + '\" fontId=\"' + cellStyleXf.fontId + '\" fillId=\"' + cellStyleXf.fillId + '\" borderId=\"' + cellStyleXf.borderId + '\" ';\n                if (cellStyleXf.alignment !== undefined) {\n                    cellXfsStyle += '>' + this.saveAlignment(cellStyleXf) + '</xf>';\n                }\n                else {\n                    cellXfsStyle += ' />';\n                }\n            }\n        }\n        return cellXfsStyle + '</cellStyleXfs>';\n    }\n    saveCellXfs() {\n        /* tslint:disable-next-line:max-line-length */\n        let cellXfsStyle = '<cellXfs count=\"' + (this.mCellXfs.length + 1) + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" />';\n        if (this.mCellXfs.length >= 1) {\n            for (let cellXf of this.mCellXfs) {\n                /* tslint:disable-next-line:max-line-length */\n                cellXfsStyle += '<xf numFmtId=\"' + cellXf.numFmtId + '\" fontId=\"' + cellXf.fontId + '\" fillId=\"' + cellXf.fillId + '\" borderId=\"' + cellXf.borderId + '\" xfId=\"' + cellXf.xfId + '\" ';\n                if (cellXf.applyAlignment === 1) {\n                    cellXfsStyle += 'applyAlignment=\"1\"';\n                }\n                cellXfsStyle += '>' + this.saveAlignment(cellXf) + '</xf>';\n            }\n        }\n        return cellXfsStyle + '</cellXfs>';\n    }\n    saveAlignment(cellXf) {\n        let alignString = '<alignment ';\n        if (cellXf.alignment.horizontal !== undefined) {\n            alignString += 'horizontal=\"' + cellXf.alignment.horizontal + '\" ';\n        }\n        if (cellXf.alignment.indent !== undefined && cellXf.alignment.indent !== 0) {\n            alignString += 'indent=\"' + cellXf.alignment.indent + '\" ';\n        }\n        else if (cellXf.alignment.rotation !== undefined && cellXf.alignment.rotation !== 0) {\n            alignString += 'textRotation=\"' + cellXf.alignment.rotation + '\" ';\n        }\n        if (cellXf.alignment.vertical !== undefined) {\n            alignString += 'vertical=\"' + cellXf.alignment.vertical + '\" ';\n        }\n        alignString += 'wrapText=\"' + cellXf.alignment.wrapText + '\" />';\n        return alignString;\n    }\n    saveApp(builtInProperties) {\n        /* tslint:disable-next-line:max-line-length */\n        let appString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\"><Application>Essential XlsIO</Application>';\n        if (builtInProperties !== undefined) {\n            if (builtInProperties.manager !== undefined) {\n                appString += '<Manager>' + builtInProperties.manager + '</Manager>';\n            }\n            if (builtInProperties.company !== undefined) {\n                appString += '<Company>' + builtInProperties.company + '</Company>';\n            }\n        }\n        this.addToArchive((appString + '</Properties>'), 'docProps/app.xml');\n    }\n    saveCore(builtInProperties) {\n        let createdDate = new Date();\n        /* tslint:disable-next-line:max-line-length */\n        let coreString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><cp:coreProperties xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\">';\n        if (this.builtInProperties !== undefined) {\n            if (builtInProperties.author !== undefined) {\n                coreString += '<dc:creator>' + builtInProperties.author + '</dc:creator>';\n            }\n            if (builtInProperties.subject !== undefined) {\n                coreString += '<dc:subject>' + builtInProperties.subject + '</dc:subject>';\n            }\n            if (builtInProperties.category !== undefined) {\n                coreString += '<cp:category>' + builtInProperties.category + '</cp:category>';\n            }\n            if (builtInProperties.comments !== undefined) {\n                coreString += '<dc:description>' + builtInProperties.comments + '</dc:description>';\n            }\n            if (builtInProperties.title !== undefined) {\n                coreString += '<dc:title>' + builtInProperties.title + '</dc:title>';\n            }\n            if (builtInProperties.tags !== undefined) {\n                coreString += '<cp:keywords>' + builtInProperties.tags + '</cp:keywords>';\n            }\n            if (builtInProperties.status !== undefined) {\n                coreString += '<cp:contentStatus>' + builtInProperties.status + '</cp:contentStatus>';\n            }\n            if (builtInProperties.createdDate !== undefined) {\n                /* tslint:disable-next-line:max-line-length */\n                coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + builtInProperties.createdDate.toISOString() + '</dcterms:created>';\n            }\n            else {\n                coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:created>';\n            }\n            if (builtInProperties.modifiedDate !== undefined) {\n                /* tslint:disable-next-line:max-line-length */\n                coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + builtInProperties.modifiedDate.toISOString() + '</dcterms:modified>';\n            }\n            else {\n                coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:modified>';\n            }\n        }\n        else {\n            coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:created>';\n            coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:modified>';\n        }\n        /* tslint:disable-next-line:max-line-length */\n        coreString += '</cp:coreProperties>';\n        this.addToArchive(coreString, 'docProps/core.xml');\n    }\n    saveTopLevelRelation() {\n        /* tslint:disable-next-line:max-line-length */\n        let topRelation = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\" /><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\" /><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\" /></Relationships>';\n        this.addToArchive(topRelation, '_rels/.rels');\n    }\n    saveWorkbookRelation() {\n        /* tslint:disable-next-line:max-line-length */\n        let wbRelation = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n        let length = this.worksheets.length;\n        let count = 0;\n        for (let i = 0; i < length; i++, count++) {\n            /* tslint:disable-next-line:max-line-length */\n            wbRelation += '<Relationship Id=\"rId' + (i + 1).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet' + (i + 1).toString() + '.xml\" />';\n        }\n        /* tslint:disable-next-line:max-line-length */\n        wbRelation += '<Relationship Id=\"rId' + (++count).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\" />';\n        if (this.sharedStringCount > 0) {\n            /* tslint:disable-next-line:max-line-length */\n            wbRelation += '<Relationship Id=\"rId' + (++count).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n        }\n        this.addToArchive((wbRelation + '</Relationships>'), 'xl/_rels/workbook.xml.rels');\n    }\n    saveContentType() {\n        /* tslint:disable-next-line:max-line-length */\n        let contentTypeString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\"><Default Extension=\"xml\" ContentType=\"application/xml\" /><Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" /><Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\" /><Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" /><Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\" /><Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\" />';\n        let sheetsOverride = '';\n        let length = this.worksheets.length;\n        for (let i = 0; i < length; i++) {\n            /* tslint:disable-next-line:max-line-length */\n            sheetsOverride += '<Override PartName=\"/xl/worksheets/sheet' + (i + 1).toString() + '.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" />';\n            if (this.worksheets[i].images != undefined && this.worksheets[i].images.length > 0) {\n                /* tslint:disable-next-line:max-line-length */\n                sheetsOverride += '<Override PartName=\"/xl/drawings/drawing' + (i + 1).toString() + '.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.drawing+xml\" />';\n            }\n        }\n        if (this.imageCount > 0)\n            sheetsOverride += '<Default Extension=\"png\" ContentType=\"image/png\" />';\n        if (this.sharedStringCount > 0) {\n            /* tslint:disable-next-line:max-line-length */\n            contentTypeString += '<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\" />';\n        }\n        this.addToArchive((contentTypeString + sheetsOverride + '</Types>'), '[Content_Types].xml');\n    }\n    addToArchive(xmlString, itemName) {\n        if (typeof (xmlString) === 'string') {\n            let blob = new Blob([xmlString], { type: 'text/plain' });\n            let archiveItem = new ZipArchiveItem(blob, itemName);\n            this.mArchive.addItem(archiveItem);\n        }\n        else {\n            let archiveItem = new ZipArchiveItem(xmlString, itemName);\n            this.mArchive.addItem(archiveItem);\n        }\n    }\n    processMergeCells(cell, rowIndex, mergeCells) {\n        if (cell.rowSpan !== 0 || cell.colSpan !== 0) {\n            let mCell = new MergeCell();\n            mCell.x = cell.index;\n            mCell.width = cell.colSpan;\n            mCell.y = rowIndex;\n            mCell.height = cell.rowSpan;\n            let startCell = this.getCellName(mCell.y, mCell.x);\n            let endCell = this.getCellName(rowIndex + mCell.height, cell.index + mCell.width);\n            mCell.ref = startCell + ':' + endCell;\n            let mergedCell = mergeCells.add(mCell);\n            let start = { x: mCell.x, y: mCell.y };\n            let end = {\n                x: (cell.index + mCell.width), y: (rowIndex + mCell.height)\n            };\n            this.updatedMergedCellStyles(start, end, cell);\n        }\n        return mergeCells;\n    }\n    updatedMergedCellStyles(sCell, eCell, cell) {\n        for (let x = sCell.x; x <= eCell.x; x++) {\n            for (let y = sCell.y; y <= eCell.y; y++) {\n                this.mergedCellsStyle.set(this.getCellName(y, x), { x: x, y: y, styleIndex: cell.styleIndex });\n            }\n        }\n    }\n    /**\n     * Returns the tick count corresponding to the given year, month, and day.\n     * @param year number value of year\n     * @param month number value of month\n     * @param day number value of day\n     */\n    dateToTicks(year, month, day) {\n        let ticksPerDay = 10000 * 1000 * 60 * 60 * 24;\n        let daysToMonth365 = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n        let daysToMonth366 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\n        if (year >= 1 && year <= 9999 && month >= 1 && month <= 12) {\n            let days = this.isLeapYear(year) ? daysToMonth366 : daysToMonth365;\n            let y = year - 1;\n            let n = y * 365 + ((y / 4) | 0) - ((y / 100) | 0) + ((y / 400) | 0) + days[month - 1] + day - 1;\n            return n * ticksPerDay;\n        }\n        throw new Error('Not a valid date');\n    }\n    /**\n     * Return the tick count corresponding to the given hour, minute, second.\n     * @param hour number value of hour\n     * @param minute number value if minute\n     * @param second number value of second\n     */\n    timeToTicks(hour, minute, second) {\n        if (hour >= 0 && hour < 24 && minute >= 0 && minute < 60 && second >= 0 && second < 60) {\n            let totalSeconds = hour * 3600 + minute * 60 + second;\n            return totalSeconds * 10000 * 1000;\n        }\n        throw new Error('Not valid time');\n    }\n    /**\n     * Checks if given year is a leap year.\n     * @param year Year value.\n     */\n    isLeapYear(year) {\n        return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n    }\n    /**\n     * Converts `DateTime` to the equivalent OLE Automation date.\n     */\n    toOADate(date) {\n        let ticks = 0;\n        /* tslint:disable-next-line:max-line-length */\n        ticks = this.dateToTicks(date.getFullYear(), (date.getMonth() + 1), date.getDate()) + this.timeToTicks(date.getHours(), date.getMinutes(), date.getSeconds());\n        if (ticks === 0) {\n            return 0.0;\n        }\n        let ticksPerDay = 10000 * 1000 * 60 * 60 * 24;\n        let daysTo1899 = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 4 + ((365 * 4 + 1) * 25 - 1) * 3 - 367;\n        let doubleDateOffset = daysTo1899 * ticksPerDay;\n        let oaDateMinAsTicks = (((365 * 4 + 1) * 25 - 1) - 365) * ticksPerDay;\n        if (ticks < oaDateMinAsTicks) {\n            throw new Error('Arg_OleAutDateInvalid');\n        }\n        let millisPerDay = 1000 * 60 * 60 * 24;\n        return ((ticks - doubleDateOffset) / 10000) / millisPerDay;\n    }\n}\n/**\n * BuiltInProperties Class\n * @private\n */\nclass BuiltInProperties {\n}\n\n/**\n * index class\n */\n\nexport { CellStyle, Font, CellXfs, Alignment, CellStyleXfs, CellStyles, NumFmt, Border, Borders, Cell, Cells, Column, Row, Rows, Workbook, BuiltInProperties, Worksheet, HyperLink, Grouping, FreezePane, MergeCell, MergeCells, Worksheets, CsvHelper, ValueFormatter, BlobHelper };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}