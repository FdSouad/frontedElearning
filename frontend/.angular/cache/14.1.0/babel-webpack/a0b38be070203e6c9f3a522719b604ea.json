{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Directive, forwardRef, Component, ViewEncapsulation, Optional, Self, ViewChild, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState } from '@angular/material/core';\nimport * as i7 from '@angular/material/form-field';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i2 from '@angular/forms';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nconst _c0 = [\"inputFile\"];\nconst _c1 = [\"inputValue\"];\n\nfunction NgxMatFileInputComponent_mat_icon_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 7);\n    i0.ɵɵtext(1, \"attach_file\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c2 = [[[\"\", \"ngxMatFileInputIcon\", \"\"]]];\nconst _c3 = [\"[ngxMatFileInputIcon]\"];\nlet nextUniqueId = 0;\n\nconst _NgxMatInputMixinBase = mixinErrorState(class {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n    this.stateChanges = new Subject();\n  }\n\n});\n\nclass NgxMatFileInputIcon {}\n/** @nocollapse */\n\n\nNgxMatFileInputIcon.ɵfac = function NgxMatFileInputIcon_Factory(t) {\n  return new (t || NgxMatFileInputIcon)();\n};\n/** @nocollapse */\n\n\nNgxMatFileInputIcon.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMatFileInputIcon,\n  selectors: [[\"\", \"ngxMatFileInputIcon\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatFileInputIcon, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatFileInputIcon]'\n    }]\n  }], null, null);\n})();\n\nclass NgxMatFileInputComponent extends _NgxMatInputMixinBase {\n  constructor(_elementRef, _platform, _cd, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this._cd = _cd;\n    this.ngControl = ngControl;\n    this.color = 'primary';\n    this.fileNames = null;\n    this._uid = `ngx-mat-fileinput-${nextUniqueId++}`;\n    this.stateChanges = new Subject();\n    this.focused = false;\n    this.controlType = 'ngx-mat-file-input';\n    this.autofilled = false;\n    /** Function when touched */\n\n    this._onTouched = () => {};\n    /** Function when changed */\n\n\n    this._onChange = () => {};\n\n    this._disabled = false;\n    this._multiple = false;\n    this.placeholder = 'Choose a file';\n    this.separator = ',';\n    this._required = false;\n    this._readonly = true;\n    this.id = this.id;\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  get disabled() {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(value) {\n    this._id = value || this._uid;\n  }\n\n  get multiple() {\n    return this._multiple;\n  }\n\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  get required() {\n    return this._required;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = value;\n  }\n\n  get readonly() {\n    return this._readonly;\n  }\n\n  set readonly(value) {\n    this._readonly = coerceBooleanProperty(value);\n  }\n  /**\r\n   * Limiting accepted file types\r\n   * Example: accept=\"image/png, image/jpeg\" or accept=\".png, .jpg, .jpeg\" — Accept PNG or JPEG files.\r\n   */\n\n\n  get accept() {\n    return this._accept;\n  }\n\n  set accept(value) {\n    this._accept = value;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  } // Implemented as part of ControlValueAccessor.\n\n\n  writeValue(value) {\n    this._updateInputValue(value);\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n  /** Focuses the input. */\n\n\n  focus(options) {\n    this._inputValueRef.nativeElement.focus(options);\n  }\n\n  _focusChanged(isFocused) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n  /** Mark the field as touched */\n\n\n  _markAsTouched() {\n    this._onTouched();\n\n    this._cd.markForCheck();\n\n    this.stateChanges.next();\n  }\n\n  _isBadInput() {\n    let validity = this._inputValueRef.nativeElement.validity;\n    return validity && validity.badInput;\n  }\n\n  get empty() {\n    return !this._inputValueRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n  }\n\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  openFilePicker(event) {\n    this._inputFileRef.nativeElement.click();\n\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    this._markAsTouched();\n  }\n\n  handleFiles(filelist) {\n    if (filelist.length > 0) {\n      const files = new Array();\n\n      for (let i = 0; i < filelist.length; i++) {\n        files.push(filelist.item(i));\n      }\n\n      this._updateInputValue(files);\n\n      this._resetInputFile();\n\n      this._onChange(this.multiple ? files : files[0]);\n    }\n  }\n  /** Handles a click on the control's container. */\n\n\n  onContainerClick(event) {}\n\n  _resetInputFile() {\n    this._inputFileRef.nativeElement.value = \"\";\n  }\n\n  _updateInputValue(files) {\n    let text = null;\n\n    if (files) {\n      if (Array.isArray(files)) {\n        text = this._multiple ? files.map(x => x.name).join(this.separator) : files[0].name;\n      } else {\n        text = files.name != null ? files.name : null;\n      }\n    }\n\n    this._inputValueRef.nativeElement.value = text;\n  }\n\n}\n/** @nocollapse */\n\n\nNgxMatFileInputComponent.ɵfac = function NgxMatFileInputComponent_Factory(t) {\n  return new (t || NgxMatFileInputComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.NgControl, 10), i0.ɵɵdirectiveInject(i2.NgForm, 8), i0.ɵɵdirectiveInject(i2.FormGroupDirective, 8), i0.ɵɵdirectiveInject(i3.ErrorStateMatcher));\n};\n/** @nocollapse */\n\n\nNgxMatFileInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatFileInputComponent,\n  selectors: [[\"ngx-mat-file-input\"]],\n  contentQueries: function NgxMatFileInputComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, NgxMatFileInputIcon, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._customIcon = _t.first);\n    }\n  },\n  viewQuery: function NgxMatFileInputComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n      i0.ɵɵviewQuery(_c1, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputFileRef = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputValueRef = _t.first);\n    }\n  },\n  hostAttrs: [1, \"ngx-mat-file-input\"],\n  inputs: {\n    color: \"color\",\n    disabled: \"disabled\",\n    id: \"id\",\n    multiple: \"multiple\",\n    placeholder: \"placeholder\",\n    separator: \"separator\",\n    required: \"required\",\n    errorStateMatcher: \"errorStateMatcher\",\n    value: \"value\",\n    readonly: \"readonly\",\n    accept: \"accept\"\n  },\n  exportAs: [\"ngx-mat-file-input\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: forwardRef(() => NgxMatFileInputComponent)\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c3,\n  decls: 8,\n  vars: 13,\n  consts: [[\"autocomplete\", \"off\", 1, \"mat-input-element\", \"mat-form-field-autofill-control\", 3, \"disabled\", \"required\"], [\"inputValue\", \"\"], [1, \"mat-form-field-suffix\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"type\", \"button\", 1, \"button-browse\", 3, \"color\", \"disabled\", \"click\"], [\"class\", \"ngx-mat-file-input--default-icon\", 4, \"ngIf\"], [\"type\", \"file\", 1, \"input-file\", 3, \"multiple\", \"accept\", \"change\"], [\"inputFile\", \"\"], [1, \"ngx-mat-file-input--default-icon\"]],\n  template: function NgxMatFileInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵelement(0, \"input\", 0, 1);\n      i0.ɵɵelementStart(2, \"div\", 2)(3, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function NgxMatFileInputComponent_Template_button_click_3_listener($event) {\n        return ctx.openFilePicker($event);\n      });\n      i0.ɵɵtemplate(4, NgxMatFileInputComponent_mat_icon_4_Template, 2, 0, \"mat-icon\", 4);\n      i0.ɵɵprojection(5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"input\", 5, 6);\n      i0.ɵɵlistener(\"change\", function NgxMatFileInputComponent_Template_input_change_6_listener($event) {\n        return ctx.handleFiles($event.target.files);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n      i0.ɵɵattribute(\"id\", ctx.id)(\"placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly || null)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"color\", ctx.color)(\"disabled\", ctx.disabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx._customIcon);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"multiple\", ctx.multiple)(\"accept\", ctx.accept);\n    }\n  },\n  dependencies: [i4.NgIf, i5.MatButton, i6.MatIcon, i7.MatSuffix],\n  styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}\\n\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatFileInputComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-file-input',\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'ngx-mat-file-input'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: forwardRef(() => NgxMatFileInputComponent)\n      }],\n      exportAs: 'ngx-mat-file-input',\n      template: \"<input #inputValue autocomplete=\\\"off\\\" class=\\\"mat-input-element mat-form-field-autofill-control\\\" [attr.id]='id'\\r\\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\\r\\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\\r\\n  [attr.aria-required]='required.toString()'>\\r\\n<div class=\\\"mat-form-field-suffix\\\">\\r\\n  <button matSuffix mat-icon-button [color]=\\\"color\\\" class=\\\"button-browse\\\"  (click)=\\\"openFilePicker($event)\\\" type=\\\"button\\\"\\r\\n   [disabled]=\\\"disabled\\\">\\r\\n    <mat-icon *ngIf=\\\"!_customIcon\\\" class=\\\"ngx-mat-file-input--default-icon\\\">attach_file</mat-icon>\\r\\n    <ng-content select=\\\"[ngxMatFileInputIcon]\\\"></ng-content>\\r\\n  </button>\\r\\n</div>\\r\\n<input type=\\\"file\\\" #inputFile (change)=\\\"handleFiles($event.target.files)\\\" class=\\\"input-file\\\"\\r\\n  [multiple]=\\\"multiple\\\" [accept]=\\\"accept\\\">\",\n      styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.Platform\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: i2.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.ErrorStateMatcher\n    }];\n  }, {\n    _inputFileRef: [{\n      type: ViewChild,\n      args: ['inputFile', {\n        static: true\n      }]\n    }],\n    _inputValueRef: [{\n      type: ViewChild,\n      args: ['inputValue', {\n        static: true\n      }]\n    }],\n    _customIcon: [{\n      type: ContentChild,\n      args: [NgxMatFileInputIcon]\n    }],\n    color: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    separator: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    accept: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NgxMatFileInputModule {}\n/** @nocollapse */\n\n\nNgxMatFileInputModule.ɵfac = function NgxMatFileInputModule_Factory(t) {\n  return new (t || NgxMatFileInputModule)();\n};\n/** @nocollapse */\n\n\nNgxMatFileInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMatFileInputModule\n});\n/** @nocollapse */\n\nNgxMatFileInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule, MatButtonModule, MatIconModule, MatFormFieldModule, MatInputModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatFileInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxMatFileInputComponent, NgxMatFileInputIcon],\n      imports: [CommonModule, MatButtonModule, MatIconModule, MatFormFieldModule, MatInputModule],\n      exports: [NgxMatFileInputComponent, NgxMatFileInputIcon]\n    }]\n  }], null, null);\n})();\n\nfunction calculFileSize(number) {\n  if (number < 1024) {\n    return number + 'bytes';\n  } else if (number >= 1024 && number < 1048576) {\n    return (number / 1024).toFixed(1) + 'KB';\n  } else if (number >= 1048576) {\n    return (number / 1048576).toFixed(1) + 'MB';\n  }\n}\n/**\r\n * Validator for size of file\r\n * @param max Max of size of file (in bytes)\r\n */\n\n\nfunction MaxSizeValidator(max) {\n  return ctrl => {\n    max = Number(max);\n\n    if (isNaN(max)) {\n      throw 'MaxSizeValidator: max of size of file is invalid';\n    }\n\n    if (!ctrl.value) return null;\n    let files = ctrl.value;\n\n    if (!Array.isArray(ctrl.value)) {\n      files = [ctrl.value];\n    }\n\n    if (!files.length) return null;\n\n    const add = (a, b) => a + b;\n\n    const sumSize = files.map(x => x.size).reduce(add);\n\n    if (sumSize > max) {\n      return {\n        maxSize: true\n      };\n    }\n\n    return null;\n  };\n}\n/**\r\n *\r\n * @param accept Allowable type of file\r\n */\n\n\nfunction AcceptValidator(accept) {\n  return ctrl => {\n    if (!accept) {\n      throw 'AcceptValidator: allowable type of file can not be empty';\n    }\n\n    if (ctrl.value == null) return null;\n\n    if (!accept.includes(ctrl.value.type)) {\n      return {\n        accept: true\n      };\n    }\n\n    return null;\n  };\n}\n/*\r\n * Public API Surface of file-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { AcceptValidator, MaxSizeValidator, NgxMatFileInputComponent, NgxMatFileInputIcon, NgxMatFileInputModule, calculFileSize };","map":{"version":3,"names":["coerceBooleanProperty","i0","Directive","forwardRef","Component","ViewEncapsulation","Optional","Self","ViewChild","ContentChild","Input","NgModule","i3","mixinErrorState","i7","MatFormFieldControl","MatFormFieldModule","Subject","i1","i2","i4","CommonModule","i5","MatButtonModule","i6","MatIconModule","MatInputModule","nextUniqueId","_NgxMatInputMixinBase","constructor","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","NgxMatFileInputIcon","ɵfac","ɵdir","type","args","selector","NgxMatFileInputComponent","_elementRef","_platform","_cd","color","fileNames","_uid","focused","controlType","autofilled","_onTouched","_onChange","_disabled","_multiple","placeholder","separator","_required","_readonly","id","valueAccessor","disabled","value","next","_id","multiple","required","_value","readonly","accept","_accept","ngOnChanges","ngOnDestroy","complete","ngDoCheck","updateErrorState","writeValue","_updateInputValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focus","options","_inputValueRef","nativeElement","_focusChanged","isFocused","_markAsTouched","markForCheck","_isBadInput","validity","badInput","empty","shouldLabelFloat","setDescribedByIds","ids","_ariaDescribedby","join","openFilePicker","event","_inputFileRef","click","preventDefault","stopPropagation","handleFiles","filelist","length","files","Array","i","push","item","_resetInputFile","onContainerClick","text","isArray","map","x","name","ElementRef","Platform","ChangeDetectorRef","NgControl","NgForm","FormGroupDirective","ErrorStateMatcher","ɵcmp","provide","useExisting","NgIf","MatButton","MatIcon","MatSuffix","encapsulation","None","host","providers","exportAs","template","styles","decorators","static","_customIcon","errorStateMatcher","NgxMatFileInputModule","ɵmod","ɵinj","declarations","imports","exports","calculFileSize","number","toFixed","MaxSizeValidator","max","ctrl","Number","isNaN","add","a","b","sumSize","size","reduce","maxSize","AcceptValidator","includes"],"sources":["C:/Users/High Tech Assistance/Desktop/e-learningProject__frontend - Copie/e-learningProject__frontend - Copie/frontend/node_modules/@angular-material-components/file-input/fesm2015/angular-material-components-file-input.mjs"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Directive, forwardRef, Component, ViewEncapsulation, Optional, Self, ViewChild, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState } from '@angular/material/core';\nimport * as i7 from '@angular/material/form-field';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i2 from '@angular/forms';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nlet nextUniqueId = 0;\r\nconst _NgxMatInputMixinBase = mixinErrorState(class {\r\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \r\n    /** @docs-private */\r\n    ngControl) {\r\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\r\n        this._parentForm = _parentForm;\r\n        this._parentFormGroup = _parentFormGroup;\r\n        this.ngControl = ngControl;\r\n        this.stateChanges = new Subject();\r\n    }\r\n});\r\nclass NgxMatFileInputIcon {\r\n}\r\n/** @nocollapse */ NgxMatFileInputIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatFileInputIcon, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ NgxMatFileInputIcon.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.5\", type: NgxMatFileInputIcon, selector: \"[ngxMatFileInputIcon]\", ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatFileInputIcon, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ngxMatFileInputIcon]'\r\n                }]\r\n        }] });\r\nclass NgxMatFileInputComponent extends _NgxMatInputMixinBase {\r\n    constructor(_elementRef, _platform, _cd, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {\r\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n        this._elementRef = _elementRef;\r\n        this._platform = _platform;\r\n        this._cd = _cd;\r\n        this.ngControl = ngControl;\r\n        this.color = 'primary';\r\n        this.fileNames = null;\r\n        this._uid = `ngx-mat-fileinput-${nextUniqueId++}`;\r\n        this.stateChanges = new Subject();\r\n        this.focused = false;\r\n        this.controlType = 'ngx-mat-file-input';\r\n        this.autofilled = false;\r\n        /** Function when touched */\r\n        this._onTouched = () => { };\r\n        /** Function when changed */\r\n        this._onChange = () => { };\r\n        this._disabled = false;\r\n        this._multiple = false;\r\n        this.placeholder = 'Choose a file';\r\n        this.separator = ',';\r\n        this._required = false;\r\n        this._readonly = true;\r\n        this.id = this.id;\r\n        if (this.ngControl) {\r\n            this.ngControl.valueAccessor = this;\r\n        }\r\n    }\r\n    get disabled() {\r\n        if (this.ngControl && this.ngControl.disabled !== null) {\r\n            return this.ngControl.disabled;\r\n        }\r\n        return this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        if (this.focused) {\r\n            this.focused = false;\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    get id() { return this._id; }\r\n    set id(value) { this._id = value || this._uid; }\r\n    get multiple() { return this._multiple; }\r\n    set multiple(value) {\r\n        this._multiple = coerceBooleanProperty(value);\r\n    }\r\n    get required() { return this._required; }\r\n    set required(value) { this._required = coerceBooleanProperty(value); }\r\n    get value() { return this._value; }\r\n    set value(value) {\r\n        this._value = value;\r\n    }\r\n    get readonly() { return this._readonly; }\r\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\r\n    /**\r\n     * Limiting accepted file types\r\n     * Example: accept=\"image/png, image/jpeg\" or accept=\".png, .jpg, .jpeg\" — Accept PNG or JPEG files.\r\n     */\r\n    get accept() { return this._accept; }\r\n    set accept(value) {\r\n        this._accept = value;\r\n    }\r\n    ngOnChanges() {\r\n        this.stateChanges.next();\r\n    }\r\n    ngOnDestroy() {\r\n        this.stateChanges.complete();\r\n    }\r\n    ngDoCheck() {\r\n        if (this.ngControl) {\r\n            this.updateErrorState();\r\n        }\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    writeValue(value) {\r\n        this._updateInputValue(value);\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n        this.stateChanges.next();\r\n    }\r\n    /** Focuses the input. */\r\n    focus(options) {\r\n        this._inputValueRef.nativeElement.focus(options);\r\n    }\r\n    _focusChanged(isFocused) {\r\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\r\n            this.focused = isFocused;\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    /** Mark the field as touched */\r\n    _markAsTouched() {\r\n        this._onTouched();\r\n        this._cd.markForCheck();\r\n        this.stateChanges.next();\r\n    }\r\n    _isBadInput() {\r\n        let validity = this._inputValueRef.nativeElement.validity;\r\n        return validity && validity.badInput;\r\n    }\r\n    get empty() {\r\n        return !this._inputValueRef.nativeElement.value && !this._isBadInput() &&\r\n            !this.autofilled;\r\n    }\r\n    get shouldLabelFloat() {\r\n        return this.focused || !this.empty;\r\n    }\r\n    setDescribedByIds(ids) {\r\n        this._ariaDescribedby = ids.join(' ');\r\n    }\r\n    openFilePicker(event) {\r\n        this._inputFileRef.nativeElement.click();\r\n        if (event) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        this._markAsTouched();\r\n    }\r\n    handleFiles(filelist) {\r\n        if (filelist.length > 0) {\r\n            const files = new Array();\r\n            for (let i = 0; i < filelist.length; i++) {\r\n                files.push(filelist.item(i));\r\n            }\r\n            this._updateInputValue(files);\r\n            this._resetInputFile();\r\n            this._onChange(this.multiple ? files : files[0]);\r\n        }\r\n    }\r\n    /** Handles a click on the control's container. */\r\n    onContainerClick(event) { }\r\n    ;\r\n    _resetInputFile() {\r\n        this._inputFileRef.nativeElement.value = \"\";\r\n    }\r\n    _updateInputValue(files) {\r\n        let text = null;\r\n        if (files) {\r\n            if (Array.isArray(files)) {\r\n                text = this._multiple\r\n                    ? files.map(x => x.name).join(this.separator)\r\n                    : files[0].name;\r\n            }\r\n            else {\r\n                text = files.name != null ? files.name : null;\r\n            }\r\n        }\r\n        this._inputValueRef.nativeElement.value = text;\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatFileInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatFileInputComponent, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i0.ChangeDetectorRef }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatFileInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.5\", type: NgxMatFileInputComponent, selector: \"ngx-mat-file-input\", inputs: { color: \"color\", disabled: \"disabled\", id: \"id\", multiple: \"multiple\", placeholder: \"placeholder\", separator: \"separator\", required: \"required\", errorStateMatcher: \"errorStateMatcher\", value: \"value\", readonly: \"readonly\", accept: \"accept\" }, host: { classAttribute: \"ngx-mat-file-input\" }, providers: [\r\n        { provide: MatFormFieldControl, useExisting: forwardRef((() => NgxMatFileInputComponent)) }\r\n    ], queries: [{ propertyName: \"_customIcon\", first: true, predicate: NgxMatFileInputIcon, descendants: true }], viewQueries: [{ propertyName: \"_inputFileRef\", first: true, predicate: [\"inputFile\"], descendants: true, static: true }, { propertyName: \"_inputValueRef\", first: true, predicate: [\"inputValue\"], descendants: true, static: true }], exportAs: [\"ngx-mat-file-input\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<input #inputValue autocomplete=\\\"off\\\" class=\\\"mat-input-element mat-form-field-autofill-control\\\" [attr.id]='id'\\r\\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\\r\\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\\r\\n  [attr.aria-required]='required.toString()'>\\r\\n<div class=\\\"mat-form-field-suffix\\\">\\r\\n  <button matSuffix mat-icon-button [color]=\\\"color\\\" class=\\\"button-browse\\\"  (click)=\\\"openFilePicker($event)\\\" type=\\\"button\\\"\\r\\n   [disabled]=\\\"disabled\\\">\\r\\n    <mat-icon *ngIf=\\\"!_customIcon\\\" class=\\\"ngx-mat-file-input--default-icon\\\">attach_file</mat-icon>\\r\\n    <ng-content select=\\\"[ngxMatFileInputIcon]\\\"></ng-content>\\r\\n  </button>\\r\\n</div>\\r\\n<input type=\\\"file\\\" #inputFile (change)=\\\"handleFiles($event.target.files)\\\" class=\\\"input-file\\\"\\r\\n  [multiple]=\\\"multiple\\\" [accept]=\\\"accept\\\">\", styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}\\n\"], dependencies: [{ kind: \"directive\", type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i6.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"directive\", type: i7.MatSuffix, selector: \"[matSuffix]\" }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatFileInputComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-file-input', encapsulation: ViewEncapsulation.None, host: {\r\n                        'class': 'ngx-mat-file-input'\r\n                    }, providers: [\r\n                        { provide: MatFormFieldControl, useExisting: forwardRef((() => NgxMatFileInputComponent)) }\r\n                    ], exportAs: 'ngx-mat-file-input', template: \"<input #inputValue autocomplete=\\\"off\\\" class=\\\"mat-input-element mat-form-field-autofill-control\\\" [attr.id]='id'\\r\\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\\r\\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\\r\\n  [attr.aria-required]='required.toString()'>\\r\\n<div class=\\\"mat-form-field-suffix\\\">\\r\\n  <button matSuffix mat-icon-button [color]=\\\"color\\\" class=\\\"button-browse\\\"  (click)=\\\"openFilePicker($event)\\\" type=\\\"button\\\"\\r\\n   [disabled]=\\\"disabled\\\">\\r\\n    <mat-icon *ngIf=\\\"!_customIcon\\\" class=\\\"ngx-mat-file-input--default-icon\\\">attach_file</mat-icon>\\r\\n    <ng-content select=\\\"[ngxMatFileInputIcon]\\\"></ng-content>\\r\\n  </button>\\r\\n</div>\\r\\n<input type=\\\"file\\\" #inputFile (change)=\\\"handleFiles($event.target.files)\\\" class=\\\"input-file\\\"\\r\\n  [multiple]=\\\"multiple\\\" [accept]=\\\"accept\\\">\", styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}\\n\"] }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i0.ChangeDetectorRef }, { type: i2.NgControl, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Self\r\n                    }] }, { type: i2.NgForm, decorators: [{\r\n                        type: Optional\r\n                    }] }, { type: i2.FormGroupDirective, decorators: [{\r\n                        type: Optional\r\n                    }] }, { type: i3.ErrorStateMatcher }];\r\n    }, propDecorators: { _inputFileRef: [{\r\n                type: ViewChild,\r\n                args: ['inputFile', { static: true }]\r\n            }], _inputValueRef: [{\r\n                type: ViewChild,\r\n                args: ['inputValue', { static: true }]\r\n            }], _customIcon: [{\r\n                type: ContentChild,\r\n                args: [NgxMatFileInputIcon]\r\n            }], color: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], id: [{\r\n                type: Input\r\n            }], multiple: [{\r\n                type: Input\r\n            }], placeholder: [{\r\n                type: Input\r\n            }], separator: [{\r\n                type: Input\r\n            }], required: [{\r\n                type: Input\r\n            }], errorStateMatcher: [{\r\n                type: Input\r\n            }], value: [{\r\n                type: Input\r\n            }], readonly: [{\r\n                type: Input\r\n            }], accept: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxMatFileInputModule {\r\n}\r\n/** @nocollapse */ NgxMatFileInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatFileInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxMatFileInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatFileInputModule, declarations: [NgxMatFileInputComponent,\r\n        NgxMatFileInputIcon], imports: [CommonModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatFormFieldModule,\r\n        MatInputModule], exports: [NgxMatFileInputComponent,\r\n        NgxMatFileInputIcon] });\r\n/** @nocollapse */ NgxMatFileInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatFileInputModule, imports: [CommonModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatFormFieldModule,\r\n        MatInputModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatFileInputModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NgxMatFileInputComponent,\r\n                        NgxMatFileInputIcon\r\n                    ],\r\n                    imports: [\r\n                        CommonModule,\r\n                        MatButtonModule,\r\n                        MatIconModule,\r\n                        MatFormFieldModule,\r\n                        MatInputModule\r\n                    ],\r\n                    exports: [\r\n                        NgxMatFileInputComponent,\r\n                        NgxMatFileInputIcon\r\n                    ]\r\n                }]\r\n        }] });\n\nfunction calculFileSize(number) {\r\n    if (number < 1024) {\r\n        return number + 'bytes';\r\n    }\r\n    else if (number >= 1024 && number < 1048576) {\r\n        return (number / 1024).toFixed(1) + 'KB';\r\n    }\r\n    else if (number >= 1048576) {\r\n        return (number / 1048576).toFixed(1) + 'MB';\r\n    }\r\n}\n\n/**\r\n * Validator for size of file\r\n * @param max Max of size of file (in bytes)\r\n */\r\nfunction MaxSizeValidator(max) {\r\n    return (ctrl) => {\r\n        max = Number(max);\r\n        if (isNaN(max)) {\r\n            throw 'MaxSizeValidator: max of size of file is invalid';\r\n        }\r\n        if (!ctrl.value)\r\n            return null;\r\n        let files = ctrl.value;\r\n        if (!Array.isArray(ctrl.value)) {\r\n            files = [ctrl.value];\r\n        }\r\n        if (!files.length)\r\n            return null;\r\n        const add = (a, b) => a + b;\r\n        const sumSize = files.map(x => x.size).reduce(add);\r\n        if (sumSize > max) {\r\n            return {\r\n                maxSize: true\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n}\n\n/**\r\n *\r\n * @param accept Allowable type of file\r\n */\r\nfunction AcceptValidator(accept) {\r\n    return (ctrl) => {\r\n        if (!accept) {\r\n            throw ('AcceptValidator: allowable type of file can not be empty');\r\n        }\r\n        if (ctrl.value == null)\r\n            return null;\r\n        if (!accept.includes(ctrl.value.type)) {\r\n            return {\r\n                accept: true\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n}\n\n/*\r\n * Public API Surface of file-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AcceptValidator, MaxSizeValidator, NgxMatFileInputComponent, NgxMatFileInputIcon, NgxMatFileInputModule, calculFileSize };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}