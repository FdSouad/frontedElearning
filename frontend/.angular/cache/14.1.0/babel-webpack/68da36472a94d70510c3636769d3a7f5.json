{"ast":null,"code":"import { Ajax, Browser, ChildProperty, Complex, Component, Draggable, Event, EventHandler, Internationalization, KeyboardEvents, L10n, NotifyPropertyChanges, Property, Touch, addClass, closest, createElement, detach, extend, formatUnit, getUniqueID, getValue, isNullOrUndefined, isVisible, matches, remove, removeClass, select, selectAll, setStyleAttribute, setValue } from '@syncfusion/ej2-base';\nimport { Splitter } from '@syncfusion/ej2-layouts';\nimport { Dialog, createSpinner, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { Input, TextBox, Uploader } from '@syncfusion/ej2-inputs';\nimport { CheckBox, createCheckBox } from '@syncfusion/ej2-buttons';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { DropDownButton } from '@syncfusion/ej2-splitbuttons';\nimport { ContextMenu, Toolbar, TreeView } from '@syncfusion/ej2-navigations';\nimport { ContextMenu as ContextMenu$1, Grid, Resize, Sort, VirtualScroll } from '@syncfusion/ej2-grids';\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Specifies the Ajax settings of the File Manager.\n */\n\n\nvar AjaxSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends(AjaxSettings, _super);\n\n  function AjaxSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(null)], AjaxSettings.prototype, \"downloadUrl\", void 0);\n\n  __decorate([Property(null)], AjaxSettings.prototype, \"getImageUrl\", void 0);\n\n  __decorate([Property(null)], AjaxSettings.prototype, \"uploadUrl\", void 0);\n\n  __decorate([Property(null)], AjaxSettings.prototype, \"url\", void 0);\n\n  return AjaxSettings;\n}(ChildProperty);\n\nvar __extends$1 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar toolbarItems = ['NewFolder', 'Upload', 'Cut', 'Copy', 'Paste', 'Delete', 'Download', 'Rename', 'SortBy', 'Refresh', 'Selection', 'View', 'Details'];\n/**\n * Specifies the Toolbar settings of the FileManager.\n */\n\nvar ToolbarSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$1(ToolbarSettings, _super);\n\n  function ToolbarSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$1([Property(toolbarItems)], ToolbarSettings.prototype, \"items\", void 0);\n\n  __decorate$1([Property(true)], ToolbarSettings.prototype, \"visible\", void 0);\n\n  return ToolbarSettings;\n}(ChildProperty);\n\nvar __extends$2 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Specifies the Search settings of the File Manager.\n */\n\n\nvar SearchSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$2(SearchSettings, _super);\n\n  function SearchSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$2([Property(true)], SearchSettings.prototype, \"allowSearchOnTyping\", void 0);\n\n  __decorate$2([Property('contains')], SearchSettings.prototype, \"filterType\", void 0);\n\n  __decorate$2([Property(true)], SearchSettings.prototype, \"ignoreCase\", void 0);\n\n  __decorate$2([Property(null)], SearchSettings.prototype, \"placeholder\", void 0);\n\n  return SearchSettings;\n}(ChildProperty);\n\nvar __extends$3 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Specifies the columns in the details view of the file manager.\n */\n\n\nvar columnArray = [{\n  field: 'name',\n  headerText: 'Name',\n  minWidth: 120,\n  template: '<span class=\"e-fe-text\">${name}</span>',\n  customAttributes: {\n    class: 'e-fe-grid-name'\n  }\n}, {\n  field: '_fm_modified',\n  headerText: 'DateModified',\n  type: 'dateTime',\n  format: 'MMMM dd, yyyy HH:mm',\n  minWidth: 120,\n  width: '190'\n}, {\n  field: 'size',\n  headerText: 'Size',\n  minWidth: 90,\n  width: '110',\n  template: '<span class=\"e-fe-size\">${size}</span>'\n}];\n/**\n * Specifies the grid settings of the File Manager.\n */\n\nvar DetailsViewSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$3(DetailsViewSettings, _super);\n\n  function DetailsViewSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$3([Property(true)], DetailsViewSettings.prototype, \"columnResizing\", void 0);\n\n  __decorate$3([Property(columnArray)], DetailsViewSettings.prototype, \"columns\", void 0);\n\n  return DetailsViewSettings;\n}(ChildProperty);\n\nvar __extends$4 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$4 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar fileItems = ['Open', '|', 'Cut', 'Copy', '|', 'Delete', 'Download', 'Rename', '|', 'Details'];\nvar folderItems = ['Open', '|', 'Cut', 'Copy', 'Paste', '|', 'Delete', 'Rename', 'Download', '|', 'Details'];\nvar layoutItems = ['SortBy', 'View', 'Refresh', '|', 'Paste', '|', 'NewFolder', 'Upload', '|', 'Details', '|', 'SelectAll'];\n/**\n * Specifies the ContextMenu settings of the File Manager.\n */\n\nvar ContextMenuSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$4(ContextMenuSettings, _super);\n\n  function ContextMenuSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$4([Property(fileItems)], ContextMenuSettings.prototype, \"file\", void 0);\n\n  __decorate$4([Property(folderItems)], ContextMenuSettings.prototype, \"folder\", void 0);\n\n  __decorate$4([Property(layoutItems)], ContextMenuSettings.prototype, \"layout\", void 0);\n\n  __decorate$4([Property(true)], ContextMenuSettings.prototype, \"visible\", void 0);\n\n  return ContextMenuSettings;\n}(ChildProperty);\n\nvar __extends$5 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$5 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Specifies the navigationpane settings of the File Manager.\n */\n\n\nvar NavigationPaneSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$5(NavigationPaneSettings, _super);\n\n  function NavigationPaneSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$5([Property('650px')], NavigationPaneSettings.prototype, \"maxWidth\", void 0);\n\n  __decorate$5([Property('240px')], NavigationPaneSettings.prototype, \"minWidth\", void 0);\n\n  __decorate$5([Property(true)], NavigationPaneSettings.prototype, \"visible\", void 0);\n\n  __decorate$5([Property('None')], NavigationPaneSettings.prototype, \"sortOrder\", void 0);\n\n  return NavigationPaneSettings;\n}(ChildProperty);\n\nvar __extends$6 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$6 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Specifies the Ajax settings of the File Manager.\n */\n\n\nvar UploadSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$6(UploadSettings, _super);\n\n  function UploadSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$6([Property('')], UploadSettings.prototype, \"allowedExtensions\", void 0);\n\n  __decorate$6([Property(true)], UploadSettings.prototype, \"autoUpload\", void 0);\n\n  __decorate$6([Property(false)], UploadSettings.prototype, \"autoClose\", void 0);\n\n  __decorate$6([Property(false)], UploadSettings.prototype, \"directoryUpload\", void 0);\n\n  __decorate$6([Property(0)], UploadSettings.prototype, \"minFileSize\", void 0);\n\n  __decorate$6([Property(30000000)], UploadSettings.prototype, \"maxFileSize\", void 0);\n\n  return UploadSettings;\n}(ChildProperty);\n\nvar __extends$7 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$7 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Interface for a class Column\n */\n\n/* istanbul ignore next */\n\n\nvar Column =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$7(Column, _super);\n\n  function Column() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$7([Property('')], Column.prototype, \"field\", void 0);\n\n  __decorate$7([Property('')], Column.prototype, \"headerText\", void 0);\n\n  __decorate$7([Property('')], Column.prototype, \"width\", void 0);\n\n  __decorate$7([Property('')], Column.prototype, \"minWidth\", void 0);\n\n  __decorate$7([Property('')], Column.prototype, \"maxWidth\", void 0);\n\n  __decorate$7([Property('Left')], Column.prototype, \"textAlign\", void 0);\n\n  __decorate$7([Property(null)], Column.prototype, \"headerTextAlign\", void 0);\n\n  __decorate$7([Property(null)], Column.prototype, \"type\", void 0);\n\n  __decorate$7([Property(null)], Column.prototype, \"format\", void 0);\n\n  __decorate$7([Property(null)], Column.prototype, \"template\", void 0);\n\n  __decorate$7([Property(null)], Column.prototype, \"headerTemplate\", void 0);\n\n  __decorate$7([Property(true)], Column.prototype, \"allowSorting\", void 0);\n\n  __decorate$7([Property(true)], Column.prototype, \"allowResizing\", void 0);\n\n  __decorate$7([Property(null)], Column.prototype, \"customAttributes\", void 0);\n\n  __decorate$7([Property('')], Column.prototype, \"hideAtMedia\", void 0);\n\n  __decorate$7([Property(null)], Column.prototype, \"customFormat\", void 0);\n\n  return Column;\n}(ChildProperty);\n/**\n * FileExplorer common modules\n */\n\n/**\n * Specifies the File Manager internal ID's\n */\n\n/** @hidden */\n\n\nvar TOOLBAR_ID = '_toolbar';\n/** @hidden */\n\nvar LAYOUT_ID = '_layout';\n/** @hidden */\n\nvar NAVIGATION_ID = '_navigation';\n/** @hidden */\n\nvar TREE_ID = '_tree';\n/** @hidden */\n\nvar GRID_ID = '_grid';\n/** @hidden */\n\nvar LARGEICON_ID = '_largeicons';\n/** @hidden */\n\nvar DIALOG_ID = '_dialog';\n/** @hidden */\n\nvar ALT_DIALOG_ID = '_alt_dialog';\n/** @hidden */\n\nvar IMG_DIALOG_ID = '_img_dialog';\n/** @hidden */\n\nvar EXTN_DIALOG_ID = '_extn_dialog';\n/** @hidden */\n\nvar UPLOAD_DIALOG_ID = '_upload_dialog';\n/** @hidden */\n\nvar RETRY_DIALOG_ID = '_retry_dialog';\n/** @hidden */\n\nvar CONTEXT_MENU_ID = '_contextmenu';\n/** @hidden */\n\nvar SORTBY_ID = '_sortby';\n/** @hidden */\n\nvar VIEW_ID = '_view';\n/** @hidden */\n\nvar SPLITTER_ID = '_splitter';\n/** @hidden */\n\nvar CONTENT_ID = '_content';\n/** @hidden */\n\nvar BREADCRUMBBAR_ID = '_breadcrumbbar';\n/** @hidden */\n\nvar UPLOAD_ID = '_upload';\n/** @hidden */\n\nvar RETRY_ID = '_retry';\n/** @hidden */\n\nvar SEARCH_ID = '_search';\n/**\n * Specifies the File Manager internal class names\n */\n\n/** @hidden */\n\nvar ROOT = 'e-filemanager';\n/** @hidden */\n\nvar CONTROL = 'e-control';\n/** @hidden */\n\nvar CHECK_SELECT = 'e-fe-cb-select';\n/** @hidden */\n\nvar ROOT_POPUP = 'e-fe-popup';\n/** @hidden */\n\nvar MOBILE = 'e-fe-mobile';\n/** @hidden */\n\nvar MOB_POPUP = 'e-fe-popup e-fe-mobile';\n/** @hidden */\n\nvar MULTI_SELECT = 'e-fe-m-select';\n/** @hidden */\n\nvar FILTER = 'e-fe-m-filter';\n/** @hidden */\n\nvar LAYOUT = 'e-layout';\n/** @hidden */\n\nvar NAVIGATION = 'e-navigation';\n/** @hidden */\n\nvar LAYOUT_CONTENT = 'e-layout-content';\n/** @hidden */\n\nvar LARGE_ICONS = 'e-large-icons';\n/** @hidden */\n\nvar TB_ITEM = 'e-toolbar-item';\n/** @hidden */\n\nvar LIST_ITEM = 'e-list-item';\n/** @hidden */\n\nvar LIST_TEXT = 'e-list-text';\n/** @hidden */\n\nvar LIST_PARENT = 'e-list-parent';\n/** @hidden */\n\nvar TB_OPTION_TICK = 'e-icons e-fe-tick';\n/** @hidden */\n\nvar TB_OPTION_DOT = 'e-icons e-fe-dot';\n/** @hidden */\n\nvar BLUR = 'e-blur';\n/** @hidden */\n\nvar ACTIVE = 'e-active';\n/** @hidden */\n\nvar HOVER = 'e-hover';\n/** @hidden */\n\nvar FOCUS = 'e-focus';\n/** @hidden */\n\nvar FOCUSED = 'e-focused';\n/** @hidden */\n\nvar CHECK = 'e-check';\n/** @hidden */\n\nvar FRAME = 'e-frame';\n/** @hidden */\n\nvar CB_WRAP = 'e-checkbox-wrapper';\n/** @hidden */\n\nvar ROW = 'e-row';\n/** @hidden */\n\nvar ROWCELL = 'e-rowcell';\n/** @hidden */\n\nvar EMPTY = 'e-empty';\n/** @hidden */\n\nvar EMPTY_CONTENT = 'e-empty-content';\n/** @hidden */\n\nvar EMPTY_INNER_CONTENT = 'e-empty-inner-content';\n/** @hidden */\n\nvar CLONE = 'e-fe-clone';\n/** @hidden */\n\nvar DROP_FOLDER = 'e-fe-drop-folder';\n/** @hidden */\n\nvar DROP_FILE = 'e-fe-drop-file';\n/** @hidden */\n\nvar FOLDER = 'e-fe-folder';\n/** @hidden */\n\nvar ICON_IMAGE = 'e-fe-image';\n/** @hidden */\n\nvar ICON_MUSIC = 'e-fe-music';\n/** @hidden */\n\nvar ICON_VIDEO = 'e-fe-video';\n/** @hidden */\n\nvar LARGE_ICON = 'e-large-icon';\n/** @hidden */\n\nvar LARGE_EMPTY_FOLDER = 'e-empty-icon e-fe-folder';\n/** @hidden */\n\nvar LARGE_EMPTY_FOLDER_TWO = 'e-empty-icon.e-fe-folder';\n/** @hidden */\n\nvar LARGE_ICON_FOLDER = 'e-fe-folder';\n/** @hidden */\n\nvar SELECTED_ITEMS = 'e-items';\n/** @hidden */\n\nvar TEXT_CONTENT = 'e-text-content';\n/** @hidden */\n\nvar GRID_HEADER = 'e-gridheader';\n/** @hidden */\n\nvar TEMPLATE_CELL = 'e-templatecell';\n/** @hidden */\n\nvar TREE_VIEW = 'e-treeview';\n/** @hidden */\n\nvar MENU_ITEM = 'e-menu-item';\n/** @hidden */\n\nvar MENU_ICON = 'e-menu-icon';\n/** @hidden */\n\nvar SUBMENU_ICON = 'e-caret';\n/** @hidden */\n\nvar GRID_VIEW = 'e-content';\n/** @hidden */\n\nvar GRID_CONTENT = 'e-gridcontent';\n/** @hidden */\n\nvar ICON_VIEW = 'e-list-parent';\n/** @hidden */\n\nvar ICON_OPEN = 'e-icons e-fe-open';\n/** @hidden */\n\nvar ICON_UPLOAD = 'e-icons e-fe-upload';\n/** @hidden */\n\nvar ICON_CUT = 'e-icons e-fe-cut';\n/** @hidden */\n\nvar ICON_COPY = 'e-icons e-fe-copy';\n/** @hidden */\n\nvar ICON_PASTE = 'e-icons e-fe-paste';\n/** @hidden */\n\nvar ICON_DELETE = 'e-icons e-fe-delete';\n/** @hidden */\n\nvar ICON_RENAME = 'e-icons e-fe-rename';\n/** @hidden */\n\nvar ICON_NEWFOLDER = 'e-icons e-fe-newfolder';\n/** @hidden */\n\nvar ICON_DETAILS = 'e-icons e-fe-details';\n/** @hidden */\n\nvar ICON_SHORTBY = 'e-icons e-fe-sort';\n/** @hidden */\n\nvar ICON_REFRESH = 'e-icons e-fe-refresh';\n/** @hidden */\n\nvar ICON_SELECTALL = 'e-icons e-fe-select';\n/** @hidden */\n\nvar ICON_DOWNLOAD = 'e-icons e-fe-download';\n/** @hidden */\n\nvar ICON_OPTIONS = 'e-icons e-fe-options';\n/** @hidden */\n\nvar ICON_GRID = 'e-icons e-fe-grid';\n/** @hidden */\n\nvar ICON_LARGE = 'e-icons e-fe-large';\n/** @hidden */\n\nvar ICON_BREADCRUMB = 'e-icons e-fe-breadcrumb';\n/** @hidden */\n\nvar ICON_CLEAR = 'e-icons e-fe-clear';\n/** @hidden */\n\nvar ICON_DROP_IN = 'e-icons e-fe-drop-in';\n/** @hidden */\n\nvar ICON_DROP_OUT = 'e-icons e-fe-drop-out';\n/** @hidden */\n\nvar ICON_NO_DROP = 'e-icons e-fe-no-drop';\n/** @hidden */\n\nvar ICONS = 'e-icons';\n/** @hidden */\n\nvar DETAILS_LABEL = 'e-detailslabel';\n/** @hidden */\n\nvar ERROR_CONTENT = 'e-fe-errorcontent';\n/** @hidden */\n\nvar STATUS = 'e-status';\n/** @hidden */\n\nvar BREADCRUMBS = 'e-address';\n/** @hidden */\n\nvar RTL = 'e-rtl';\n/** @hidden */\n\nvar DISPLAY_NONE = 'e-display-none';\n/** @hidden */\n\nvar COLLAPSED = 'e-node-collapsed';\n/** @hidden */\n\nvar FULLROW = 'e-fullrow';\n/** @hidden */\n\nvar ICON_COLLAPSIBLE = 'e-icon-collapsible';\n/** @hidden */\n\nvar SPLIT_BAR = 'e-split-bar';\n/** @hidden */\n\nvar HEADER_CHECK = 'e-headercheck';\n/** @hidden */\n\nvar OVERLAY = 'e-fe-overlay';\n/** @hidden */\n\nvar VALUE = 'e-fe-value';\n/**\n * Specifies the File Manager internal variables\n */\n\n/** @hidden */\n\nvar isFile = 'isFile';\n/**\n * Specifies the File Manager internal events\n */\n\n/** @hidden */\n\nvar modelChanged = 'model-changed';\n/** @hidden */\n\nvar initialEnd = 'initial-end';\n/** @hidden */\n\nvar finalizeEnd = 'finalize-end';\n/** @hidden */\n\nvar createEnd = 'create-end';\n/** @hidden */\n\nvar filterEnd = 'filter-end';\n/** @hidden */\n\nvar beforeDelete = 'before-delete';\n/** @hidden */\n\nvar pathDrag = 'path-drag';\n/** @hidden */\n\nvar deleteInit = 'delete-init';\n/** @hidden */\n\nvar deleteEnd = 'delete-end';\n/** @hidden */\n\nvar refreshEnd = 'refresh-end';\n/** @hidden */\n\nvar resizeEnd = 'resize-end';\n/** @hidden */\n\nvar splitterResize = 'splitter-resize';\n/** @hidden */\n\nvar pathChanged = 'path-changed';\n/** @hidden */\n\nvar destroy = 'destroy';\n/** @hidden */\n\nvar beforeRequest = 'before-request';\n/** @hidden */\n\nvar upload = 'upload';\n/** @hidden */\n\nvar skipUpload = 'skip-upload';\n/** @hidden */\n\nvar afterRequest = 'after-request';\n/** @hidden */\n\nvar download = 'download';\n/** @hidden */\n\nvar layoutRefresh = 'layout-refresh';\n/** @hidden */\n\nvar actionFailure = 'actionFailure';\n/** @hidden */\n\nvar search = 'search';\n/** @hidden */\n\nvar openInit = 'open-init';\n/** @hidden */\n\nvar openEnd = 'open-end';\n/** @hidden */\n\nvar selectionChanged = 'selection-changed';\n/** @hidden */\n\nvar selectAllInit = 'select-all-init';\n/** @hidden */\n\nvar clearAllInit = 'clear-all-init';\n/** @hidden */\n\nvar clearPathInit = 'clear-path-init';\n/** @hidden */\n\nvar layoutChange = 'layout-change';\n/** @hidden */\n\nvar sortByChange = 'sort-by-change';\n/** @hidden */\n\nvar nodeExpand = 'node-expand';\n/** @hidden */\n\nvar detailsInit = 'details-init';\n/** @hidden */\n\nvar menuItemData = 'menu-item-data';\n/** @hidden */\n\nvar renameInit = 'rename-init';\n/** @hidden */\n\nvar renameEndParent = 'rename-end-parent';\n/** @hidden */\n\nvar renameEnd = 'rename-end';\n/** @hidden */\n\nvar showPaste = 'show-paste';\n/** @hidden */\n\nvar hidePaste = 'hide-paste';\n/** @hidden */\n\nvar selectedData = 'selected-data';\n/** @hidden */\n\nvar cutCopyInit = 'cut-copy-init';\n/** @hidden */\n\nvar pasteInit = 'paste-init';\n/** @hidden */\n\nvar pasteEnd = 'paste-end';\n/** @hidden */\n\nvar cutEnd = 'cut-end';\n/** @hidden */\n\nvar hideLayout = 'hide-layout';\n/** @hidden */\n\nvar updateTreeSelection = 'update-tree-selection';\n/** @hidden */\n\nvar treeSelect = 'select-node';\n/** @hidden */\n\nvar sortColumn = 'sort-column';\n/** @hidden */\n\nvar pathColumn = 'path-column';\n/** @hidden */\n\nvar searchTextChange = 'search-change';\n/** @hidden */\n\nvar beforeDownload = 'before-download';\n/** @hidden */\n\nvar downloadInit = 'download-init';\n/** @hidden */\n\nvar dropInit = 'drop-init';\n/** @hidden */\n\nvar dragEnd = 'drag-end';\n/** @hidden */\n\nvar dropPath = 'drop-path';\n/** @hidden */\n\nvar dragHelper = 'drag-helper';\n/** @hidden */\n\nvar dragging = 'dragging';\n/** @hidden */\n\nvar updateSelectionData = 'update-selection-data';\n/** @hidden */\n\nvar methodCall = 'method-call';\n/** @hidden */\n\nvar permissionRead = 'read';\n/** @hidden */\n\nvar permissionEdit = 'write';\n/** @hidden */\n\nvar permissionEditContents = 'writeContents';\n/** @hidden */\n\nvar permissionCopy = 'copy';\n/** @hidden */\n\nvar permissionUpload = 'upload';\n/** @hidden */\n\nvar permissionDownload = 'download';\n/**\n * Utility file for common actions\n *\n * @param {HTMLLIElement} node - specifies the node.\n * @param {Object} data - specifies the data.\n * @param {IFileManager} instance - specifies the control instance.\n * @returns {void}\n * @private\n */\n// eslint-disable-next-line\n\nfunction updatePath(node, data, instance) {\n  var text = getValue('name', data);\n  var id = node.getAttribute('data-id');\n  var newText = isNullOrUndefined(id) ? text : id;\n  instance.setProperties({\n    path: getPath(node, newText, instance.hasId)\n  }, true);\n  instance.pathId = getPathId(node);\n  instance.pathNames = getPathNames(node, text);\n}\n/**\n * Functions for get path in FileManager\n *\n * @param {Element | Node} element - specifies the element.\n * @param {string} text - specifies the text.\n * @param {boolean} hasId - specifies the id.\n * @returns {string} returns the path.\n * @private\n */\n\n\nfunction getPath(element, text, hasId) {\n  var matched = getParents(element, text, false, hasId);\n  var path = hasId ? '' : '/';\n  var len = matched.length - (hasId ? 1 : 2);\n\n  for (var i = len; i >= 0; i--) {\n    path += matched[i] + '/';\n  }\n\n  return path;\n}\n/**\n * Functions for get path id in FileManager\n *\n * @param {Element} node - specifies the node element.\n * @returns {string[]} returns the path ids.\n * @private\n */\n\n\nfunction getPathId(node) {\n  var matched = getParents(node, node.getAttribute('data-uid'), true);\n  var ids = [];\n\n  for (var i = matched.length - 1; i >= 0; i--) {\n    ids.push(matched[i]);\n  }\n\n  return ids;\n}\n/**\n * Functions for get path names in FileManager\n *\n * @param {Element} element - specifies the node element.\n * @param {string} text - specifies the text.\n * @returns {string[]} returns the path names.\n * @private\n */\n\n\nfunction getPathNames(element, text) {\n  var matched = getParents(element, text, false);\n  var names = [];\n\n  for (var i = matched.length - 1; i >= 0; i--) {\n    names.push(matched[i]);\n  }\n\n  return names;\n}\n/**\n * Functions for get path id in FileManager\n *\n * @param {Element} element - specifies the node element.\n * @param {string} text - specifies the text.\n * @param {boolean} isId - specifies the id.\n * @param {boolean} hasId - checks the id exists.\n * @returns {string[]} returns parent element.\n * @private\n */\n\n\nfunction getParents(element, text, isId, hasId) {\n  var matched = [text];\n  var el = element.parentNode;\n\n  while (!isNullOrUndefined(el)) {\n    if (matches(el, '.' + LIST_ITEM)) {\n      var parentText = isId ? el.getAttribute('data-uid') : hasId ? el.getAttribute('data-id') : select('.' + LIST_TEXT, el).textContent;\n      matched.push(parentText);\n    }\n\n    el = el.parentNode;\n\n    if (el.classList.contains(TREE_VIEW)) {\n      break;\n    }\n  }\n\n  return matched;\n}\n/**\n * Functions for generate path\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction generatePath(parent) {\n  var key = parent.hasId ? 'id' : 'name';\n  var newPath = parent.hasId ? '' : '/';\n  var i = parent.hasId ? 0 : 1;\n\n  for (i; i < parent.pathId.length; i++) {\n    // eslint-disable-next-line\n    var data = getValue(parent.pathId[i], parent.feParent);\n    newPath += getValue(key, data) + '/';\n  }\n\n  parent.setProperties({\n    path: newPath\n  }, true);\n}\n/**\n * Functions for remove active element\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction removeActive(parent) {\n  if (parent.isCut) {\n    removeBlur(parent);\n    parent.selectedNodes = [];\n    parent.actionRecords = [];\n    parent.enablePaste = false;\n    parent.notify(hidePaste, {});\n  }\n}\n/**\n * Selects active element in File Manager\n *\n * @param {string} action - specifies the action.\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {boolean} - returns active element.\n * @private\n */\n\n\nfunction activeElement(action, parent) {\n  parent.isSearchCut = false;\n  parent.actionRecords = [];\n  parent.activeElements = [];\n  parent.notify(cutCopyInit, {});\n\n  if (parent.activeElements.length === 0) {\n    return false;\n  }\n\n  removeBlur(parent);\n  var blurEle = parent.activeElements;\n\n  if (parent.activeModule !== 'navigationpane') {\n    parent.targetPath = parent.path;\n  } else {\n    parent.targetPath = getParentPath(parent.path);\n  }\n\n  var i = 0;\n\n  if (blurEle) {\n    getModule(parent, blurEle[0]);\n\n    if (action === 'cut') {\n      while (i < blurEle.length) {\n        addBlur(blurEle[i]);\n        i++;\n      }\n    }\n  }\n\n  i = 0;\n  parent.selectedNodes = [];\n  parent.enablePaste = true;\n  parent.notify(showPaste, {});\n\n  while (i < parent.activeRecords.length) {\n    parent.actionRecords.push(parent.activeRecords[i]);\n    parent.selectedNodes.push(getValue('name', parent.activeRecords[i]));\n    i++;\n  }\n\n  if ((parent.breadcrumbbarModule.searchObj.element.value !== '' || parent.isFiltered) && parent.activeModule !== 'navigationpane') {\n    parent.selectedNodes = [];\n    parent.isSearchCut = true;\n    var i_1 = 0;\n\n    while (i_1 < parent.selectedItems.length) {\n      parent.selectedNodes.push(parent.selectedItems[i_1]);\n      i_1++;\n    }\n  }\n\n  return true;\n}\n/**\n * Adds blur to the elements\n *\n * @param {Element} nodes - specifies the nodes.\n * @returns {void}\n * @private\n */\n\n\nfunction addBlur(nodes) {\n  nodes.classList.add(BLUR);\n}\n/**\n * Removes blur from elements\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} hover - specifies the hover string.\n * @returns {void}\n * @private\n */\n\n\nfunction removeBlur(parent, hover) {\n  var blurEle = !hover ? parent.element.querySelectorAll('.' + BLUR) : parent.element.querySelectorAll('.' + HOVER);\n  var i = 0;\n\n  while (i < blurEle.length) {\n    blurEle[i].classList.remove(!hover ? BLUR : HOVER);\n    i++;\n  }\n}\n/**\n * Gets module name\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {Element} element - specifies the element.\n * @returns {void}\n * @private\n */\n\n\nfunction getModule(parent, element) {\n  if (element) {\n    if (element.classList.contains(ROW)) {\n      parent.activeModule = 'detailsview';\n    } else if (closest(element, '.' + LARGE_ICON)) {\n      parent.activeModule = 'largeiconsview';\n    } else {\n      parent.activeModule = 'navigationpane';\n    }\n  }\n}\n/**\n * Gets module name\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} value - specifies the value.\n * @param {boolean} isLayoutChange - specifies the layout change.\n * @returns {void}\n * @private\n */\n\n\nfunction searchWordHandler(parent, value, isLayoutChange) {\n  var searchWord;\n\n  if (value.length === 0 && !parent.isFiltered) {\n    parent.notify(pathColumn, {\n      args: parent\n    });\n  }\n\n  if (parent.searchSettings.filterType === 'startsWith') {\n    searchWord = value + '*';\n  } else if (parent.searchSettings.filterType === 'endsWith') {\n    searchWord = '*' + value;\n  } else {\n    searchWord = '*' + value + '*';\n  }\n\n  parent.searchWord = searchWord;\n  parent.itemData = [getPathObject(parent)];\n\n  if (value.length > 0) {\n    var caseSensitive = parent.searchSettings.ignoreCase;\n    var hiddenItems = parent.showHiddenItems;\n    Search(parent, isLayoutChange ? layoutChange : search, parent.path, searchWord, hiddenItems, !caseSensitive);\n  } else {\n    if (!parent.isFiltered) {\n      if (parent.isSortByClicked) {\n        parent.notify(layoutChange, {\n          files: parent.oldView === 'Details' ? parent.detailsviewModule.gridObj.dataSource : parent.largeiconsviewModule.items\n        });\n        parent.isSortByClicked = false;\n      } else {\n        read(parent, isLayoutChange ? layoutChange : search, parent.path);\n      }\n    } else {\n      filter(parent, layoutChange);\n    }\n  }\n}\n/**\n * Gets updated layout\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} view - specifies the view.\n * @returns {void}\n * @private\n */\n\n\nfunction updateLayout(parent, view) {\n  parent.oldView = parent.view;\n  parent.setProperties({\n    view: view\n  }, true);\n\n  if (parent.breadcrumbbarModule.searchObj.element.value !== '' || parent.isFiltered) {\n    parent.layoutSelectedItems = parent.selectedItems;\n  }\n\n  var searchWord = '';\n\n  if (parent.breadcrumbbarModule.searchObj.element.value) {\n    searchWord = parent.breadcrumbbarModule.searchObj.element.value;\n  }\n\n  parent.isLayoutChange = true;\n  searchWordHandler(parent, searchWord, true);\n}\n/* istanbul ignore next */\n\n/**\n * Gets updated layout\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {Element} element - specifies the element.\n * @returns {void}\n * @private\n */\n\n\nfunction getTargetModule(parent, element) {\n  var tartgetModule = '';\n\n  if (element) {\n    if (closest(element, '.' + ROOT + '.' + CONTROL + ' .' + GRID_CONTENT)) {\n      tartgetModule = 'detailsview';\n    } else if (closest(element, '.' + LARGE_ICONS)) {\n      tartgetModule = 'largeiconsview';\n    } else if (element.classList.contains('e-fullrow') || element.classList.contains('e-icon-expandable')) {\n      tartgetModule = 'navigationpane';\n    } else if (closest(element, '.e-address-list-item')) {\n      tartgetModule = 'breadcrumbbar';\n    } else {\n      tartgetModule = '';\n    }\n  }\n\n  parent.targetModule = tartgetModule;\n}\n/* istanbul ignore next */\n\n/**\n * refresh the layout\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction refresh(parent) {\n  parent.itemData = [getPathObject(parent)];\n\n  if (!hasReadAccess(parent.itemData[0])) {\n    createDeniedDialog(parent, parent.itemData[0], permissionRead);\n  } else {\n    read(parent, refreshEnd, parent.path);\n  }\n}\n/**\n * open action in the layout\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction openAction(parent) {\n  read(parent, openEnd, parent.path);\n}\n/**\n * open action in the layout\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {Object} - returns the path data.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction getPathObject(parent) {\n  return getValue(parent.pathId[parent.pathId.length - 1], parent.feParent);\n}\n/**\n * Copy files\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction copyFiles(parent) {\n  if (!activeElement('copy', parent)) {\n    return;\n  } else {\n    parent.fileAction = 'copy';\n  }\n}\n/**\n * Cut files\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction cutFiles(parent) {\n  if (!activeElement('cut', parent)) {\n    return;\n  } else {\n    parent.isCut = true;\n    parent.fileAction = 'move';\n  }\n}\n/**\n * To add class for fileType\n *\n * @param {Object} file - specifies the file.\n * @returns {string} - returns the file type.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction fileType(file) {\n  var isFile$$1 = getValue('isFile', file);\n\n  if (!isFile$$1) {\n    return FOLDER;\n  }\n\n  var imageFormat = ['bmp', 'dib', 'jpg', 'jpeg', 'jpe', 'jfif', 'gif', 'tif', 'tiff', 'png', 'ico'];\n  var audioFormat = ['mp3', 'wav', 'aac', 'ogg', 'wma', 'aif', 'fla', 'm4a'];\n  var videoFormat = ['webm', 'mkv', 'flv', 'vob', 'ogv', 'ogg', 'avi', 'wmv', 'mp4', '3gp'];\n  var knownFormat = ['css', 'exe', 'html', 'js', 'msi', 'pdf', 'pptx', 'ppt', 'rar', 'zip', 'txt', 'docx', 'doc', 'xlsx', 'xls', 'xml', 'rtf', 'php'];\n  var filetype = getValue('type', file);\n  filetype = filetype.toLowerCase();\n\n  if (filetype.indexOf('.') !== -1) {\n    filetype = filetype.split('.').join('');\n  }\n\n  var iconType;\n\n  if (imageFormat.indexOf(filetype) !== -1) {\n    iconType = ICON_IMAGE;\n  } else if (audioFormat.indexOf(filetype) !== -1) {\n    iconType = ICON_MUSIC;\n  } else if (videoFormat.indexOf(filetype) !== -1) {\n    iconType = ICON_VIDEO;\n  } else if (knownFormat.indexOf(filetype) !== -1) {\n    iconType = 'e-fe-' + filetype;\n  } else {\n    iconType = 'e-fe-unknown e-fe-' + filetype;\n  }\n\n  return iconType;\n}\n/* istanbul ignore next */\n\n/**\n * To get the image URL\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {Object} item - specifies the item.\n * @returns {string} - returns the image url.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction getImageUrl(parent, item) {\n  var baseUrl = parent.ajaxSettings.getImageUrl ? parent.ajaxSettings.getImageUrl : parent.ajaxSettings.url;\n  var imgUrl;\n  var fileName = encodeURIComponent(getValue('name', item));\n  var fPath = getValue('filterPath', item);\n\n  if (parent.hasId) {\n    var imgId = getValue('id', item);\n    imgUrl = baseUrl + '?path=' + parent.path + '&id=' + imgId;\n  } else if (!isNullOrUndefined(fPath)) {\n    imgUrl = baseUrl + '?path=' + encodeURIComponent(fPath.replace(/\\\\/g, '/')) + fileName;\n  } else {\n    imgUrl = baseUrl + '?path=' + parent.path + fileName;\n  }\n\n  imgUrl = imgUrl + '&time=' + new Date().getTime().toString();\n  var eventArgs = {\n    fileDetails: [item],\n    imageUrl: imgUrl\n  };\n  parent.trigger('beforeImageLoad', eventArgs);\n  return eventArgs.imageUrl;\n}\n/* istanbul ignore next */\n\n/**\n * Gets the full path\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {Object} data - specifies the data.\n * @param {string} path - specifies the path.\n * @returns {string} - returns the image url.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction getFullPath(parent, data, path) {\n  var filePath = getValue(parent.hasId ? 'id' : 'name', data) + '/';\n  var fPath = getValue(parent.hasId ? 'filterId' : 'filterPath', data);\n\n  if (!isNullOrUndefined(fPath)) {\n    return fPath.replace(/\\\\/g, '/') + filePath;\n  } else {\n    return path + filePath;\n  }\n}\n/**\n * Gets the name\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {Object} data - specifies the data.\n * @returns {string} - returns the name.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction getName(parent, data) {\n  var name = getValue('name', data);\n  var fPath = getValue('filterPath', data);\n\n  if ((parent.breadcrumbbarModule.searchObj.element.value !== '' || parent.isFiltered) && !isNullOrUndefined(fPath)) {\n    fPath = fPath.replace(/\\\\/g, '/');\n    name = fPath.replace(parent.path, '') + name;\n  }\n\n  return name;\n}\n/**\n * Gets the name\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {Object[]} items - specifies the item elements.\n * @returns {Object[]} - returns the sorted data.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction getSortedData(parent, items) {\n  if (items.length === 0) {\n    return items;\n  }\n\n  var query;\n\n  if (parent.sortOrder !== 'None') {\n    query = new Query().sortBy(parent.sortBy, parent.sortOrder.toLowerCase(), true).group('isFile');\n  } else {\n    query = new Query().group('isFile');\n  } // eslint-disable-next-line\n\n\n  var lists = new DataManager(items).executeLocal(query);\n  return getValue('records', lists);\n}\n/**\n * Gets the data object\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} key - specifies the key.\n * @param {string} value - specifies the value.\n * @returns {Object} - returns the sorted data.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction getObject(parent, key, value) {\n  // eslint-disable-next-line\n  var currFiles = getValue(parent.pathId[parent.pathId.length - 1], parent.feFiles);\n  var query = new Query().where(key, 'equal', value); // eslint-disable-next-line\n\n  var lists = new DataManager(currFiles).executeLocal(query);\n  return lists[0];\n}\n/**\n * Creates empty element\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {HTMLElement} element - specifies the element.\n * @param {ReadArgs | SearchArgs} args - specifies the args.\n * @returns {void}\n * @private\n */\n\n\nfunction createEmptyElement(parent, element, args) {\n  var top;\n  var layoutElement = select('#' + parent.element.id + LAYOUT_ID, parent.element);\n  var addressBarHeight = select('#' + parent.element.id + BREADCRUMBBAR_ID, layoutElement).offsetHeight;\n  top = layoutElement.offsetHeight - addressBarHeight;\n\n  if (parent.view === 'Details') {\n    top = top - select('.' + GRID_HEADER, layoutElement).offsetHeight;\n  }\n\n  if (isNullOrUndefined(element.querySelector('.' + EMPTY))) {\n    var emptyDiv = createElement('div', {\n      className: EMPTY\n    });\n    var emptyFolder = createElement('div', {\n      className: LARGE_EMPTY_FOLDER\n    });\n    var emptyEle = createElement('div', {\n      className: EMPTY_CONTENT\n    });\n    var dragFile = createElement('div', {\n      className: EMPTY_INNER_CONTENT\n    });\n\n    if (parent.view === 'Details') {\n      element.querySelector('.' + GRID_VIEW).appendChild(emptyDiv);\n    } else {\n      element.appendChild(emptyDiv);\n    }\n\n    emptyDiv.appendChild(emptyFolder);\n    emptyDiv.appendChild(emptyEle);\n    emptyDiv.appendChild(dragFile);\n  }\n\n  if (element.querySelector('.' + EMPTY)) {\n    if (!isNullOrUndefined(args.error)) {\n      element.querySelector('.' + EMPTY_CONTENT).innerHTML = getLocaleText(parent, 'Access-Denied');\n      element.querySelector('.' + EMPTY_INNER_CONTENT).innerHTML = getLocaleText(parent, 'Access-Details');\n    } else if (parent.isFiltered) {\n      element.querySelector('.' + EMPTY_CONTENT).innerHTML = getLocaleText(parent, 'Filter-Empty');\n      element.querySelector('.' + EMPTY_INNER_CONTENT).innerHTML = getLocaleText(parent, 'Filter-Key');\n    } else if (parent.breadcrumbbarModule.searchObj.element.value !== '') {\n      element.querySelector('.' + EMPTY_CONTENT).innerHTML = getLocaleText(parent, 'Search-Empty');\n      element.querySelector('.' + EMPTY_INNER_CONTENT).innerHTML = getLocaleText(parent, 'Search-Key');\n    } else {\n      element.querySelector('.' + EMPTY_CONTENT).innerHTML = getLocaleText(parent, 'Folder-Empty');\n      element.querySelector('.' + EMPTY_INNER_CONTENT).innerHTML = getLocaleText(parent, 'File-Upload');\n    }\n  }\n\n  var eDiv = select('.' + EMPTY, element);\n  top = (top - eDiv.offsetHeight) / 2;\n  eDiv.style.marginTop = top + 'px';\n}\n/**\n * Gets the directories\n *\n * @param {Object[]} files - specifies the file object.\n * @returns {Object[]} - returns the sorted data.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction getDirectories(files) {\n  return new DataManager(files).executeLocal(new Query().where(isFile, 'equal', false, false));\n}\n/**\n * set the Node ID\n *\n * @param {ReadArgs} result - specifies the result.\n * @param {string} rootId - specifies the rootId.\n * @returns {void}\n * @private\n */\n\n\nfunction setNodeId(result, rootId) {\n  // eslint-disable-next-line\n  var dirs = getDirectories(result.files);\n\n  for (var i = 0, len = dirs.length; i < len; i++) {\n    setValue('_fm_id', rootId + '_' + i, dirs[i]);\n  }\n}\n/**\n * set the date object\n *\n * @param {Object[]} args - specifies the file object.\n * @returns {void}\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction setDateObject(args) {\n  for (var i = 0; i < args.length; i++) {\n    setValue('_fm_created', new Date(getValue('dateCreated', args[i])), args[i]);\n    setValue('_fm_modified', new Date(getValue('dateModified', args[i])), args[i]);\n  }\n}\n/**\n * get the locale text\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} text - specifies the text.\n * @returns {string} - returns the locale text.\n * @private\n */\n\n\nfunction getLocaleText(parent, text) {\n  var locale = parent.localeObj.getConstant(text);\n  return locale === '' ? text : locale;\n}\n/**\n * get the CSS class\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} css - specifies the css.\n * @returns {string} - returns the css classes.\n * @private\n */\n\n\nfunction getCssClass(parent, css) {\n  var cssClass = parent.cssClass;\n  cssClass = isNullOrUndefined(cssClass) || cssClass === '' ? css : cssClass + ' ' + css;\n  return cssClass;\n}\n/**\n * sort on click\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {MenuEventArgs} args - specifies the menu event arguements.\n * @returns {void}\n * @private\n */\n\n\nfunction sortbyClickHandler(parent, args) {\n  var tick;\n  parent.isSortByClicked = true;\n\n  if (args.item.id.indexOf('ascending') !== -1 || args.item.id.indexOf('descending') !== -1 || args.item.id.indexOf('none') !== -1) {\n    tick = true;\n  } else {\n    tick = false;\n  }\n\n  if (!tick) {\n    parent.sortBy = getSortField(args.item.id);\n  } else {\n    parent.sortOrder = getSortField(args.item.id);\n  }\n\n  parent.itemData = [getPathObject(parent)];\n\n  if (parent.view === 'Details') {\n    if (parent.isMobile) {\n      updateLayout(parent, 'Details');\n    } else {\n      parent.notify(sortColumn, {\n        module: 'detailsview'\n      });\n    }\n  }\n\n  if (parent.view === 'LargeIcons') {\n    updateLayout(parent, 'LargeIcons');\n  }\n\n  parent.notify(sortByChange, {});\n}\n/**\n * Gets the sorted fields\n *\n * @param {string} id - specifies the id.\n * @returns {string} - returns the sorted fields\n * @private\n */\n\n\nfunction getSortField(id) {\n  var text = id.substring(id.lastIndexOf('_') + 1);\n  var field = text;\n\n  switch (text) {\n    case 'date':\n      field = '_fm_modified';\n      break;\n\n    case 'ascending':\n      field = 'Ascending';\n      break;\n\n    case 'descending':\n      field = 'Descending';\n      break;\n\n    case 'none':\n      field = 'None';\n      break;\n  }\n\n  return field;\n}\n/**\n * Sets the next path\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} path - specifies the path.\n * @returns {void}\n * @private\n */\n\n\nfunction setNextPath(parent, path) {\n  var currfolders = path.split('/');\n  var folders = parent.originalPath.split('/'); // eslint-disable-next-line\n\n  var root = getValue(parent.pathId[0], parent.feParent);\n  var key = isNullOrUndefined(getValue('id', root)) ? 'name' : 'id';\n\n  for (var i = currfolders.length - 1, len = folders.length - 1; i < len; i++) {\n    var eventName = folders[i + 1] === '' ? finalizeEnd : initialEnd;\n    var newPath = folders[i] === '' ? '/' : parent.path + folders[i] + '/'; // eslint-disable-next-line\n\n    var data = getObject(parent, key, folders[i]);\n    var id = getValue('_fm_id', data);\n    parent.setProperties({\n      path: newPath\n    }, true);\n    parent.pathId.push(id);\n    parent.itemData = [data];\n    parent.pathNames.push(getValue('name', data));\n    read(parent, eventName, parent.path);\n    break;\n  }\n}\n/**\n * Opens the searched folder\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {Object} data - specifies the data\n * @returns {void}\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction openSearchFolder(parent, data) {\n  parent.notify(clearPathInit, {\n    selectedNode: parent.pathId[parent.pathId.length - 1]\n  });\n  parent.originalPath = getFullPath(parent, data, parent.path);\n  read(parent, parent.path !== parent.originalPath ? initialEnd : finalizeEnd, parent.path);\n}\n/**\n * Paste handling function\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction pasteHandler(parent) {\n  parent.isDragDrop = false;\n\n  if (parent.selectedNodes.length !== 0 && parent.enablePaste) {\n    var path = parent.folderPath === '' ? parent.path : parent.folderPath; // eslint-disable-next-line\n\n    var subFolder = validateSubFolder(parent, parent.actionRecords, path, parent.path);\n\n    if (!subFolder) {\n      if (parent.fileAction === 'move' && parent.targetPath !== path || parent.fileAction === 'copy') {\n        parent.notify(pasteInit, {});\n        paste(parent, parent.targetPath, parent.selectedNodes, path, parent.fileAction, [], parent.actionRecords);\n      } else {\n        parent.enablePaste = false;\n        parent.notify(hidePaste, {});\n        removeBlur(parent);\n        var result = {\n          files: null,\n          error: {\n            code: '402',\n            message: getLocaleText(parent, 'Same-Folder-Error'),\n            fileExists: null\n          }\n        };\n        createDialog(parent, 'Error', result);\n      }\n    }\n  }\n}\n/**\n * Validates the sub folders\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {'{ [key: string]: Object; }[]'} data - specifies the data.\n * @param {string} dropPath - specifies the drop path.\n * @param {string} dragPath - specifies the drag path.\n * @returns {boolean} - returns the validated sub folder.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction validateSubFolder(parent, data, dropPath$$1, dragPath) {\n  var subFolder = false;\n\n  for (var i = 0; i < data.length; i++) {\n    if (!getValue('isFile', data[i])) {\n      var tempTarget = getFullPath(parent, data[i], dragPath);\n\n      if (dropPath$$1.indexOf(tempTarget) === 0) {\n        var result = {\n          files: null,\n          error: {\n            code: '402',\n            message: getLocaleText(parent, 'Sub-Folder-Error'),\n            fileExists: null\n          }\n        };\n        createDialog(parent, 'Error', result);\n        subFolder = true;\n        break;\n      }\n    } else {\n      var srcData = parent.dragNodes[i];\n      var len = 0;\n\n      if (srcData) {\n        len = srcData.lastIndexOf('/');\n      }\n\n      var path = '';\n\n      if (len > 0) {\n        path = dragPath + srcData.substring(0, len + 1);\n      }\n\n      if (path === dropPath$$1) {\n        var result = {\n          files: null,\n          error: {\n            code: '402',\n            message: getLocaleText(parent, 'Same-Folder-Error'),\n            fileExists: null\n          }\n        };\n        createDialog(parent, 'Error', result);\n        subFolder = true;\n        break;\n      }\n    }\n  }\n\n  return subFolder;\n}\n/**\n * Validates the drop handler\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction dropHandler(parent) {\n  parent.isDragDrop = true;\n\n  if (parent.dragData.length !== 0) {\n    parent.dragPath = parent.dragPath.replace(/\\\\/g, '/');\n    parent.dropPath = parent.dropPath.replace(/\\\\/g, '/');\n    var subFolder = validateSubFolder(parent, parent.dragData, parent.dropPath, parent.dragPath);\n\n    if (!subFolder && parent.dragPath !== parent.dropPath) {\n      parent.itemData = [parent.dropData];\n      paste(parent, parent.dragPath, parent.dragNodes, parent.dropPath, 'move', [], parent.dragData);\n      parent.notify(pasteInit, {});\n    }\n  }\n}\n/**\n * Gets the parent path\n *\n * @param {string} oldPath - specifies the old path.\n * @returns {string} - returns the parent path.\n * @private\n */\n\n\nfunction getParentPath(oldPath) {\n  var path = oldPath.split('/');\n  var newPath = path[0] + '/';\n\n  for (var i = 1; i < path.length - 2; i++) {\n    newPath += path[i] + '/';\n  }\n\n  return newPath;\n}\n/**\n * Gets the directory path\n *\n * @param {IFileManager} parent - specifies the parent.\n * @param {ReadArgs} args - returns the read arguements.\n * @returns {string} - returns the directory path\n * @private\n */\n\n\nfunction getDirectoryPath(parent, args) {\n  var filePath = getValue(parent.hasId ? 'id' : 'name', args.cwd) + '/';\n  var fPath = getValue(parent.hasId ? 'filterId' : 'filterPath', args.cwd);\n\n  if (!isNullOrUndefined(fPath)) {\n    if (fPath === '') {\n      return parent.hasId ? filePath : '/';\n    }\n\n    return fPath.replace(/\\\\/g, '/') + filePath;\n  } else {\n    return parent.path + filePath;\n  }\n}\n/**\n * Gets the do paste path\n *\n * @param {IFileManager} parent - specifies the parent.\n * @param {string} operation - specifies the operations.\n * @param {ReadArgs} result - returns the result.\n * @returns {void}\n * @private\n */\n\n\nfunction doPasteUpdate(parent, operation, result) {\n  if (operation === 'move') {\n    if (!parent.isDragDrop) {\n      parent.enablePaste = false;\n      parent.notify(hidePaste, {});\n      parent.notify(cutEnd, result);\n    } else {\n      parent.notify(dragEnd, result);\n    }\n  }\n\n  if (parent.duplicateItems.length === 0) {\n    parent.pasteNodes = [];\n  }\n\n  var flag = false;\n\n  for (var count = 0; count < result.files.length && !flag; count++) {\n    parent.pasteNodes.push(result.files[count][parent.hasId ? 'id' : 'name']);\n\n    if (parent.isDragDrop) {\n      parent.droppedObjects.push(result.files[count]);\n    }\n  }\n\n  parent.duplicateItems = [];\n  parent.duplicateRecords = [];\n\n  if (parent.isDragDrop && !parent.isPasteError) {\n    parent.isDropEnd = true;\n  } else {\n    parent.isDropEnd = false;\n  }\n\n  if (!parent.isDragDrop || parent.path === parent.dragPath || parent.path === parent.dropPath || parent.isSearchDrag) {\n    parent.isPathDrag = false;\n    read(parent, pasteEnd, parent.path);\n  } else {\n    readDropPath(parent);\n  }\n\n  parent.trigger('success', {\n    action: operation,\n    result: result\n  });\n}\n/**\n * Reads the drop path\n *\n * @param {IFileManager} parent - specifies the parent.\n * @returns {void}\n * @private\n */\n\n\nfunction readDropPath(parent) {\n  var pathId = getValue('_fm_id', parent.dropData);\n  parent.expandedId = pathId;\n  parent.itemData = [parent.dropData];\n\n  if (parent.isPathDrag) {\n    parent.notify(pathDrag, parent.itemData);\n  } else {\n    if (parent.navigationpaneModule) {\n      var node = select('[data-uid=\"' + pathId + '\"]', parent.navigationpaneModule.treeObj.element);\n\n      if (!node) {\n        var liElement = document.querySelector('[data-id = \"' + getValue('id', parent.dropData) + '\"]');\n        pathId = liElement.getAttribute(\"data-uid\");\n        node = select('[data-uid=\"' + pathId + '\"]', parent.navigationpaneModule.treeObj.element);\n      }\n\n      updatePath(node, parent.dropData, parent);\n    }\n\n    read(parent, dropPath, parent.dropPath);\n  }\n}\n/**\n * Gets the duplicated path\n *\n * @param {IFileManager} parent - specifies the parent.\n * @param {string} name - specifies the name.\n * @returns {object} - returns the duplicated path.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction getDuplicateData(parent, name) {\n  // eslint-disable-next-line\n  var data = null; // eslint-disable-next-line\n\n  var records = parent.isDragDrop ? parent.dragData : parent.actionRecords;\n\n  for (var i = 0; i < records.length; i++) {\n    if (getValue('name', records[i]) === name) {\n      data = records[i];\n      break;\n    }\n  }\n\n  return data;\n}\n/**\n * Gets the create the virtual drag element\n *\n * @param {IFileManager} parent - specifies the parent.\n * @returns {void}\n * @private\n */\n\n\nfunction createVirtualDragElement(parent) {\n  parent.isSearchDrag = false;\n\n  if (parent.breadcrumbbarModule.searchObj.element.value !== '') {\n    parent.isSearchDrag = true;\n  }\n\n  if (parent.activeModule !== 'navigationpane') {\n    parent.dragNodes = [];\n    var i = 0;\n\n    while (i < parent.selectedItems.length) {\n      parent.dragNodes.push(parent.selectedItems[i]);\n      i++;\n    }\n\n    if (parent.selectedItems.length === 0 && parent.dragData && parent.dragData.length === 1) {\n      parent.dragNodes.push(getItemName(parent, parent.dragData[0]));\n    }\n  }\n\n  var cloneIcon = parent.createElement('div', {\n    className: 'e-fe-icon ' + fileType(parent.dragData[0])\n  });\n  var cloneName = parent.createElement('div', {\n    className: 'e-fe-name',\n    innerHTML: parent.dragData[0].name\n  });\n  var virtualEle = parent.createElement('div', {\n    className: 'e-fe-content'\n  });\n  virtualEle.appendChild(cloneIcon);\n  virtualEle.appendChild(cloneName);\n  var ele = parent.createElement('div', {\n    className: CLONE\n  });\n  ele.appendChild(virtualEle);\n\n  if (parent.dragNodes.length > 1) {\n    var badge = parent.createElement('span', {\n      className: 'e-fe-count',\n      innerHTML: parent.dragNodes.length.toString(10)\n    });\n    ele.appendChild(badge);\n  }\n\n  parent.virtualDragElement = ele;\n  parent.element.appendChild(parent.virtualDragElement);\n}\n/**\n * Drops the stop handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @param {DragEventArgs} args - specifies the drag event arguements.\n * @returns {void}\n * @private\n */\n\n\nfunction dragStopHandler(parent, args) {\n  var dragArgs = args;\n  dragArgs.cancel = false;\n\n  if (parent.treeExpandTimer != null) {\n    window.clearTimeout(parent.treeExpandTimer);\n    parent.treeExpandTimer = null;\n  }\n\n  removeDropTarget(parent);\n  parent.element.classList.remove('e-fe-drop', 'e-no-drop');\n  removeBlur(parent);\n  parent.uploadObj.dropArea = select('#' + parent.element.id + CONTENT_ID, parent.element);\n  var virtualEle = select('.' + CLONE, parent.element);\n\n  if (virtualEle) {\n    detach(virtualEle);\n  }\n\n  getTargetModule(parent, args.target);\n  parent.notify(dropInit, args);\n  removeBlur(parent, 'hover');\n  dragArgs.fileDetails = parent.dragData;\n  parent.trigger('fileDragStop', dragArgs, function (dragArgs) {\n    if (!dragArgs.cancel && !isNullOrUndefined(parent.targetModule) && parent.targetModule !== '' && parent.dragCount > 2) {\n      dropHandler(parent);\n    }\n\n    parent.dragCount = 0;\n  });\n}\n/**\n * Drag the start handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @param {'DragEventArgs'} args - specifies the drag event arguements.\n * @param {Draggable} dragObj - specifies the drag event arguements.\n * @returns {void}\n * @private\n */\n\n\nfunction dragStartHandler(parent, args, dragObj) {\n  var dragArgs = args;\n  dragArgs.cancel = false;\n  dragArgs.fileDetails = parent.dragData;\n  parent.dragCount = 0;\n  parent.droppedObjects = [];\n\n  if (!parent.allowDragAndDrop || parent.activeModule === 'navigationpane' && closest(args.element, 'li').getAttribute('data-uid') === parent.pathId[0]) {\n    dragArgs.cancel = true;\n  }\n\n  if (parent.activeModule === 'navigationpane' && parent.pathId.indexOf(closest(args.element, 'li').getAttribute('data-uid')) !== -1) {\n    parent.isPathDrag = true;\n  } else {\n    parent.isPathDrag = false;\n  }\n\n  removeBlur(parent);\n\n  if (dragArgs.cancel) {\n    dragObj.intDestroy(args.event);\n    dragCancel(parent);\n  } else if (!dragArgs.cancel) {\n    var i = 0;\n\n    while (i < parent.activeElements.length) {\n      addBlur(parent.activeElements[i]);\n      i++;\n    }\n\n    parent.trigger('fileDragStart', dragArgs, function (dragArgs) {\n      if (dragArgs.cancel) {\n        dragObj.intDestroy(args.event);\n        dragCancel(parent);\n      } else {\n        parent.uploadObj.dropArea = null;\n      }\n    });\n  }\n}\n/**\n * Drag the cancel handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @returns {void}\n * @private\n */\n\n\nfunction dragCancel(parent) {\n  removeBlur(parent);\n  var virtualEle = select('.' + CLONE, parent.element);\n\n  if (virtualEle) {\n    detach(virtualEle);\n  }\n}\n/**\n * Remove drop target handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @returns {void}\n * @private\n */\n\n\nfunction removeDropTarget(parent) {\n  removeItemClass(parent, DROP_FOLDER);\n  removeItemClass(parent, DROP_FILE);\n}\n/**\n * Remove item class handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @param {string} value - specifies the value.\n * @returns {void}\n * @private\n */\n\n\nfunction removeItemClass(parent, value) {\n  var ele = parent.element.querySelectorAll('.' + value);\n\n  for (var i = 0; i < ele.length; i++) {\n    ele[i].classList.remove(value);\n  }\n}\n/**\n * Dragging handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @param {DragEventArgs} args - specifies the arguements.\n * @returns {void}\n * @private\n */\n\n\nfunction draggingHandler(parent, args) {\n  var dragArgs = args;\n  dragArgs.fileDetails = parent.dragData;\n  var canDrop = false;\n  getTargetModule(parent, args.target);\n  removeDropTarget(parent);\n\n  if (parent.treeExpandTimer != null) {\n    window.clearTimeout(parent.treeExpandTimer);\n    parent.treeExpandTimer = null;\n  }\n\n  removeBlur(parent, 'hover');\n  var node = null;\n\n  if (parent.targetModule === 'navigationpane') {\n    node = closest(args.target, 'li');\n    node.classList.add(HOVER, DROP_FOLDER);\n    canDrop = true;\n    /* istanbul ignore next */\n\n    parent.treeExpandTimer = window.setTimeout(function () {\n      parent.notify(dragging, args);\n    }, 800);\n  } else if (parent.targetModule === 'detailsview') {\n    node = closest(args.target, 'tr');\n\n    if (node && node.querySelector('.' + FOLDER) && !node.classList.contains(BLUR)) {\n      node.classList.add(DROP_FOLDER);\n    } else if (node && !node.querySelector('.' + FOLDER) && !node.classList.contains(BLUR)) {\n      node.classList.add(DROP_FILE);\n    }\n\n    canDrop = true;\n  } else if (parent.targetModule === 'largeiconsview') {\n    node = closest(args.target, 'li');\n\n    if (node && node.querySelector('.' + FOLDER) && !node.classList.contains(BLUR)) {\n      node.classList.add(HOVER, DROP_FOLDER);\n    }\n\n    canDrop = true;\n    /* istanbul ignore next */\n  } else if (parent.targetModule === 'breadcrumbbar') {\n    canDrop = true;\n  }\n\n  parent.element.classList.remove('e-fe-drop', 'e-no-drop');\n  parent.element.classList.add(canDrop ? 'e-fe-drop' : 'e-no-drop');\n  parent.dragCount = parent.dragCount + 1;\n  parent.trigger('fileDragging', dragArgs);\n}\n/**\n * Object to string handler\n *\n * @param {Object} data - specifies the data.\n * @returns {string} returns string converted from Object.\n * @private\n */\n// Ignored the message key value in permission object\n// eslint-disable-next-line\n\n\nfunction objectToString(data) {\n  var str = '';\n  var keys = Object.keys(data);\n\n  for (var i = 0; i < keys.length; i++) {\n    if (keys[i] !== 'message') {\n      str += (i === 0 ? '' : ', ') + keys[i] + ': ' + getValue(keys[i], data);\n    }\n  }\n\n  return str;\n}\n/**\n * Get item name handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @param {Object} data - specifies the data.\n * @returns {string} returns the item name.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction getItemName(parent, data) {\n  if (parent.hasId) {\n    return getValue('id', data);\n  }\n\n  return getName(parent, data);\n}\n/**\n * Get item name handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @param {Object} data - specifies the data.\n * @returns {void}\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction updateRenamingData(parent, data) {\n  parent.itemData = [data];\n  parent.currentItemText = getValue('name', data);\n  parent.isFile = getValue('isFile', data);\n  parent.filterPath = getValue('filterPath', data);\n}\n/**\n * Get item name handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @returns {void}\n * @private\n */\n\n\nfunction doRename(parent) {\n  if (!hasEditAccess(parent.itemData[0])) {\n    createDeniedDialog(parent, parent.itemData[0], permissionEdit);\n  } else {\n    createDialog(parent, 'Rename');\n  }\n}\n/* istanbul ignore next */\n\n/**\n * Download handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @returns {void}\n * @private\n */\n\n\nfunction doDownload(parent) {\n  // eslint-disable-next-line\n  var items = parent.itemData;\n\n  for (var i = 0; i < items.length; i++) {\n    if (!hasDownloadAccess(items[i])) {\n      createDeniedDialog(parent, items[i], permissionDownload);\n      return;\n    }\n  }\n\n  if (parent.selectedItems.length > 0) {\n    Download(parent, parent.path, parent.selectedItems);\n  }\n}\n/**\n * Delete Files handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @param {Object[]} data - specifies the data.\n * @param {string[]} newIds - specifies the new Ids.\n * @returns {void}\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction doDeleteFiles(parent, data, newIds) {\n  for (var i = 0; i < data.length; i++) {\n    if (!hasEditAccess(data[i])) {\n      createDeniedDialog(parent, data[i], permissionEdit);\n      return;\n    }\n  }\n\n  parent.itemData = data;\n  Delete(parent, newIds, parent.path, 'delete');\n}\n/* istanbul ignore next */\n\n/**\n * Download files handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @param {Object[]} data - specifies the data.\n * @param {string[]} newIds - specifies the new Ids.\n * @returns {void}\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction doDownloadFiles(parent, data, newIds) {\n  for (var i = 0; i < data.length; i++) {\n    if (!hasDownloadAccess(data[i])) {\n      createDeniedDialog(parent, data[i], permissionDownload);\n      return;\n    }\n  }\n\n  parent.itemData = data;\n\n  if (newIds.length > 0) {\n    Download(parent, parent.path, newIds);\n  }\n}\n/**\n * Download files handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @param {Object} data - specifies the data.\n * @param {string} action - specifies the actions.\n * @returns {void}\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction createDeniedDialog(parent, data, action) {\n  var message = getValue('message', getValue('permission', data));\n\n  if (message === '') {\n    message = getLocaleText(parent, 'Access-Message').replace('{0}', getValue('name', data)).replace('{1}', action);\n  }\n\n  var response = {\n    error: {\n      code: '401',\n      fileExists: null,\n      message: message\n    }\n  };\n  createDialog(parent, 'Error', response);\n}\n/**\n * Get Access Classes\n *\n * @param {Object} data - specifies the data.\n * @returns {string} - returns accesses classes.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction getAccessClass(data) {\n  return !hasReadAccess(data) ? 'e-fe-locked e-fe-hidden' : 'e-fe-locked';\n}\n/**\n * Check read access handler\n *\n * @param {Object} data - specifies the data.\n * @returns {boolean} - returns read access.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction hasReadAccess(data) {\n  // eslint-disable-next-line\n  var permission = getValue('permission', data);\n  return permission && !getValue('read', permission) ? false : true;\n}\n/**\n * Check edit access handler\n *\n * @param {Object} data - specifies the data.\n * @returns {boolean} - returns edit access.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction hasEditAccess(data) {\n  // eslint-disable-next-line\n  var permission = getValue('permission', data);\n  return permission ? getValue('read', permission) && getValue('write', permission) : true;\n}\n/**\n * Check content access handler\n *\n * @param {Object} data - specifies the data.\n * @returns {boolean} - returns content access.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction hasContentAccess(data) {\n  // eslint-disable-next-line\n  var permission = getValue('permission', data);\n  return permission ? getValue('read', permission) && getValue('writeContents', permission) : true;\n}\n/**\n * Check upload access handler\n *\n * @param {Object} data - specifies the data.\n * @returns {boolean} - returns upload access.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction hasUploadAccess(data) {\n  // eslint-disable-next-line\n  var permission = getValue('permission', data);\n  return permission ? getValue('read', permission) && getValue('upload', permission) : true;\n}\n/**\n * Check download access handler\n *\n * @param {Object} data - specifies the data.\n * @returns {boolean} - returns download access.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction hasDownloadAccess(data) {\n  // eslint-disable-next-line\n  var permission = getValue('permission', data);\n  return permission ? getValue('read', permission) && getValue('download', permission) : true;\n}\n/**\n * Create new folder handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @returns {void}\n * @private\n */\n\n\nfunction createNewFolder(parent) {\n  // eslint-disable-next-line\n  var details = parent.itemData[0];\n\n  if (!hasContentAccess(details)) {\n    createDeniedDialog(parent, details, permissionEditContents);\n  } else {\n    createDialog(parent, 'NewFolder');\n  }\n}\n/**\n * Upload item handler\n *\n * @param {IFileManager} parent - specifies the parent.\n * @returns {void}\n * @private\n */\n\n\nfunction uploadItem(parent) {\n  // eslint-disable-next-line\n  var details = parent.itemData[0];\n\n  if (!hasUploadAccess(details)) {\n    createDeniedDialog(parent, details, permissionUpload);\n  } else {\n    var eleId = '#' + parent.element.id + UPLOAD_ID;\n    var uploadEle = document.querySelector(eleId);\n    uploadEle.click();\n  }\n}\n/**\n * Function to read the content from given path in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} event - specifies the event.\n * @param {string} path - specifies the path.\n * @returns {void}\n * @private\n */\n\n\nfunction read(parent, event, path) {\n  // eslint-disable-next-line\n  var itemData = parent.itemData;\n\n  for (var i = 0; i < itemData.length; i++) {\n    if (isNullOrUndefined(getValue('hasChild', itemData[i]))) {\n      setValue('hasChild', false, itemData[i]);\n    }\n  } // eslint-disable-next-line\n\n\n  var data = {\n    action: 'read',\n    path: path,\n    showHiddenItems: parent.showHiddenItems,\n    data: itemData\n  };\n  createAjax(parent, data, readSuccess, event);\n}\n/**\n * Function to create new folder in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} itemName - specifies the item name.\n * @returns {void}\n * @private\n */\n\n\nfunction createFolder(parent, itemName) {\n  // eslint-disable-next-line\n  var data = {\n    action: 'create',\n    path: parent.path,\n    name: itemName,\n    data: parent.itemData\n  };\n  createAjax(parent, data, createSuccess, itemName);\n}\n/**\n * Function to filter the files in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string}  event - specifies the event.\n * @returns {void}\n * @private\n */\n\n\nfunction filter(parent, event) {\n  // eslint-disable-next-line\n  var data = {\n    action: 'filter',\n    path: parent.path,\n    showHiddenItems: parent.showHiddenItems,\n    data: [getPathObject(parent)]\n  }; // eslint-disable-next-line\n\n  var filterData; // eslint-disable-next-line\n\n  var filterDataVal = parent.filterData ? extend(filterData, data, parent.filterData) : data;\n  createAjax(parent, filterDataVal, filterSuccess, event, getValue('action', filterDataVal));\n}\n/**\n * Function to rename the folder/file in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} path - specifies the path.\n * @param {string} itemNewName - specifies the item's new name.\n * @returns {void}\n * @private\n */\n\n\nfunction rename(parent, path, itemNewName) {\n  var name;\n  var newName;\n\n  if (parent.breadcrumbbarModule.searchObj.element.value === '' && !parent.isFiltered) {\n    name = parent.currentItemText;\n    newName = itemNewName;\n  } else {\n    var fPath = parent.filterPath;\n\n    if (parent.hasId) {\n      name = parent.currentItemText;\n      newName = itemNewName;\n    } else {\n      fPath = fPath.replace(/\\\\/g, '/');\n      name = fPath.replace(path, '') + parent.currentItemText;\n      newName = fPath.replace(path, '') + itemNewName;\n    }\n  } // eslint-disable-next-line\n\n\n  var data = {\n    action: 'rename',\n    path: path,\n    name: name,\n    newName: newName,\n    data: parent.itemData\n  };\n  createAjax(parent, data, renameSuccess, path);\n}\n/**\n * Function to paste file's and folder's in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} path - specifies the path.\n * @param {string[]} names - specifies the names.\n * @param {string} targetPath - specifies the target path.\n * @param {string} pasteOperation - specifies the paste operation.\n * @param {string[]} renameItems - specifies the rename items.\n * @param {Object[]} actionRecords - specifies the action records.\n * @returns {void}\n * @private\n */\n\n\nfunction paste(parent, path, names, targetPath, pasteOperation, // eslint-disable-next-line\nrenameItems, actionRecords) {\n  // eslint-disable-next-line\n  var data = {\n    action: pasteOperation,\n    path: path,\n    targetData: parent.itemData[0],\n    targetPath: targetPath,\n    names: names,\n    renameFiles: renameItems,\n    data: actionRecords\n  };\n  parent.destinationPath = targetPath;\n  createAjax(parent, data, pasteSuccess, path, pasteOperation, targetPath);\n}\n/**\n * Function to delete file's and folder's in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string[]} items - specifies the items.\n * @param {string} path - specifies the path.\n * @param {string} operation - specifies the operation.\n * @returns {void}\n * @private\n */\n\n\nfunction Delete(parent, items, path, operation) {\n  // eslint-disable-next-line\n  var data = {\n    action: operation,\n    path: path,\n    names: items,\n    data: parent.itemData\n  };\n  createAjax(parent, data, deleteSuccess, path);\n}\n/* istanbul ignore next */\n\n/**\n * Function to get details of file's and folder's in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string[]} names - specifies the names.\n * @param {string} path - specifies the path.\n * @param {string} operation - specifies the operation data.\n * @returns {void}\n * @private\n */\n\n\nfunction GetDetails(parent, names, path, operation) {\n  // eslint-disable-next-line\n  var data = {\n    action: operation,\n    path: path,\n    names: names,\n    data: parent.itemData\n  };\n  createAjax(parent, data, detailsSuccess, path, operation);\n}\n/**\n * Function for createAjax in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {Object} data - specifies the data.\n * @param {Function} fn - specifies the fn.\n * @param {string} event - specifies the event.\n * @param {string} operation - specifies the operation.\n * @param {string} targetPath - specifies the target path.\n * @returns {void}\n * @private\n */\n\n\nfunction createAjax( // eslint-disable-next-line\nparent, data, fn, event, operation, targetPath) {\n  // eslint-disable-next-line\n  var ajaxSettings = {\n    url: parent.ajaxSettings.url,\n    type: 'POST',\n    mode: true,\n    dataType: 'json',\n    contentType: 'application/json',\n    data: JSON.stringify(data),\n    onSuccess: null,\n    onFailure: null,\n    beforeSend: null\n  };\n  var eventArgs = {\n    action: getValue('action', data),\n    ajaxSettings: ajaxSettings,\n    cancel: false\n  };\n  parent.trigger('beforeSend', eventArgs, function (beforeSendArgs) {\n    if (!beforeSendArgs.cancel) {\n      parent.notify(beforeRequest, {});\n      var ajax = new Ajax({\n        url: getValue('url', beforeSendArgs.ajaxSettings),\n        type: getValue('type', beforeSendArgs.ajaxSettings),\n        mode: getValue('mode', beforeSendArgs.ajaxSettings),\n        dataType: getValue('dataType', beforeSendArgs.ajaxSettings),\n        contentType: getValue('contentType', beforeSendArgs.ajaxSettings),\n        data: getValue('data', beforeSendArgs.ajaxSettings),\n        beforeSend: getValue('beforeSend', beforeSendArgs.ajaxSettings),\n        onSuccess: function (result) {\n          if (isNullOrUndefined(result)) {\n            var result_1 = {\n              error: {\n                fileExists: null,\n                message: getLocaleText(parent, 'Server-Error') + ' ' + parent.ajaxSettings.url,\n                code: '406'\n              },\n              files: null\n            };\n            triggerAjaxFailure(parent, beforeSendArgs, fn, result_1, event, operation, targetPath);\n            return;\n          }\n\n          if (typeof result === 'string') {\n            result = JSON.parse(result);\n          }\n\n          parent.notify(afterRequest, {\n            action: 'success'\n          });\n          var id = parent.expandedId ? parent.expandedId : parent.pathId[parent.pathId.length - 1];\n\n          if (!isNullOrUndefined(result.cwd) && getValue('action', data) === 'read') {\n            result.cwd.name = parent.pathId.length === 1 ? parent.rootAliasName || result.cwd.name : result.cwd.name;\n            setValue('_fm_id', id, result.cwd);\n            setValue(id, result.cwd, parent.feParent);\n\n            if (!isNullOrUndefined(result.files) || result.error.code === '401') {\n              if ((event === 'finalize-end' || event === 'initial-end') && parent.pathNames.length === 0) {\n                // eslint-disable-next-line\n                var root = getValue(parent.pathId[0], parent.feParent);\n                parent.pathNames[0] = getValue('name', root);\n                parent.hasId = !isNullOrUndefined(getValue('id', root));\n              }\n\n              if (event === 'finalize-end') {\n                generatePath(parent);\n              }\n            }\n          }\n\n          if (!isNullOrUndefined(result.files)) {\n            setDateObject(result.files);\n\n            for (var i = 0, len = result.files.length; i < len; i++) {\n              // eslint-disable-next-line\n              var item = result.files[i];\n              setValue('_fm_iconClass', fileType(item), item);\n            }\n\n            if (getValue('action', data) === 'read') {\n              setNodeId(result, id);\n              setValue(id, result.files, parent.feFiles);\n            }\n          }\n\n          if (!isNullOrUndefined(result.details) && !isNullOrUndefined(parent.rootAliasName)) {\n            var rootName = parent.rootAliasName || getValue('name', result.details);\n            var location_1 = getValue('location', result.details).replace(new RegExp('/', 'g'), '\\\\');\n\n            if (getValue('path', data) === '/' || parent.hasId && getValue('path', data).match(/[/]/g).length === 1) {\n              if (getValue('names', data).length === 0) {\n                setValue('name', rootName, result.details);\n                location_1 = rootName;\n              } else {\n                location_1 = location_1.replace(location_1.substring(0, location_1.indexOf('\\\\')), rootName);\n              }\n            } else {\n              location_1 = location_1.replace(location_1.substring(0, location_1.indexOf('\\\\')), rootName);\n            }\n\n            setValue('location', location_1, result.details);\n          }\n\n          fn(parent, result, event, operation, targetPath);\n\n          if (!isNullOrUndefined(result.files) && (event === 'path-changed' || event === 'finalize-end' || event === 'open-end')) {\n            parent.notify(searchTextChange, result);\n          }\n\n          if (typeof getValue('onSuccess', beforeSendArgs.ajaxSettings) === 'function') {\n            getValue('onSuccess', beforeSendArgs.ajaxSettings)();\n          }\n        },\n        onFailure: function () {\n          var result = {\n            files: null,\n            error: {\n              code: '404',\n              message: getLocaleText(parent, 'Network-Error') + ' ' + parent.ajaxSettings.url,\n              fileExists: null\n            }\n          };\n          triggerAjaxFailure(parent, beforeSendArgs, fn, result, event, operation, targetPath);\n        }\n      });\n      ajax.send();\n    }\n  });\n}\n/**\n * Function for trigger Ajax failure in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {BeforeSendEventArgs} beforeSendArgs - specifies the beforeSendArgs.\n * @param {Function} fn - specifies the function.\n * @param {ReadArgs} result - specifies the result.\n * @param {string} event - specifies the event.\n * @param {string} operation - specifies the operation.\n * @param {string} targetPath - specifies the targetPath.\n * @returns {void}\n * @private\n */\n\n\nfunction triggerAjaxFailure( // eslint-disable-next-line\nparent, beforeSendArgs, fn, result, event, operation, targetPath) {\n  parent.notify(afterRequest, {\n    action: 'failure'\n  });\n  fn(parent, result, event, operation, targetPath);\n\n  if (typeof getValue('onFailure', beforeSendArgs.ajaxSettings) === 'function') {\n    getValue('onFailure', beforeSendArgs.ajaxSettings)();\n  }\n}\n/**\n * Function for read success in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {ReadArgs} result - specifies the result.\n * @param {string} event - specifies the event.\n * @returns {void}\n * @private\n */\n\n\nfunction readSuccess(parent, result, event) {\n  if (!isNullOrUndefined(result.files)) {\n    parent.notify(event, result);\n    parent.notify(selectionChanged, {});\n    var args = {\n      action: 'read',\n      result: result\n    };\n    parent.trigger('success', args);\n  } else {\n    if (result.error.code === '401') {\n      result.files = [];\n      parent.notify(event, result);\n      parent.notify(selectionChanged, {});\n    }\n\n    onFailure(parent, result, 'read');\n    parent.setProperties({\n      path: parent.oldPath\n    }, true);\n    parent.pathNames.pop();\n  }\n\n  if (parent.isDragDrop && parent.isDropEnd) {\n    if (parent.droppedObjects.length !== 0) {\n      var args = {\n        fileDetails: parent.droppedObjects\n      };\n      parent.trigger('fileDropped', args);\n    }\n\n    parent.isDropEnd = parent.isDragDrop = false;\n  }\n}\n/**\n * Function for filter success in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {ReadArgs} result - specifies the result.\n * @param {string} event - specifies the event.\n * @param {string} action - specifies the action.\n * @returns {void}\n * @private\n */\n\n\nfunction filterSuccess(parent, result, event, action) {\n  if (!isNullOrUndefined(result.files)) {\n    parent.notify(event, result);\n    var args = {\n      action: action,\n      result: result\n    };\n    parent.trigger('success', args);\n  } else {\n    onFailure(parent, result, action);\n  }\n}\n/* istanbul ignore next */\n\n/**\n * Function for create success in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {ReadArgs} result - specifies the result.\n * @param {string} itemName - specifies the item name.\n * @returns {void}\n * @private\n */\n\n\nfunction createSuccess(parent, result, itemName) {\n  if (!isNullOrUndefined(result.files)) {\n    if (parent.dialogObj && parent.dialogObj.visible) {\n      parent.dialogObj.hide();\n    }\n\n    parent.createdItem = result.files[0];\n    parent.breadcrumbbarModule.searchObj.value = '';\n    var args = {\n      action: 'create',\n      result: result\n    };\n    parent.trigger('success', args);\n    parent.itemData = [getPathObject(parent)];\n    read(parent, createEnd, parent.path);\n  } else {\n    if (result.error.code === '400') {\n      if (parent.dialogObj && parent.dialogObj.visible) {\n        var ele = select('#newname', parent.dialogObj.element);\n        var error = getLocaleText(parent, 'Validation-NewFolder-Exists').replace('{0}', '\"' + ele.value + '\"');\n        ele.parentElement.nextElementSibling.innerHTML = error;\n      } else {\n        var result_2 = {\n          files: null,\n          error: {\n            code: '400',\n            message: getLocaleText(parent, 'Validation-NewFolder-Exists').replace('{0}', '\"' + itemName + '\"'),\n            fileExists: null\n          }\n        };\n        createDialog(parent, 'Error', result_2);\n      }\n\n      var args = {\n        action: 'create',\n        error: result.error\n      };\n      parent.trigger('failure', args);\n    } else {\n      if (parent.dialogObj && parent.dialogObj.visible) {\n        parent.dialogObj.hide();\n      }\n\n      onFailure(parent, result, 'create');\n    }\n  }\n}\n/* istanbul ignore next */\n\n/**\n * Function to rename the folder/file in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {ReadArgs} result - specifies the result.\n * @param {string} path - specifies the path\n * @returns {void}\n * @private\n */\n\n\nfunction renameSuccess(parent, result, path) {\n  if (!isNullOrUndefined(result.files)) {\n    if (!isNullOrUndefined(parent.dialogObj)) {\n      parent.dialogObj.hide();\n    }\n\n    var args = {\n      action: 'rename',\n      result: result\n    };\n    parent.trigger('success', args);\n    parent.renamedItem = result.files[0];\n\n    if (parent.activeModule === 'navigationpane') {\n      parent.pathId.pop();\n      parent.itemData = [getValue(parent.pathId[parent.pathId.length - 1], parent.feParent)];\n      read(parent, renameEndParent, getParentPath(parent.path));\n    } else {\n      parent.itemData = [getPathObject(parent)];\n\n      if (parent.breadcrumbbarModule.searchObj.value !== '') {\n        Search(parent, renameEnd, parent.path, parent.searchWord, parent.showHiddenItems, !parent.searchSettings.ignoreCase);\n      } else {\n        if (parent.isFiltered) {\n          filter(parent, renameEnd);\n        } else {\n          read(parent, renameEnd, parent.path);\n        }\n      }\n    }\n  } else {\n    if (result.error.code === '400' && parent.dialogObj && parent.dialogObj.visible) {\n      var ele = select('#rename', parent.dialogObj.element);\n      var error = getLocaleText(parent, 'Validation-Rename-Exists').replace('{0}', '\"' + parent.currentItemText + '\"');\n      error = error.replace('{1}', '\"' + ele.value + '\"');\n      ele.parentElement.nextElementSibling.innerHTML = error;\n      var args = {\n        action: 'rename',\n        error: result.error\n      };\n      parent.trigger('failure', args);\n    } else {\n      if (!isNullOrUndefined(parent.dialogObj)) {\n        parent.dialogObj.hide();\n      }\n\n      onFailure(parent, result, 'rename');\n    }\n  }\n}\n/* istanbul ignore next */\n\n/**\n * Function to create new folder in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {ReadArgs} result - specifies the result.\n * @param {string} path - specifies the path.\n * @param {string} operation - specifies the operation.\n * @returns {void}\n * @private\n */\n\n\nfunction pasteSuccess(parent, result, path, operation) {\n  if (result.error && result.error.fileExists) {\n    parent.fileLength = 0;\n\n    if (!isNullOrUndefined(result.files)) {\n      parent.isPasteError = true;\n      doPasteUpdate(parent, operation, result);\n    }\n\n    createExtDialog(parent, 'DuplicateItems', result.error.fileExists);\n\n    if (result.error.code === '404') {\n      createDialog(parent, 'Error', result);\n    }\n  } else if (!result.error && !isNullOrUndefined(result.files)) {\n    parent.isPasteError = false;\n    doPasteUpdate(parent, operation, result);\n  } else if (result.error && !isNullOrUndefined(result.files)) {\n    parent.isPasteError = true;\n    doPasteUpdate(parent, operation, result);\n    createDialog(parent, 'Error', result);\n  } else {\n    onFailure(parent, result, operation);\n  }\n}\n/**\n * Function to delete success in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {ReadArgs} result - specifies the result.\n * @param {string} path - specifies the path.\n * @returns {void}\n * @private\n */\n\n\nfunction deleteSuccess(parent, result, path) {\n  if (!isNullOrUndefined(result.files)) {\n    parent.setProperties({\n      path: path\n    }, true);\n    parent.itemData = [getPathObject(parent)];\n    read(parent, deleteEnd, parent.path);\n\n    if (result.error) {\n      onFailure(parent, result, 'delete');\n    } else {\n      var args = {\n        action: 'delete',\n        result: result\n      };\n      parent.trigger('success', args);\n    }\n  } else {\n    onFailure(parent, result, 'delete');\n  }\n}\n/**\n * Function for details success in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {ReadArgs} result - specifies the result.\n * @param {string} path - specifies the path.\n * @param {string} operation - specifies the operation.\n * @returns {void}\n * @private\n */\n\n\nfunction detailsSuccess( // eslint:disable-next-line\nparent, result, path, operation) {\n  if (!isNullOrUndefined(result.details)) {\n    createDialog(parent, operation, null, result.details);\n    var args = {\n      action: 'details',\n      result: result\n    };\n    parent.trigger('success', args);\n  } else {\n    onFailure(parent, result, 'details');\n  }\n}\n/**\n * Function for on failure event in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {ReadArgs} result - specifies the result.\n * @param {string} action - specifies the action.\n * @returns {void}\n * @private\n */\n\n\nfunction onFailure(parent, result, action) {\n  createDialog(parent, 'Error', result);\n  var args = {\n    action: action,\n    error: result.error\n  };\n  parent.trigger('failure', args);\n}\n/**\n * Function for search in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} event - specifies the event.\n * @param {string} path - specifies the path.\n * @param {string} searchString - specifies the search string.\n * @param {boolean} showHiddenItems - specifies the hidden items.\n * @param {boolean} caseSensitive - specifies the casing of search text.\n * @returns {void}\n * @private\n */\n\n\nfunction Search( // eslint:disable-next-line\nparent, event, path, searchString, showHiddenItems, caseSensitive) {\n  // eslint-disable-next-line\n  var data = {\n    action: 'search',\n    path: path,\n    searchString: searchString,\n    showHiddenItems: showHiddenItems,\n    caseSensitive: caseSensitive,\n    data: parent.itemData\n  };\n  createAjax(parent, data, searchSuccess, event);\n}\n/* istanbul ignore next */\n\n/**\n * Function for search success in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {ReadArgs} result - specifies the result.\n * @param {string} event - specifies the event.\n * @returns {void}\n * @private\n */\n\n\nfunction searchSuccess(parent, result, event) {\n  if (!isNullOrUndefined(result.files)) {\n    parent.notify(event, result);\n    var args = {\n      action: 'search',\n      result: result\n    };\n    parent.trigger('success', args);\n  } else {\n    onFailure(parent, result, 'search');\n  }\n}\n/* istanbul ignore next */\n\n/**\n * Function for download in File Manager.\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} path - specifies the path.\n * @param {string[]} items - specifies the items.\n * @returns {void}\n * @private\n */\n\n\nfunction Download(parent, path, items) {\n  var downloadUrl = parent.ajaxSettings.downloadUrl ? parent.ajaxSettings.downloadUrl : parent.ajaxSettings.url; // eslint-disable-next-line\n\n  var data = {\n    'action': 'download',\n    'path': path,\n    'names': items,\n    'data': parent.itemData\n  };\n  var eventArgs = {\n    data: data,\n    cancel: false\n  };\n  parent.trigger('beforeDownload', eventArgs, function (downloadArgs) {\n    if (!downloadArgs.cancel) {\n      var form = createElement('form', {\n        id: parent.element.id + '_downloadForm',\n        attrs: {\n          action: downloadUrl,\n          method: 'post',\n          name: 'downloadForm',\n          'download': ''\n        }\n      });\n      var input = createElement('input', {\n        id: parent.element.id + '_hiddenForm',\n        attrs: {\n          name: 'downloadInput',\n          value: JSON.stringify(downloadArgs.data),\n          type: 'hidden'\n        }\n      });\n      form.appendChild(input);\n      parent.element.appendChild(form);\n      document.forms.namedItem('downloadForm').submit();\n      parent.element.removeChild(form);\n    }\n  });\n} // eslint:disable-next-line\n\n/**\n *\n * @param {IFileManager} parent - Specifies the parent element\n * @param {string} text - specifies the text string.\n * @param {ReadArgs | SelectedEventArgs} e - specifies the type of event args.\n * @param {FileDetails} details - specifies the file details.\n * @param {string[]} replaceItems - specifies the replacement.\n * @returns {void}\n * @private\n */\n\n\nfunction createDialog(parent, text, e, details, replaceItems) {\n  var options = getOptions(parent, text, e, details, replaceItems);\n\n  if (isNullOrUndefined(parent.dialogObj)) {\n    parent.dialogObj = new Dialog({\n      beforeOpen: keydownAction.bind(this, parent, options.dialogName),\n      beforeClose: function (args) {\n        triggerPopupBeforeClose(parent, parent.dialogObj, args, options.dialogName);\n      },\n      header: options.header,\n      content: options.content,\n      buttons: options.buttons,\n      animationSettings: {\n        effect: 'None'\n      },\n      showCloseIcon: true,\n      closeOnEscape: true,\n      visible: true,\n      allowDragging: true,\n      isModal: true,\n      target: parent.popupTarget ? parent.popupTarget : '#' + parent.element.id,\n      cssClass: getCssClass(parent, parent.isMobile ? MOB_POPUP : ROOT_POPUP),\n      width: '350px',\n      open: options.open,\n      close: options.close,\n      enableRtl: parent.enableRtl,\n      enableHtmlSanitizer: parent.enableHtmlSanitizer,\n      locale: parent.locale\n    });\n    parent.dialogObj.isStringTemplate = true;\n    parent.dialogObj.appendTo('#' + parent.element.id + DIALOG_ID);\n  } else {\n    changeOptions(parent, options);\n  }\n}\n/**\n *\n * @param {IFileManager} parent - Specifies the parent element.\n * @param {string} text - specifies the text string.\n * @param {string[]} replaceItems - specifies the replacement items.\n * @param {string} newPath - specifies the new path.\n * @returns {void}\n * @private\n */\n\n\nfunction createExtDialog(parent, text, replaceItems, newPath) {\n  var extOptions = getExtOptions(parent, text, replaceItems, newPath);\n  parent.isApplySame = false;\n\n  if (isNullOrUndefined(parent.extDialogObj)) {\n    parent.extDialogObj = new Dialog({\n      beforeOpen: beforeExtOpen.bind(this, parent, extOptions.dialogName),\n      beforeClose: function (args) {\n        triggerPopupBeforeClose(parent, parent.extDialogObj, args, extOptions.dialogName);\n      },\n      content: extOptions.content,\n      header: extOptions.header,\n      closeOnEscape: true,\n      allowDragging: true,\n      animationSettings: {\n        effect: 'None'\n      },\n      target: parent.popupTarget ? parent.popupTarget : '#' + parent.element.id,\n      cssClass: getCssClass(parent, parent.isMobile ? MOB_POPUP : ROOT_POPUP),\n      enableRtl: parent.enableRtl,\n      showCloseIcon: true,\n      isModal: true,\n      width: 350,\n      buttons: extOptions.buttons,\n      open: extOptions.open,\n      close: extOptions.close,\n      enableHtmlSanitizer: parent.enableHtmlSanitizer,\n      locale: parent.locale\n    });\n    parent.extDialogObj.isStringTemplate = true;\n    parent.extDialogObj.appendTo('#' + parent.element.id + EXTN_DIALOG_ID);\n  } else {\n    parent.extDialogObj.header = extOptions.header;\n    parent.extDialogObj.close = extOptions.close;\n    parent.extDialogObj.open = extOptions.open;\n    parent.extDialogObj.close = extOptions.close;\n    parent.extDialogObj.content = extOptions.content;\n    parent.extDialogObj.buttons = extOptions.buttons;\n    parent.extDialogObj.enableRtl = parent.enableRtl;\n    parent.extDialogObj.locale = parent.locale;\n    parent.extDialogObj.beforeOpen = beforeExtOpen.bind(this, parent, extOptions.dialogName);\n\n    parent.extDialogObj.beforeClose = function (args) {\n      triggerPopupBeforeClose(parent, parent.extDialogObj, args, extOptions.dialogName);\n    };\n\n    parent.extDialogObj.dataBind();\n    parent.extDialogObj.show();\n  }\n}\n/**\n *\n * @param {IFileManager} parent - Specifies the parent element.\n * @param {Dialog} dlgModule - Specifies the dialog module.\n * @param {BeforeOpenEventArgs} args - specifies the before open arguements.\n * @param {string} dialogName - specifies the dialog name.\n * @returns {void}\n * @private\n */\n\n\nfunction triggerPopupBeforeOpen(parent, dlgModule, args, dialogName) {\n  var eventArgs = {\n    cancel: args.cancel,\n    popupName: dialogName,\n    popupModule: dlgModule\n  };\n  parent.trigger('beforePopupOpen', eventArgs, function (eventargs) {\n    args.cancel = eventargs.cancel;\n  });\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {Dialog} dlgModule - specifies the dialog module.\n * @param {BeforeCloseEventArgs} args - specifies the before close event arguements.\n * @param {string} dialogName - specifies the dialog name.\n * @returns {void}\n * @private\n */\n\n\nfunction triggerPopupBeforeClose(parent, dlgModule, args, dialogName) {\n  var eventArgs = {\n    cancel: args.cancel,\n    popupModule: dlgModule,\n    popupName: dialogName\n  };\n  parent.trigger('beforePopupClose', eventArgs, function (eventargs) {\n    args.cancel = eventargs.cancel;\n\n    if (!args.cancel && args.isInteracted && (dialogName === 'Rename' || dialogName === 'Create Folder')) {\n      parent.trigger(actionFailure, {});\n    }\n  });\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {Dialog} dlgModule - specifies the dialog module.\n * @param {string} dialogName - specifies the dialog name.\n * @returns {void}\n * @private\n */\n\n\nfunction triggerPopupOpen(parent, dlgModule, dialogName) {\n  var args = {\n    popupModule: dlgModule,\n    element: dlgModule.element,\n    popupName: dialogName\n  };\n  parent.trigger('popupOpen', args);\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {Dialog} dlgModule - specifies the dialog module.\n * @param {string} dialogName - specifies the dialog name.\n * @returns {void}\n * @private\n */\n\n\nfunction triggerPopupClose(parent, dlgModule, dialogName) {\n  var args = {\n    popupModule: dlgModule,\n    element: dlgModule.element,\n    popupName: dialogName\n  };\n  parent.trigger('popupClose', args);\n} // eslint:disable-next-line\n\n/**\n *\n * @param {IFileManager} parent - Specifies the parent element.\n * @param {string} text - specifies the text string.\n * @param {string[]} replaceItems - specifies the replacement items.\n * @param {string} newPath - specifies the new path.\n * @returns {DialogOptions} - returns the dialog options.\n * @private\n */\n\n\nfunction getExtOptions(parent, text, replaceItems, newPath) {\n  var options = {\n    header: '',\n    content: '',\n    buttons: [],\n    dialogName: ''\n  };\n  var duplicateContent;\n  var item;\n  var index;\n\n  options.open = function () {\n    triggerPopupOpen(parent, parent.extDialogObj, options.dialogName);\n  };\n\n  options.close = function () {\n    triggerPopupClose(parent, parent.extDialogObj, options.dialogName);\n  };\n\n  switch (text) {\n    case 'Extension':\n      options.header = getLocaleText(parent, 'Header-Rename-Confirmation');\n      options.content = '<div>' + getLocaleText(parent, 'Content-Rename-Confirmation') + '</div>';\n      options.buttons = [{\n        buttonModel: {\n          isPrimary: true,\n          content: getLocaleText(parent, 'Button-Yes')\n        },\n        click: function () {\n          parent.extDialogObj.hide();\n          rename(parent, newPath, parent.renameText);\n        }\n      }, {\n        buttonModel: {\n          content: getLocaleText(parent, 'Button-No')\n        },\n        click: function () {\n          parent.extDialogObj.hide();\n          parent.dialogObj.hide();\n        }\n      }];\n      options.dialogName = 'Extension Change';\n      break;\n\n    case 'DuplicateItems':\n      options.dialogName = 'Duplicate Items';\n      parent.replaceItems = replaceItems;\n      item = parent.replaceItems[parent.fileLength];\n      index = item.lastIndexOf('/');\n      item = index === -1 ? item : item.substring(index);\n      options.header = getLocaleText(parent, 'Header-Duplicate');\n      duplicateContent = '<div>' + getLocaleText(parent, 'Content-Duplicate') + '</div>';\n      options.content = duplicateContent.replace('{0}', item);\n\n      options.close = function () {\n        if (!parent.isDropEnd && parent.duplicateItems.length === 0) {\n          var args = {\n            fileDetails: parent.droppedObjects\n          };\n          parent.trigger('fileDropped', args);\n          parent.isDropEnd = parent.isDragDrop = false;\n        }\n\n        triggerPopupClose(parent, parent.extDialogObj, options.dialogName);\n      };\n\n      options.buttons = [{\n        buttonModel: {\n          isPrimary: true,\n          content: getLocaleText(parent, 'Button-Yes')\n        },\n        click: function () {\n          parent.duplicateItems.push(parent.replaceItems[parent.fileLength]);\n          parent.duplicateRecords.push(getDuplicateData(parent, parent.replaceItems[parent.fileLength]));\n          parent.fileLength++;\n\n          if (replaceItems[parent.fileLength]) {\n            var item_1 = parent.replaceItems[parent.fileLength];\n            var indexval = item_1.lastIndexOf('/');\n            item_1 = indexval === -1 ? item_1 : item_1.substring(indexval);\n            parent.extDialogObj.content = duplicateContent.replace('{0}', item_1);\n            parent.extDialogObj.show();\n          } else {\n            parent.extDialogObj.hide();\n            var targetPath = parent.isDragDrop ? parent.dragPath : parent.targetPath;\n            var path = parent.isDragDrop ? parent.dropPath : parent.folderPath === '' ? parent.path : parent.folderPath;\n            var action = parent.isDragDrop ? 'move' : parent.fileAction;\n            paste(parent, targetPath, parent.duplicateItems, path, action, parent.duplicateItems, parent.duplicateRecords);\n          }\n        }\n      }, {\n        buttonModel: {\n          content: getLocaleText(parent, 'Button-No')\n        },\n        click: function () {\n          parent.fileLength++;\n\n          if (replaceItems[parent.fileLength]) {\n            var item_2 = parent.replaceItems[parent.fileLength];\n            var ind = item_2.lastIndexOf('/');\n            item_2 = ind === -1 ? item_2 : item_2.substring(ind);\n            parent.extDialogObj.content = duplicateContent.replace('{0}', item_2);\n            parent.extDialogObj.show();\n          } else {\n            parent.extDialogObj.hide();\n\n            if (parent.duplicateItems.length !== 0) {\n              var action = parent.isDragDrop ? 'move' : parent.fileAction;\n              var targetPath = parent.isDragDrop ? parent.dragPath : parent.targetPath;\n              var path = parent.isDragDrop ? parent.dropPath : parent.folderPath === '' ? parent.path : parent.folderPath;\n              paste(parent, targetPath, parent.duplicateItems, path, action, parent.duplicateItems, parent.duplicateRecords);\n            }\n          }\n        }\n      }];\n      break;\n\n    case 'UploadRetry':\n      options.dialogName = 'Retry Upload';\n      options.header = getLocaleText(parent, 'Header-Retry');\n      options.content = parent.retryFiles[0].name + '<div class=\"e-fe-retrycontent\">' + getLocaleText(parent, 'Content-Retry') + '</div>';\n      options.open = onRetryOpen.bind(this, parent);\n\n      options.close = function () {\n        parent.isRetryOpened = false;\n        retryDlgClose(parent);\n        triggerPopupClose(parent, parent.extDialogObj, options.dialogName);\n      };\n\n      options.buttons = [{\n        buttonModel: {\n          isPrimary: true,\n          content: getLocaleText(parent, 'Button-Keep-Both')\n        },\n        click: function () {\n          retryDlgUpdate(parent, true);\n        }\n      }, {\n        buttonModel: {\n          isPrimary: true,\n          content: getLocaleText(parent, 'Button-Replace')\n        },\n        click: function () {\n          retryDlgUpdate(parent, false);\n        }\n      }, {\n        buttonModel: {\n          isPrimary: true,\n          content: getLocaleText(parent, 'Button-Skip')\n        },\n        click: function () {\n          var count = 0;\n\n          if (parent.isApplySame) {\n            count = parent.retryFiles.length;\n            parent.retryFiles = [];\n            retryDlgClose(parent);\n          } else {\n            count = 1;\n            parent.retryFiles.splice(0, 1);\n\n            if (parent.retryFiles.length !== 0) {\n              createExtDialog(parent, 'UploadRetry');\n            } else {\n              retryDlgClose(parent);\n            }\n          }\n\n          parent.notify(skipUpload, {\n            count: count\n          });\n        }\n      }];\n      break;\n  }\n\n  return options;\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {boolean} isKeepBoth - checks the arguement to keep both.\n * @returns {void}\n * @private\n */\n\n\nfunction retryDlgUpdate(parent, isKeepBoth) {\n  if (parent.isApplySame) {\n    if (isKeepBoth) {\n      onKeepBothAll(parent);\n    } else {\n      onReplaceAll(parent);\n    }\n\n    retryDlgClose(parent);\n  } else {\n    parent.retryArgs.push({\n      action: isKeepBoth ? 'keepboth' : 'replace',\n      file: parent.retryFiles[0]\n    });\n    parent.uploadObj.retry(parent.retryFiles[0]);\n    parent.retryFiles.splice(0, 1);\n\n    if (parent.retryFiles.length !== 0) {\n      createExtDialog(parent, 'UploadRetry');\n    } else {\n      retryDlgClose(parent);\n    }\n  }\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction retryDlgClose(parent) {\n  var flag = true;\n\n  if (parent.isRetryOpened) {\n    parent.isRetryOpened = false;\n  } else {\n    flag = false;\n  }\n\n  var ele = select('.e-dlg-checkbox', parent.extDialogObj.element);\n\n  if (ele) {\n    remove(ele);\n  }\n\n  if (flag) {\n    parent.extDialogObj.hide();\n  } else {\n    parent.retryFiles = [];\n  }\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {object} args - specifies the arguements.\n * @returns {void}\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction onRetryOpen(parent, args) {\n  parent.isRetryOpened = true;\n  var dialogEle = getValue('element', args);\n  var container = select('.e-dlg-content', dialogEle);\n  var checkContainer = parent.createElement('div', {\n    className: 'e-dlg-checkbox'\n  });\n  var checkbox = parent.createElement('input', {\n    id: parent.element.id + '_applyall'\n  });\n  checkContainer.appendChild(checkbox);\n  container.appendChild(checkContainer);\n  var checkBoxObj = new CheckBox({\n    label: getLocaleText(parent, 'ApplyAll-Label'),\n    change: function (args) {\n      parent.isApplySame = args.checked;\n    }\n  });\n  checkBoxObj.appendTo('#' + parent.element.id + '_applyall');\n  triggerPopupOpen(parent, parent.extDialogObj, 'Retry Upload');\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction onKeepBothAll(parent) {\n  while (parent.retryFiles.length !== 0) {\n    parent.retryArgs.push({\n      action: 'keepboth',\n      file: parent.retryFiles[0]\n    });\n    parent.uploadObj.retry(parent.retryFiles[0]);\n    parent.retryFiles.splice(0, 1);\n  }\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction onReplaceAll(parent) {\n  while (parent.retryFiles.length !== 0) {\n    parent.retryArgs.push({\n      action: 'replace',\n      file: parent.retryFiles[0]\n    });\n    parent.uploadObj.retry(parent.retryFiles[0]);\n    parent.retryFiles.splice(0, 1);\n  }\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction focusInput(parent) {\n  var ele = select('#newname', parent.dialogObj.element);\n  ele.focus();\n  ele.value = '';\n  var len = ele.value.length;\n  ele.setSelectionRange(0, len);\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction onFolderDialogOpen(parent) {\n  var ele = select('#newname', parent.dialogObj.element);\n\n  if (!ele.parentElement.classList.contains('e-control-wrapper')) {\n    createInput(ele, getLocaleText(parent, 'Content-NewFolder'));\n  }\n\n  ele.parentElement.nextElementSibling.innerHTML = '';\n\n  ele.oninput = function () {\n    onValidate(parent, ele);\n  };\n\n  ele.onkeyup = function (e) {\n    var code = getKeyCode(e);\n\n    if (code === 13) {\n      onSubmit(parent);\n    }\n  };\n\n  focusInput(parent);\n  triggerPopupOpen(parent, parent.dialogObj, 'Create Folder');\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction onRenameDialogOpen(parent) {\n  var inputEle = select('#rename', parent.dialogObj.element);\n\n  if (!inputEle.parentElement.classList.contains('e-control-wrapper')) {\n    createInput(inputEle, getLocaleText(parent, 'Content-Rename'));\n  }\n\n  inputEle.parentElement.nextElementSibling.innerHTML = '';\n\n  inputEle.oninput = function () {\n    onValidate(parent, inputEle);\n  };\n\n  inputEle.onkeyup = function (e) {\n    var code = getKeyCode(e);\n\n    if (code === 13) {\n      onReSubmit(parent);\n    }\n  };\n\n  onFocusRenameInput(parent, inputEle);\n  triggerPopupOpen(parent, parent.dialogObj, 'Rename');\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {HTMLInputElement} inputEle - specifies the input element.\n * @returns {void}\n * @private\n */\n\n\nfunction onFocusRenameInput(parent, inputEle) {\n  inputEle.focus();\n  var txt = '';\n\n  if (parent.isFile && !parent.showFileExtension) {\n    var index = parent.currentItemText.lastIndexOf('.');\n    txt = index === -1 ? parent.currentItemText : parent.currentItemText.substring(0, index);\n  } else {\n    txt = parent.currentItemText;\n  }\n\n  inputEle.value = txt;\n\n  if (parent.isFile && parent.showFileExtension && inputEle.value.indexOf('.') !== -1) {\n    inputEle.setSelectionRange(0, inputEle.value.lastIndexOf('.'));\n  } else {\n    inputEle.setSelectionRange(0, inputEle.value.length);\n  }\n}\n/**\n *\n * @param {HTMLInputElement} ele - specifies the element.\n * @param {string} placeholder - specifies the place holder.\n * @returns {void}\n * @private\n */\n\n\nfunction createInput(ele, placeholder) {\n  Input.createInput({\n    element: ele,\n    properties: {\n      placeholder: placeholder\n    }\n  });\n}\n/* istanbul ignore next */\n// eslint:disable-next-line\n\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} text - specifies the text string.\n * @param {ReadArgs | SelectedEventArgs} e - specifies the event arguements.\n * @param {FileDetails} details - specifies the file details.\n * @param {string[]} replaceItems - specifies the replacement items.\n * @returns {DialogOptions} - specifies the dialog options.\n * @private\n */\n\n\nfunction getOptions(parent, text, e, details, replaceItems) {\n  var options = {\n    header: '',\n    content: '',\n    buttons: [],\n    dialogName: ''\n  };\n  var permission;\n  var formattedString;\n  var intl;\n  var strArr;\n  var fileType$$1;\n  var location;\n\n  options.open = function () {\n    triggerPopupOpen(parent, parent.dialogObj, options.dialogName);\n  };\n\n  options.close = function () {\n    triggerPopupClose(parent, parent.dialogObj, options.dialogName);\n  };\n\n  text = details && details.multipleFiles === true ? 'MultipleFileDetails' : text;\n\n  switch (text) {\n    case 'NewFolder':\n      options.dialogName = 'Create Folder';\n      options.header = getLocaleText(parent, 'Header-NewFolder');\n      options.content = '<input type=\"text\" value=\"New folder\" id=\"newname\"><div class=\"e-fe-error\"></div>';\n      options.buttons = [{\n        buttonModel: {\n          isPrimary: true,\n          content: getLocaleText(parent, 'Button-Create')\n        },\n        click: function (e) {\n          if (e.type === 'keydown') {\n            return;\n          }\n\n          onSubmit(parent);\n        }\n      }];\n      options.open = onFolderDialogOpen.bind(this, parent);\n      break;\n\n    case 'Delete':\n      options.dialogName = 'Delete';\n\n      if (parent.selectedItems.length > 1) {\n        options.content = ('<div>' + getLocaleText(parent, 'Content-Multiple-Delete') + '</div>').replace('{0}', parent.selectedItems.length.toString());\n        options.header = getLocaleText(parent, 'Header-Multiple-Delete');\n      } else {\n        options.content = '<div>' + getLocaleText(parent, parent.isFile ? 'Content-Delete' : 'Content-Folder-Delete') + '</div>';\n        options.header = getLocaleText(parent, parent.isFile ? 'Header-Delete' : 'Header-Folder-Delete');\n      }\n\n      options.buttons = [{\n        buttonModel: {\n          isPrimary: true,\n          content: getLocaleText(parent, 'Button-Yes')\n        },\n        click: function (e) {\n          onDeleteSubmit(parent);\n        }\n      }, {\n        buttonModel: {\n          content: getLocaleText(parent, 'Button-No')\n        },\n        click: function () {\n          parent.dialogObj.hide();\n        }\n      }];\n      break;\n\n    case 'Rename':\n      options.dialogName = 'Rename';\n      options.header = getLocaleText(parent, 'Header-Rename');\n      options.content = '<input type=\"text\" class=\"e-input\" id=\"rename\"><div class=\"e-fe-error\"></div>';\n      options.buttons = [{\n        buttonModel: {\n          isPrimary: true,\n          content: getLocaleText(parent, 'Button-Save')\n        },\n        click: function (e) {\n          if (e.type === 'keydown') {\n            return;\n          }\n\n          onReSubmit(parent);\n        }\n      }];\n      options.open = onRenameDialogOpen.bind(this, parent);\n      break;\n\n    case 'details':\n      options.dialogName = 'File Details';\n      intl = new Internationalization(parent.locale);\n      formattedString = intl.formatDate(new Date(details.modified), {\n        format: 'MMMM dd, yyyy HH:mm:ss'\n      });\n      permission = '';\n\n      if (!isNullOrUndefined(details.permission)) {\n        permission = '<tr><td>' + getLocaleText(parent, 'Permission') + '</td><td class=\"' + VALUE + '\" >' + objectToString(details.permission) + '</td></tr>';\n      }\n\n      options.header = details.name;\n      options.content = '<table>' + '<tr><td>' + getLocaleText(parent, 'Type') + '</td><td class=\"' + VALUE + '\" title=\"' + (details.isFile ? 'File' : 'Folder') + '\">' + (details.isFile ? 'File' : 'Folder') + '</td></tr>' + '<tr><td>' + getLocaleText(parent, 'Size') + '</td><td><span class=\"' + VALUE + '\" title =\"' + details.size + '\">' + details.size + '</span></td></tr>' + '<tr><td>' + getLocaleText(parent, 'Location') + '</td><td class=\"' + VALUE + '\" title=\"' + details.location + '\">' + details.location + '</td></tr>' + '<tr><td>' + getLocaleText(parent, 'Modified') + '</td><td class=\"' + VALUE + '\" >' + formattedString + '</td></tr>' + permission + '</table>';\n      options.buttons = [{\n        buttonModel: {\n          isPrimary: true,\n          content: getLocaleText(parent, 'Button-Ok')\n        },\n        click: function (e) {\n          parent.dialogObj.hide();\n        }\n      }];\n      break;\n\n    case 'MultipleFileDetails':\n      var index_1;\n      options.dialogName = 'File Details';\n      strArr = parent.itemData.map(function (val) {\n        index_1 = val.name.indexOf('.') + 1;\n        return index_1 === 0 && !val.isFile ? 'Folder' : index_1 !== 0 ? val.name.substr(index_1).replace(' ', '') : 'undetermined';\n      });\n\n      if (strArr[0] == undefined) {\n        strArr = details.name.split(',').map(function (val) {\n          index_1 = val.indexOf('.') + 1;\n          return index_1 === 0 ? 'Folder' : val.substr(index_1).replace(' ', '');\n        });\n      }\n\n      fileType$$1 = strArr.every(function (val, i, arr) {\n        return val === arr[0];\n      }) ? strArr[0] === 'Folder' ? 'Folder' : strArr[0].toLocaleUpperCase() + ' Type' : 'Multiple Types';\n      location = details.location;\n      options.header = details.name;\n      options.content = '<table><tr><td>' + getLocaleText(parent, 'Type') + ':</td><td class=\"' + VALUE + '\">' + fileType$$1 + '</td></tr>' + '<tr><td>' + getLocaleText(parent, 'Size') + ':</td><td>' + details.size + '<span class=\"' + VALUE + '\" title =\"' + details.size + '\"></span></td></tr>' + '<tr><td>' + getLocaleText(parent, 'Location') + ':</td><td class=\"' + VALUE + '\" title=\"' + location + '\">' + location + '</td></tr>' + '</table>';\n      options.buttons = [{\n        buttonModel: {\n          isPrimary: true,\n          content: getLocaleText(parent, 'Button-Ok')\n        },\n        click: function (e) {\n          if (e.type === 'keydown') {\n            return;\n          }\n\n          parent.dialogObj.hide();\n        }\n      }];\n      break;\n\n    case 'Error':\n      parent.notify(actionFailure, {});\n      options.dialogName = 'Error';\n\n      if (e.error.code === '401') {\n        options.header = '<span class=\"e-fe-icon e-fe-access-error\"></span><div class=\"e-fe-access-header\">' + getLocaleText(parent, 'Access-Denied') + '</div>';\n      } else {\n        options.header = getLocaleText(parent, 'Error');\n      }\n\n      options.content = '<div class=\"' + ERROR_CONTENT + '\">' + e.error.message + '</div>';\n      options.buttons = [{\n        buttonModel: {\n          isPrimary: true,\n          content: getLocaleText(parent, 'Button-Ok')\n        },\n        click: function (e) {\n          parent.dialogObj.hide();\n        }\n      }];\n      break;\n  }\n\n  return options;\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} dialogName - specifies the dialog name.\n * @param {BeforeOpenEventArgs} args - specifies the before open event arguements.\n * @returns {void}\n * @private\n */\n\n\nfunction keydownAction(parent, dialogName, args) {\n  var btnElement = selectAll('.e-btn', parent.dialogObj.element);\n  preventKeydown(btnElement);\n  triggerPopupBeforeOpen(parent, parent.dialogObj, args, dialogName);\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} dlgName - specifies the dialog name.\n * @param {BeforeOpenEventArgs} args - specifies the before open event arguements.\n * @returns {void}\n * @private\n */\n\n\nfunction beforeExtOpen(parent, dlgName, args) {\n  var btnElement = selectAll('.e-btn', parent.extDialogObj.element);\n  preventKeydown(btnElement);\n  triggerPopupBeforeOpen(parent, parent.extDialogObj, args, dlgName);\n}\n/**\n *\n * @param {HTMLInputElement[]} btnElement - specifies the button element.\n * @returns {void}\n * @private\n */\n\n\nfunction preventKeydown(btnElement) {\n  var _loop_1 = function (btnCount) {\n    btnElement[btnCount].onkeydown = function (e) {\n      if (e.keyCode === 13) {\n        e.preventDefault();\n      }\n    };\n\n    btnElement[btnCount].onkeyup = function (e) {\n      if (e.keyCode === 13) {\n        btnElement[btnCount].click();\n      }\n    };\n  };\n\n  for (var btnCount = 0; btnCount < btnElement.length; btnCount++) {\n    _loop_1(btnCount);\n  }\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {DialogOptions} options - specifies the dialog options.\n * @returns {void}\n * @private\n */\n\n\nfunction changeOptions(parent, options) {\n  parent.dialogObj.header = options.header;\n  parent.dialogObj.content = options.content;\n  parent.dialogObj.buttons = options.buttons;\n  parent.dialogObj.enableRtl = parent.enableRtl;\n  parent.dialogObj.open = options.open;\n  parent.dialogObj.close = options.close;\n  parent.dialogObj.beforeOpen = keydownAction.bind(this, parent, options.dialogName);\n\n  parent.dialogObj.beforeClose = function (args) {\n    triggerPopupBeforeClose(parent, parent.dialogObj, args, options.dialogName);\n  };\n\n  parent.dialogObj.dataBind();\n  parent.dialogObj.show();\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction onSubmit(parent) {\n  var ele = select('#newname', parent.dialogObj.element);\n  onSubmitValidate(parent, ele);\n\n  if (ele.parentElement.nextElementSibling.innerHTML !== '') {\n    return;\n  }\n\n  createFolder(parent, ele.value);\n}\n/* istanbul ignore next */\n\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction onReSubmit(parent) {\n  var ele = select('#rename', parent.dialogObj.element);\n  onSubmitValidate(parent, ele);\n\n  if (ele.parentElement.nextElementSibling.innerHTML !== '') {\n    return;\n  }\n\n  var text = ele.value;\n  var oIndex = parent.currentItemText.lastIndexOf('.');\n\n  if (parent.isFile && !parent.showFileExtension) {\n    var extn = oIndex === -1 ? '' : parent.currentItemText.substr(oIndex);\n    text += extn;\n  }\n\n  parent.renameText = text;\n\n  if (parent.currentItemText === text) {\n    parent.dialogObj.hide();\n    return;\n  }\n\n  var newPath = parent.activeModule === 'navigationpane' ? getParentPath(parent.path) : parent.path;\n  parent.renamedId = getValue('id', parent.itemData[0]);\n\n  if (parent.isFile) {\n    var oldExtension = oIndex === -1 ? '' : parent.currentItemText.substr(oIndex);\n    var nIndex = text.lastIndexOf('.');\n    var newExtension = nIndex === -1 ? '' : text.substr(nIndex);\n\n    if (parent.showFileExtension && oldExtension !== newExtension) {\n      createExtDialog(parent, 'Extension', null, newPath);\n    } else {\n      rename(parent, newPath, text);\n    }\n  } else {\n    rename(parent, newPath, text);\n  }\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction onDeleteSubmit(parent) {\n  parent.dialogObj.hide();\n  parent.notify(deleteInit, {});\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {HTMLInputElement} ele - specifies the input element.\n * @returns {void}\n * @private\n */\n\n\nfunction onValidate(parent, ele) {\n  if (/[/\\\\|*?\"<>:]/.test(ele.value)) {\n    addInvalid(parent, ele);\n  } else if (ele.value === '') {\n    ele.parentElement.nextElementSibling.innerHTML = getLocaleText(parent, 'Validation-Empty');\n  } else {\n    ele.parentElement.nextElementSibling.innerHTML = '';\n  }\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {HTMLInputElement} ele - specifies the input element.\n * @returns {void}\n * @private\n */\n\n\nfunction onSubmitValidate(parent, ele) {\n  onValidate(parent, ele);\n  var len = ele.value.length - 1;\n\n  if (ele.value !== '' && (ele.value.lastIndexOf('.') === len || ele.value.lastIndexOf(' ') === len) && (parent.showFileExtension || parent.currentItemText.lastIndexOf('.') === -1)) {\n    addInvalid(parent, ele);\n  }\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {HTMLInputElement} ele - specifies the input element.\n * @returns {void}\n * @private\n */\n\n\nfunction addInvalid(parent, ele) {\n  var error = getLocaleText(parent, 'Validation-Invalid').replace('{0}', '\"' + ele.value + '\"');\n\n  if (parent.enableHtmlSanitizer) {\n    ele.parentElement.nextElementSibling.textContent = error;\n  } else {\n    ele.parentElement.nextElementSibling.innerHTML = error;\n  }\n}\n/**\n *\n * @param {KeyboardEvent} e - specifies the keyboard event.\n * @returns {number} - returns the key code.\n * @private\n */\n\n\nfunction getKeyCode(e) {\n  var code;\n\n  if (e.keyCode) {\n    code = e.keyCode;\n  } else if (e.which) {\n    code = e.which;\n  } else {\n    code = e.charCode;\n  }\n\n  return code;\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @param {string} header - specifies the header element.\n * @param {string} imageUrl - specifies the image URL.\n * @returns {void}\n * @private\n */\n\n\nfunction createImageDialog(parent, header, imageUrl) {\n  var content = createElement('div', {\n    className: 'e-image-wrap'\n  });\n  var image = createElement('img', {\n    className: 'e-image',\n    attrs: {\n      src: imageUrl,\n      alt: header\n    }\n  });\n  content.appendChild(image);\n\n  if (isNullOrUndefined(parent.viewerObj)) {\n    parent.viewerObj = new Dialog({\n      header: header,\n      content: content,\n      animationSettings: {\n        effect: 'None'\n      },\n      showCloseIcon: true,\n      closeOnEscape: true,\n      visible: true,\n      isModal: true,\n      width: '350px',\n      height: '350px',\n      target: parent.popupTarget ? parent.popupTarget : '#' + parent.element.id,\n      cssClass: getCssClass(parent, parent.isMobile ? MOB_POPUP : ROOT_POPUP),\n      locale: parent.locale,\n      enableResize: true,\n      allowDragging: true,\n      enableHtmlSanitizer: parent.enableHtmlSanitizer,\n      position: {\n        X: 'center',\n        Y: 'center'\n      },\n      enableRtl: parent.enableRtl,\n      open: openImage.bind(this, parent),\n      close: function () {\n        triggerPopupClose(parent, parent.viewerObj, 'Image Preview');\n      },\n      beforeOpen: function (args) {\n        triggerPopupBeforeOpen(parent, parent.viewerObj, args, 'Image Preview');\n      },\n      beforeClose: function (args) {\n        triggerPopupBeforeClose(parent, parent.viewerObj, args, 'Image Preview');\n      },\n      resizing: updateImage.bind(this, parent),\n      resizeStop: updateImage.bind(this, parent)\n    });\n    parent.viewerObj.isStringTemplate = true;\n    parent.viewerObj.appendTo('#' + parent.element.id + IMG_DIALOG_ID);\n  } else {\n    parent.viewerObj.refresh();\n    parent.viewerObj.header = header;\n    parent.viewerObj.content = content;\n    parent.viewerObj.enableRtl = parent.enableRtl;\n    parent.viewerObj.dataBind();\n    parent.viewerObj.show();\n  }\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction openImage(parent) {\n  setTimeout(function () {\n    if (parent.viewerObj) {\n      parent.viewerObj.element.focus();\n    }\n  });\n  updateImage(parent);\n  triggerPopupOpen(parent, parent.viewerObj, 'Image Preview');\n}\n/**\n *\n * @param {IFileManager} parent - specifies the parent element.\n * @returns {void}\n * @private\n */\n\n\nfunction updateImage(parent) {\n  var content = select('.e-dlg-content', parent.viewerObj.element);\n  var imgWrap = select('.e-image-wrap', parent.viewerObj.element);\n  var cssObj = window.getComputedStyle(content, null);\n  var paddingWidth = cssObj ? 2 * parseFloat(cssObj.paddingRight) : 36;\n  var paddingHeight = cssObj ? 2 * parseFloat(cssObj.paddingBottom) : 20;\n  imgWrap.style.width = content.offsetWidth - paddingWidth + 'px';\n  imgWrap.style.height = content.offsetHeight - paddingHeight + 'px';\n}\n/**\n * File Manager common operations\n */\n\n/**\n * LargeIconsView module\n */\n\n\nvar LargeIconsView =\n/** @__PURE__ @class */\nfunction () {\n  /**\n   * Constructor for the LargeIcons module.\n   *\n   * @param {IFileManager} parent - specifies the parent element.\n   * @hidden\n   */\n  function LargeIconsView(parent) {\n    this.isInteraction = true;\n    this.uploadOperation = false;\n    this.count = 0;\n    this.isRendered = true;\n    this.tapCount = 0;\n    this.isPasteOperation = false;\n    this.isInteracted = true;\n    this.parent = parent;\n    this.element = select('#' + this.parent.element.id + LARGEICON_ID, this.parent.element);\n    addClass([this.element], LARGE_ICONS);\n    this.addEventListener();\n    this.keyConfigs = {\n      end: 'end',\n      home: 'home',\n      tab: 'tab',\n      moveDown: 'downarrow',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      ctrlEnd: 'ctrl+end',\n      ctrlHome: 'ctrl+home',\n      ctrlDown: 'ctrl+downarrow',\n      ctrlLeft: 'ctrl+leftarrow',\n      ctrlRight: 'ctrl+rightarrow',\n      ctrlUp: 'ctrl+uparrow',\n      shiftEnd: 'shift+end',\n      shiftHome: 'shift+home',\n      shiftDown: 'shift+downarrow',\n      shiftLeft: 'shift+leftarrow',\n      shiftRight: 'shift+rightarrow',\n      shiftUp: 'shift+uparrow',\n      csEnd: 'ctrl+shift+end',\n      csHome: 'ctrl+shift+home',\n      csDown: 'ctrl+shift+downarrow',\n      csLeft: 'ctrl+shift+leftarrow',\n      csRight: 'ctrl+shift+rightarrow',\n      csUp: 'ctrl+shift+uparrow',\n      space: 'space',\n      ctrlSpace: 'ctrl+space',\n      shiftSpace: 'shift+space',\n      csSpace: 'ctrl+shift+space',\n      ctrlA: 'ctrl+a',\n      enter: 'enter',\n      altEnter: 'alt+enter',\n      esc: 'escape',\n      del: 'delete',\n      ctrlX: this.parent.isMac ? 'cmd+x' : 'ctrl+x',\n      ctrlC: this.parent.isMac ? 'cmd+c' : 'ctrl+c',\n      ctrlV: this.parent.isMac ? 'cmd+v' : 'ctrl+v',\n      f2: 'f2',\n      shiftdel: 'shift+delete',\n      back: 'backspace',\n      ctrlD: 'ctrl+d'\n    };\n  }\n\n  LargeIconsView.prototype.render = function (args) {\n    this.parent.visitedItem = null;\n    this.startItem = null;\n    showSpinner(this.parent.element);\n\n    if (this.parent.view === 'LargeIcons') {\n      this.resetMultiSelect();\n      this.element.setAttribute('tabindex', '0');\n\n      if (this.listObj) {\n        this.unWireEvents();\n        this.removeEventListener();\n      }\n\n      this.parent.notify(hideLayout, {});\n      var iconsView = select('#' + this.parent.element.id + LARGEICON_ID, this.parent.element);\n      var ul = select('ul', iconsView);\n\n      if (ul) {\n        remove(ul);\n      }\n\n      this.listObj = {\n        ariaAttributes: {\n          itemRole: 'option',\n          listRole: 'listbox',\n          itemText: '',\n          groupItemRole: 'group',\n          wrapperRole: ''\n        },\n        showIcon: true,\n        fields: {\n          text: 'name',\n          iconCss: '_fm_icon',\n          imageUrl: '_fm_imageUrl',\n          htmlAttributes: '_fm_htmlAttr'\n        },\n        sortOrder: this.parent.sortOrder,\n        itemCreated: this.onItemCreated.bind(this),\n        enableHtmlSanitizer: this.parent.enableHtmlSanitizer\n      };\n      this.items = [];\n      this.items = this.renderList(args);\n      this.items = getSortedData(this.parent, this.items); // eslint-disable-next-line\n\n      this.listElements = ListBase.createListFromJson(createElement, this.items, this.listObj);\n      this.itemList = Array.prototype.slice.call(selectAll('.' + LIST_ITEM, this.listElements));\n      this.element.appendChild(this.listElements);\n      this.preventImgDrag();\n      this.createDragObj();\n      iconsView.classList.remove(DISPLAY_NONE);\n\n      if (this.itemList.length === 0) {\n        var emptyList = this.element.querySelector('.' + LIST_PARENT);\n        this.element.removeChild(emptyList);\n        createEmptyElement(this.parent, this.element, args);\n      } else if (this.itemList.length !== 0 && this.element.querySelector('.' + EMPTY)) {\n        this.element.removeChild(this.element.querySelector('.' + EMPTY));\n      }\n\n      if (this.isPasteOperation === true) {\n        this.selectItems(this.parent.pasteNodes);\n        this.isPasteOperation = false;\n      }\n      /* istanbul ignore next */\n\n\n      if (this.uploadOperation === true) {\n        this.selectItems(this.parent.uploadItem);\n        this.parent.setProperties({\n          selectedItems: []\n        }, true);\n        this.count++;\n\n        if (this.count === this.parent.uploadItem.length) {\n          this.uploadOperation = false;\n          this.parent.uploadItem = [];\n        }\n      }\n\n      var activeEle = this.element.querySelectorAll('.' + ACTIVE);\n\n      if (activeEle.length !== 0) {\n        this.parent.activeModule = 'largeiconsview';\n      }\n\n      for (var i = 0; i < activeEle.length; i++) {\n        activeEle[i].setAttribute('aria-selected', 'true');\n      }\n\n      this.adjustHeight();\n      this.element.style.maxHeight = '100%';\n      this.getItemCount();\n      this.addEventListener();\n      this.wireEvents();\n      this.isRendered = true;\n      hideSpinner(this.parent.element);\n\n      if (this.parent.selectedItems.length) {\n        this.checkItem();\n      }\n    }\n  };\n\n  LargeIconsView.prototype.preventImgDrag = function () {\n    var i = 0;\n\n    while (i < this.itemList.length) {\n      if (this.itemList[i].querySelector('img')) {\n        /* istanbul ignore next */\n        this.itemList[i].ondragstart = function () {\n          return false;\n        };\n      }\n\n      i++;\n    }\n  };\n\n  LargeIconsView.prototype.createDragObj = function () {\n    var _this = this;\n\n    if (!this.parent.isMobile && this.listObj) {\n      if (this.parent.allowDragAndDrop) {\n        if (this.dragObj) {\n          this.dragObj.destroy();\n        }\n\n        this.dragObj = new Draggable(this.listElements, {\n          enableTailMode: true,\n          distance: 5,\n          enableAutoScroll: true,\n          dragTarget: '.' + LARGE_ICON,\n          helper: this.dragHelper.bind(this),\n          cursorAt: this.parent.dragCursorPosition,\n          dragArea: this.parent.element,\n          dragStop: dragStopHandler.bind(this, this.parent),\n          drag: draggingHandler.bind(this, this.parent),\n          clone: true,\n          dragStart: function (args) {\n            dragStartHandler(_this.parent, args, _this.dragObj);\n          }\n        });\n      } else if (this.dragObj && !this.parent.allowDragAndDrop) {\n        this.dragObj.destroy();\n      }\n    }\n  };\n\n  LargeIconsView.prototype.dragHelper = function (args) {\n    var dragTarget = args.sender.target;\n    var dragLi = closest(dragTarget, '.e-list-item');\n\n    if (!dragLi) {\n      return null;\n    }\n\n    if (dragLi && !dragLi.classList.contains('e-active')) {\n      this.setFocus(dragLi);\n    }\n\n    var activeEle = this.element.querySelectorAll('.' + ACTIVE);\n    this.parent.activeElements = [];\n    this.parent.dragData = [];\n\n    for (var i = 0; i < activeEle.length; i++) {\n      // eslint-disable-next-line\n      this.parent.dragData.push(this.getItemObject(activeEle[i]));\n      this.parent.activeElements.push(activeEle[i]);\n    }\n\n    getModule(this.parent, dragLi);\n    this.parent.dragPath = this.parent.path;\n    createVirtualDragElement(this.parent);\n    return this.parent.virtualDragElement;\n  };\n\n  LargeIconsView.prototype.onDropInit = function (args) {\n    if (this.parent.targetModule === this.getModuleName()) {\n      var dropLi = closest(args.target, '.e-list-item'); // eslint-disable-next-line\n\n      var cwdData = getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent);\n\n      if (dropLi) {\n        // eslint-disable-next-line\n        var info = this.getItemObject(dropLi);\n        this.parent.dropPath = info.isFile ? this.parent.path : getFullPath(this.parent, info, this.parent.path);\n        this.parent.dropData = info.isFile ? cwdData : info;\n      } else {\n        this.parent.dropPath = this.parent.path;\n        this.parent.dropData = cwdData;\n      }\n    }\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} - returns the module name.\n   * @private\n   */\n\n\n  LargeIconsView.prototype.getModuleName = function () {\n    return 'largeiconsview';\n  };\n\n  LargeIconsView.prototype.adjustHeight = function () {\n    var pane = select('#' + this.parent.element.id + CONTENT_ID, this.parent.element);\n    var bar = select('#' + this.parent.element.id + BREADCRUMBBAR_ID, this.parent.element);\n    this.element.style.height = pane.offsetHeight - bar.offsetHeight + 'px';\n  };\n\n  LargeIconsView.prototype.onItemCreated = function (args) {\n    args.item.removeAttribute('aria-level');\n\n    if (!this.parent.showFileExtension && getValue('isFile', args.curData)) {\n      var textEle = args.item.querySelector('.' + LIST_TEXT);\n      var txt = getValue('name', args.curData);\n      var type = getValue('type', args.curData);\n      textEle.innerHTML = txt.substr(0, txt.length - type.length);\n    }\n\n    this.renderCheckbox(args);\n    var eventArgs = {\n      element: args.item,\n      fileDetails: args.curData,\n      module: 'LargeIconsView'\n    };\n    this.parent.trigger('fileLoad', eventArgs);\n  };\n\n  LargeIconsView.prototype.renderCheckbox = function (args) {\n    if (!this.parent.allowMultiSelection) {\n      return;\n    }\n\n    var checkElement = createCheckBox(createElement, false, {\n      checked: false,\n      cssClass: 'e-small'\n    });\n    checkElement.setAttribute('role', 'checkbox');\n    checkElement.setAttribute('aria-checked', 'false');\n    args.item.firstElementChild.insertBefore(checkElement, args.item.firstElementChild.childNodes[0]);\n  };\n\n  LargeIconsView.prototype.onLayoutChange = function (args) {\n    if (this.parent.view === 'LargeIcons') {\n      this.destroy();\n      this.render(args);\n      /* istanbul ignore next */\n\n      if (getValue('name', args) === 'layout-change' && this.parent.fileAction === 'move' && this.parent.isCut && this.parent.selectedNodes && this.parent.selectedNodes.length !== 0) {\n        var indexes = this.getIndexes(this.parent.selectedNodes);\n        var length_1 = 0;\n\n        while (length_1 < indexes.length) {\n          addBlur(this.itemList[indexes[length_1]]);\n          length_1++;\n        }\n      }\n\n      var activeEle = this.element.querySelectorAll('.' + ACTIVE);\n\n      if (activeEle.length !== 0) {\n        this.element.focus();\n      }\n\n      this.checkItem();\n      this.parent.isLayoutChange = false;\n    } else {\n      this.element.setAttribute('tabindex', '-1');\n    }\n  };\n\n  LargeIconsView.prototype.checkItem = function () {\n    var checkEle = this.element.querySelectorAll('.' + ACTIVE);\n\n    if (checkEle) {\n      var checkLength = 0;\n\n      while (checkLength < checkEle.length) {\n        this.checkState(checkEle[checkLength], true);\n        checkLength++;\n      }\n    }\n  }; // eslint-disable-next-line\n\n\n  LargeIconsView.prototype.renderList = function (args) {\n    var i = 0; // eslint-disable-next-line\n\n    var items = JSON.parse(JSON.stringify(args.files));\n\n    while (i < items.length) {\n      var icon = fileType(items[i]);\n      var name_1 = getValue('name', items[i]);\n      var selected = getItemName(this.parent, items[i]);\n      var className = this.parent.selectedItems && this.parent.selectedItems.indexOf(selected) !== -1 ? LARGE_ICON + ' e-active' : LARGE_ICON;\n\n      if (!hasEditAccess(items[i])) {\n        className += ' ' + getAccessClass(items[i]);\n      }\n\n      if (icon === ICON_IMAGE && this.parent.showThumbnail && hasReadAccess(items[i])) {\n        var imgUrl = getImageUrl(this.parent, items[i]);\n        setValue('_fm_imageUrl', imgUrl, items[i]);\n        setValue('_fm_imageAttr', {\n          alt: name_1\n        }, items[i]);\n      } else {\n        setValue('_fm_icon', icon, items[i]);\n      }\n\n      setValue('_fm_htmlAttr', {\n        class: className,\n        title: name_1\n      }, items[i]);\n      i++;\n    }\n\n    return items;\n  };\n\n  LargeIconsView.prototype.onFinalizeEnd = function (args) {\n    this.render(args);\n  };\n\n  LargeIconsView.prototype.onCreateEnd = function (args) {\n    if (this.parent.view !== 'LargeIcons') {\n      return;\n    }\n\n    this.onLayoutChange(args);\n    this.clearSelect();\n    this.selectItems([getValue(this.parent.hasId ? 'id' : 'name', this.parent.createdItem)]);\n    this.parent.createdItem = null;\n    this.parent.largeiconsviewModule.element.focus();\n  };\n\n  LargeIconsView.prototype.onSelectedData = function () {\n    if (this.parent.activeModule === 'largeiconsview') {\n      this.updateSelectedData();\n    }\n  };\n\n  LargeIconsView.prototype.onDeleteInit = function () {\n    if (this.parent.activeModule === 'largeiconsview') {\n      Delete(this.parent, this.parent.selectedItems, this.parent.path, 'delete');\n    }\n  };\n  /* istanbul ignore next */\n\n\n  LargeIconsView.prototype.onDeleteEnd = function (args) {\n    if (this.parent.view !== 'LargeIcons') {\n      return;\n    }\n\n    this.onLayoutChange(args);\n    this.parent.setProperties({\n      selectedItems: []\n    }, true);\n    this.clearSelect();\n  };\n\n  LargeIconsView.prototype.onRefreshEnd = function (args) {\n    if (this.parent.view !== 'LargeIcons') {\n      return;\n    }\n\n    this.onLayoutChange(args);\n  };\n\n  LargeIconsView.prototype.onRenameInit = function () {\n    if (this.parent.activeModule === 'largeiconsview' && this.parent.selectedItems.length === 1) {\n      this.updateRenameData();\n    }\n  };\n\n  LargeIconsView.prototype.onPathChanged = function (args) {\n    this.parent.isCut = false;\n    /* istanbul ignore next */\n\n    if (this.parent.breadcrumbbarModule.searchObj.element.value === '') {\n      this.parent.searchedItems = [];\n    }\n\n    if (this.parent.view === 'LargeIcons') {\n      removeBlur(this.parent);\n      this.parent.setProperties({\n        selectedItems: []\n      }, true);\n      this.onLayoutChange(args);\n\n      if (this.parent.renamedItem) {\n        this.clearSelect();\n        this.addSelection(this.parent.renamedItem);\n        this.parent.renamedItem = null;\n      }\n    }\n  };\n\n  LargeIconsView.prototype.onOpenInit = function (args) {\n    if (this.parent.activeModule === 'largeiconsview') {\n      this.doOpenAction(args.target);\n    }\n  };\n\n  LargeIconsView.prototype.onHideLayout = function () {\n    if (this.parent.view !== 'LargeIcons' && this.element) {\n      this.element.classList.add(DISPLAY_NONE);\n    }\n  };\n\n  LargeIconsView.prototype.onSelectAllInit = function () {\n    if (this.parent.view === 'LargeIcons') {\n      this.startItem = this.getFirstItem();\n      var lastItem = this.getLastItem();\n      var eveArgs = {\n        ctrlKey: true,\n        shiftKey: true\n      };\n      this.doSelection(lastItem, eveArgs);\n      this.isInteraction = true;\n      this.isInteracted = true;\n    }\n  };\n\n  LargeIconsView.prototype.onClearAllInit = function () {\n    if (this.parent.view === 'LargeIcons') {\n      this.clearSelection();\n      this.isInteraction = true;\n      this.isInteracted = true;\n    }\n  };\n\n  LargeIconsView.prototype.onBeforeRequest = function () {\n    this.isRendered = false;\n  };\n\n  LargeIconsView.prototype.onAfterRequest = function () {\n    this.isRendered = true;\n  };\n  /* istanbul ignore next */\n\n\n  LargeIconsView.prototype.onSearch = function (args) {\n    if (this.parent.view === 'LargeIcons') {\n      this.parent.setProperties({\n        selectedItems: []\n      }, true);\n      this.parent.notify(selectionChanged, {});\n      this.parent.searchedItems = args.files;\n      this.onLayoutChange(args);\n    }\n  };\n\n  LargeIconsView.prototype.onLayoutRefresh = function () {\n    if (this.parent.view !== 'LargeIcons') {\n      return;\n    }\n\n    this.adjustHeight();\n  };\n\n  LargeIconsView.prototype.onUpdateSelectionData = function () {\n    if (this.parent.view !== 'LargeIcons') {\n      return;\n    }\n\n    this.updateSelectedData();\n  };\n\n  LargeIconsView.prototype.onPathColumn = function () {\n    if (this.parent.view === 'LargeIcons' && !isNullOrUndefined(this.listObj) && this.parent.breadcrumbbarModule.searchObj.element.value === '' && !this.parent.isFiltered && this.parent.sortBy === 'filterPath') {\n      this.parent.sortBy = 'name';\n      this.parent.notify(sortByChange, {});\n    }\n  };\n\n  LargeIconsView.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(pathColumn, this.onPathColumn);\n    this.parent.off(finalizeEnd, this.onFinalizeEnd);\n    this.parent.off(createEnd, this.onCreateEnd);\n    this.parent.off(selectedData, this.onSelectedData);\n    this.parent.off(deleteInit, this.onDeleteInit);\n    this.parent.off(deleteEnd, this.onDeleteEnd);\n    this.parent.off(refreshEnd, this.onRefreshEnd);\n    this.parent.off(pathChanged, this.onPathChanged);\n    this.parent.off(layoutChange, this.onLayoutChange);\n    this.parent.off(search, this.onSearch);\n    this.parent.off(openInit, this.onOpenInit);\n    this.parent.off(openEnd, this.onPathChanged);\n    this.parent.off(modelChanged, this.onPropertyChanged);\n    this.parent.off(methodCall, this.onMethodCall);\n    this.parent.off(actionFailure, this.onActionFailure);\n    this.parent.off(renameInit, this.onRenameInit);\n    this.parent.off(renameEnd, this.onPathChanged);\n    this.parent.off(hideLayout, this.onHideLayout);\n    this.parent.off(selectAllInit, this.onSelectAllInit);\n    this.parent.off(clearAllInit, this.onClearAllInit);\n    this.parent.off(menuItemData, this.onMenuItemData);\n    this.parent.off(beforeRequest, this.onBeforeRequest);\n    this.parent.off(afterRequest, this.onAfterRequest);\n    this.parent.off(splitterResize, this.splitterResizeHandler);\n    this.parent.off(resizeEnd, this.resizeHandler);\n    this.parent.off(pasteInit, this.onpasteInit);\n    this.parent.off(pasteEnd, this.onpasteEnd);\n    this.parent.off(cutCopyInit, this.oncutCopyInit);\n    this.parent.off(dropInit, this.onDropInit);\n    this.parent.off(detailsInit, this.onDetailsInit);\n    this.parent.off(layoutRefresh, this.onLayoutRefresh);\n    this.parent.off(dropPath, this.onDropPath);\n    this.parent.off(updateSelectionData, this.onUpdateSelectionData);\n    this.parent.off(filterEnd, this.onPathChanged);\n  };\n\n  LargeIconsView.prototype.addEventListener = function () {\n    this.parent.on(pathColumn, this.onPathColumn, this);\n    this.parent.on(finalizeEnd, this.onFinalizeEnd, this);\n    this.parent.on(createEnd, this.onCreateEnd, this);\n    this.parent.on(refreshEnd, this.onRefreshEnd, this);\n    this.parent.on(selectedData, this.onSelectedData, this);\n    this.parent.on(pathChanged, this.onPathChanged, this);\n    this.parent.on(deleteInit, this.onDeleteInit, this);\n    this.parent.on(pasteInit, this.onpasteInit, this);\n    this.parent.on(deleteEnd, this.onDeleteEnd, this);\n    this.parent.on(layoutChange, this.onLayoutChange, this);\n    this.parent.on(search, this.onSearch, this);\n    this.parent.on(openInit, this.onOpenInit, this);\n    this.parent.on(renameInit, this.onRenameInit, this);\n    this.parent.on(renameEnd, this.onPathChanged, this);\n    this.parent.on(openEnd, this.onPathChanged, this);\n    this.parent.on(modelChanged, this.onPropertyChanged, this);\n    this.parent.on(methodCall, this.onMethodCall, this);\n    this.parent.on(actionFailure, this.onActionFailure, this);\n    this.parent.on(hideLayout, this.onHideLayout, this);\n    this.parent.on(selectAllInit, this.onSelectAllInit, this);\n    this.parent.on(clearAllInit, this.onClearAllInit, this);\n    this.parent.on(menuItemData, this.onMenuItemData, this);\n    this.parent.on(beforeRequest, this.onBeforeRequest, this);\n    this.parent.on(afterRequest, this.onAfterRequest, this);\n    this.parent.on(dropInit, this.onDropInit, this);\n    this.parent.on(detailsInit, this.onDetailsInit, this);\n    this.parent.on(splitterResize, this.splitterResizeHandler, this);\n    this.parent.on(resizeEnd, this.resizeHandler, this);\n    this.parent.on(pasteEnd, this.onpasteEnd, this);\n    this.parent.on(cutCopyInit, this.oncutCopyInit, this);\n    this.parent.on(layoutRefresh, this.onLayoutRefresh, this);\n    this.parent.on(dropPath, this.onDropPath, this);\n    this.parent.on(updateSelectionData, this.onUpdateSelectionData, this);\n    this.parent.on(filterEnd, this.onPathChanged, this);\n  };\n\n  LargeIconsView.prototype.onActionFailure = function () {\n    this.isInteraction = true;\n    this.isInteracted = true;\n  }; // eslint-disable-next-line\n\n\n  LargeIconsView.prototype.onMenuItemData = function (args) {\n    if (this.parent.activeModule === this.getModuleName()) {\n      var ele = closest(args.target, 'li');\n      this.parent.itemData = [this.getItemObject(ele)];\n    }\n  };\n\n  LargeIconsView.prototype.onDetailsInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      if (this.parent.selectedItems.length !== 0) {\n        this.updateSelectedData();\n      } else {\n        this.parent.itemData = [getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent)];\n      }\n    }\n  };\n\n  LargeIconsView.prototype.onpasteInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      this.parent.itemData = this.parent.folderPath === '' ? [getPathObject(this.parent)] : [this.getItemObject(select('.e-active', this.element))];\n    }\n  };\n\n  LargeIconsView.prototype.oncutCopyInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      var activeEle = this.element.querySelectorAll('.' + ACTIVE);\n      this.parent.activeRecords = [];\n      this.parent.activeElements = [];\n\n      for (var i = 0; i < activeEle.length; i++) {\n        this.parent.activeElements.push(activeEle[i]);\n        this.parent.activeRecords.push(this.getItemObject(activeEle[i]));\n      }\n    }\n  };\n\n  LargeIconsView.prototype.onpasteEnd = function (args) {\n    if (this.parent.view === 'LargeIcons') {\n      this.isPasteOperation = true;\n\n      if (this.parent.path === this.parent.destinationPath || this.parent.path === getDirectoryPath(this.parent, args)) {\n        this.onPathChanged(args);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.onDropPath = function (args) {\n    if (this.parent.view === 'LargeIcons') {\n      this.isPasteOperation = true;\n      this.onPathChanged(args);\n    }\n  };\n\n  LargeIconsView.prototype.onPropertyChanged = function (e) {\n    var currentSelected;\n\n    if (e.module !== this.getModuleName() && e.module !== 'common') {\n      return;\n    }\n\n    for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'allowDragAndDrop':\n          this.createDragObj();\n          break;\n\n        case 'height':\n          this.adjustHeight();\n          break;\n\n        case 'selectedItems':\n          this.isInteraction = false;\n          this.isInteracted = false;\n          currentSelected = isNullOrUndefined(this.parent.selectedItems) ? [] : this.parent.selectedItems.slice(0);\n          currentSelected = this.parent.allowMultiSelection ? currentSelected : currentSelected.slice(currentSelected.length - 1);\n          this.parent.setProperties({\n            selectedItems: []\n          }, true);\n          this.onClearAllInit();\n\n          if (currentSelected.length) {\n            this.selectItems(currentSelected);\n          }\n\n          this.parent.setProperties({\n            selectedItems: this.parent.selectedItems\n          }, true);\n          this.isInteraction = true;\n          this.isInteracted = true;\n          break;\n\n        case 'showThumbnail':\n          refresh(this.parent);\n          break;\n\n        case 'showFileExtension':\n          read(this.parent, pathChanged, this.parent.path);\n          break;\n\n        case 'showHiddenItems':\n          read(this.parent, pathChanged, this.parent.path);\n          break;\n\n        case 'allowMultiSelection':\n          if (this.parent.view !== 'LargeIcons') {\n            break;\n          }\n\n          refresh(this.parent);\n          break;\n\n        case 'view':\n          updateLayout(this.parent, 'LargeIcons');\n          break;\n      }\n    }\n  };\n\n  LargeIconsView.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeEventListener();\n\n    if (this.listObj) {\n      this.unWireEvents();\n    }\n  };\n\n  LargeIconsView.prototype.wireEvents = function () {\n    this.wireClickEvent(true);\n    this.keyboardModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keyup'\n    });\n    this.keyboardDownModule = new KeyboardEvents(this.element, {\n      keyAction: this.keydownActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n    EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n  };\n\n  LargeIconsView.prototype.unWireEvents = function () {\n    this.wireClickEvent(false);\n    EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n    this.keyboardModule.destroy();\n    this.keyboardDownModule.destroy();\n  };\n  /* istanbul ignore next */\n\n\n  LargeIconsView.prototype.onMouseOver = function (e) {\n    var targetEle = closest(e.target, '.e-list-item');\n    removeBlur(this.parent, 'hover');\n\n    if (targetEle !== null) {\n      targetEle.classList.add(HOVER);\n    }\n  };\n\n  LargeIconsView.prototype.wireClickEvent = function (toBind) {\n    if (toBind) {\n      // eslint-disable-next-line\n      var proxy_1 = this;\n      this.clickObj = new Touch(this.element, {\n        tap: function (eve) {\n          eve.originalEvent.preventDefault();\n\n          if (proxy_1.parent.isDevice) {\n            proxy_1.tapCount = eve.tapCount;\n            proxy_1.tapEvent = eve;\n            setTimeout(function () {\n              if (proxy_1.tapCount > 0) {\n                proxy_1.doTapAction(proxy_1.tapEvent);\n              }\n\n              proxy_1.tapCount = 0;\n            }, 350);\n          } else {\n            if (eve.tapCount === 2 && eve.originalEvent.which !== 3) {\n              proxy_1.dblClickHandler(eve);\n            } else {\n              proxy_1.clickHandler(eve);\n            }\n          }\n        },\n        tapHold: function (e) {\n          if (proxy_1.parent.isDevice) {\n            proxy_1.multiSelect = proxy_1.parent.allowMultiSelection ? true : false;\n\n            if (proxy_1.parent.allowMultiSelection) {\n              addClass([proxy_1.parent.element], MULTI_SELECT);\n            }\n\n            proxy_1.clickHandler(e);\n          }\n        }\n      });\n    } else {\n      if (this.clickObj) {\n        this.clickObj.destroy();\n      }\n    }\n  };\n\n  LargeIconsView.prototype.doTapAction = function (eve) {\n    var target = eve.originalEvent.target;\n    var item = closest(target, '.' + LIST_ITEM);\n\n    if (this.multiSelect || target.classList.contains(LIST_PARENT) || isNullOrUndefined(item)) {\n      this.clickHandler(eve);\n    } else {\n      this.parent.isFile = false;\n      this.updateType(item);\n\n      if (!this.parent.isFile) {\n        this.dblClickHandler(eve);\n      } else if (eve.tapCount === 2) {\n        this.clickHandler(eve);\n        this.dblClickHandler(eve);\n      } else {\n        this.clickHandler(eve);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.clickHandler = function (e) {\n    var target = e.originalEvent.target;\n    removeBlur(this.parent, 'hover');\n    this.doSelection(target, e.originalEvent);\n    this.parent.activeModule = 'largeiconsview';\n  };\n  /**\n   *\n   * @param {Element} target - specifies the target element.\n   * @param {TouchEventArgs | MouseEventArgs | KeyboardEventArgs} e - specifies event arguements.\n   * @returns {void}\n   * @hidden\n   */\n\n\n  LargeIconsView.prototype.doSelection = function (target, e) {\n    var item = closest(target, '.' + LIST_ITEM);\n    var cList = target.classList;\n    this.parent.isFile = false;\n    var action = 'select';\n\n    if (e.which === 3 && !isNullOrUndefined(item) && item.classList.contains(ACTIVE)) {\n      this.updateType(item);\n      return;\n    } else if (!isNullOrUndefined(item)) {\n      if (this.parent.allowMultiSelection && item.classList.contains(ACTIVE) && (e.ctrlKey || target.classList.contains(CHECK))) {\n        action = 'unselect';\n      }\n\n      var fileSelectionArgs = this.triggerSelection(action, item);\n\n      if (fileSelectionArgs.cancel !== true) {\n        if ((!this.parent.allowMultiSelection || !this.multiSelect && e && !e.ctrlKey) && !cList.contains(FRAME)) {\n          this.updateType(item);\n          this.clearSelect();\n        }\n\n        if (this.parent.allowMultiSelection && e.shiftKey) {\n          if (!(e && e.ctrlKey)) {\n            this.clearSelect();\n          }\n\n          if (!this.startItem) {\n            this.startItem = item;\n          }\n\n          var startIndex = this.itemList.indexOf(this.startItem);\n          var endIndex = this.itemList.indexOf(item);\n\n          if (startIndex > endIndex) {\n            for (var i = startIndex; i >= endIndex; i--) {\n              this.addActive(this.itemList[i]);\n            }\n          } else {\n            for (var i = startIndex; i <= endIndex; i++) {\n              this.addActive(this.itemList[i]);\n            }\n          }\n\n          this.addFocus(this.itemList[endIndex]);\n        } else {\n          this.startItem = item;\n\n          if (this.parent.allowMultiSelection && item.classList.contains(ACTIVE)) {\n            this.removeActive(item);\n          } else {\n            this.addActive(item);\n          }\n\n          this.addFocus(item);\n        }\n\n        if (this.parent.selectedItems.length === 0) {\n          this.resetMultiSelect();\n        }\n\n        this.parent.notify(selectionChanged, {});\n        this.triggerSelect(action, item);\n      }\n    } else {\n      this.clearSelection();\n    }\n\n    if (!isNullOrUndefined(item)) {\n      this.updateType(item);\n    }\n  };\n\n  LargeIconsView.prototype.dblClickHandler = function (e) {\n    this.parent.activeModule = 'largeiconsview';\n    var target = e.originalEvent.target;\n    this.doOpenAction(target);\n  };\n\n  LargeIconsView.prototype.clearSelection = function () {\n    this.clearSelect();\n    this.resetMultiSelect();\n    this.parent.notify(selectionChanged, {});\n  };\n\n  LargeIconsView.prototype.resetMultiSelect = function () {\n    this.multiSelect = false;\n    removeClass([this.parent.element], MULTI_SELECT);\n  };\n\n  LargeIconsView.prototype.doOpenAction = function (target) {\n    var _this = this;\n\n    if (isNullOrUndefined(target)) {\n      return;\n    }\n\n    var item = closest(target, '.' + LIST_ITEM);\n    this.parent.isFile = false;\n\n    if (!isNullOrUndefined(item)) {\n      this.updateType(item); // eslint-disable-next-line\n\n      var details_1 = this.getItemObject(item);\n\n      if (!hasReadAccess(details_1)) {\n        createDeniedDialog(this.parent, details_1, permissionRead);\n        return;\n      }\n\n      var eventArgs = {\n        cancel: false,\n        fileDetails: details_1,\n        module: 'LargeIconsView'\n      };\n      this.parent.trigger('fileOpen', eventArgs, function (fileOpenArgs) {\n        if (!fileOpenArgs.cancel) {\n          var text = getValue('name', details_1);\n\n          if (!_this.parent.isFile) {\n            var val = _this.parent.breadcrumbbarModule.searchObj.element.value;\n\n            if (val === '' && !_this.parent.isFiltered) {\n              var id = getValue('id', details_1);\n              _this.parent.oldPath = _this.parent.path;\n              var newPath = _this.parent.path + (isNullOrUndefined(id) ? text : id) + '/';\n\n              _this.parent.setProperties({\n                path: newPath\n              }, true);\n\n              _this.parent.pathNames.push(text);\n\n              _this.parent.pathId.push(getValue('_fm_id', details_1));\n\n              _this.parent.itemData = [details_1];\n              openAction(_this.parent);\n            } else {\n              openSearchFolder(_this.parent, details_1);\n            }\n\n            _this.parent.isFiltered = false;\n\n            _this.parent.setProperties({\n              selectedItems: []\n            }, true);\n          } else {\n            var icon = fileType(details_1);\n\n            if (icon === ICON_IMAGE) {\n              var imgUrl = getImageUrl(_this.parent, details_1);\n              createImageDialog(_this.parent, text, imgUrl);\n            }\n          }\n        }\n      });\n    }\n  };\n\n  LargeIconsView.prototype.updateType = function (item) {\n    var folder = select('.' + FOLDER, item);\n    this.parent.isFile = isNullOrUndefined(folder) ? true : false;\n  };\n  /* istanbul ignore next */\n  // eslint:disable-next-line\n\n\n  LargeIconsView.prototype.keydownActionHandler = function (e) {\n    if (!this.isRendered) {\n      return;\n    }\n\n    switch (e.action) {\n      case 'end':\n      case 'home':\n      case 'moveDown':\n      case 'moveLeft':\n      case 'moveRight':\n      case 'moveUp':\n      case 'ctrlEnd':\n      case 'shiftEnd':\n      case 'csEnd':\n      case 'ctrlHome':\n      case 'shiftHome':\n      case 'csHome':\n      case 'ctrlDown':\n      case 'shiftDown':\n      case 'csDown':\n      case 'ctrlLeft':\n      case 'shiftLeft':\n      case 'csLeft':\n      case 'ctrlRight':\n      case 'shiftRight':\n      case 'csRight':\n      case 'space':\n      case 'ctrlSpace':\n      case 'shiftSpace':\n      case 'csSpace':\n      case 'ctrlA':\n      case 'enter':\n      case 'altEnter':\n      case 'esc':\n      case 'del':\n      case 'shiftdel':\n      case 'ctrlC':\n      case 'ctrlV':\n      case 'ctrlX':\n      case 'f2':\n      case 'ctrlD':\n        e.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  };\n  /* istanbul ignore next */\n  // eslint:disable-next-line\n\n\n  LargeIconsView.prototype.keyActionHandler = function (e) {\n    if (!this.isRendered) {\n      return;\n    }\n\n    var fItem = this.getFocusedItem();\n    var firstItem = this.getFirstItem();\n    var lastItem = this.getLastItem();\n\n    switch (e.action) {\n      case 'end':\n        this.navigateItem(lastItem);\n        break;\n\n      case 'home':\n        this.navigateItem(firstItem);\n        break;\n\n      case 'tab':\n        if (!isNullOrUndefined(fItem)) {\n          this.addFocus(fItem);\n        } else if (!isNullOrUndefined(firstItem)) {\n          this.addFocus(firstItem);\n        }\n\n        break;\n\n      case 'moveDown':\n        this.navigateDown(fItem, true);\n        break;\n\n      case 'moveLeft':\n        this.navigateRight(fItem, false);\n        break;\n\n      case 'moveRight':\n        this.navigateRight(fItem, true);\n        break;\n\n      case 'moveUp':\n        this.navigateDown(fItem, false);\n        break;\n\n      case 'ctrlEnd':\n      case 'shiftEnd':\n      case 'csEnd':\n        this.csEndKey(lastItem, e);\n        break;\n\n      case 'ctrlHome':\n      case 'shiftHome':\n      case 'csHome':\n        this.csHomeKey(firstItem, e);\n        break;\n\n      case 'ctrlDown':\n      case 'shiftDown':\n      case 'csDown':\n        this.csDownKey(fItem, e);\n        break;\n\n      case 'ctrlLeft':\n      case 'shiftLeft':\n      case 'csLeft':\n        this.csLeftKey(fItem, e);\n        break;\n\n      case 'ctrlRight':\n      case 'shiftRight':\n      case 'csRight':\n        this.csRightKey(fItem, e);\n        break;\n\n      case 'ctrlUp':\n      case 'shiftUp':\n      case 'csUp':\n        this.csUpKey(fItem, e);\n        break;\n\n      case 'space':\n        this.spaceKey(fItem);\n        break;\n\n      case 'ctrlSpace':\n      case 'shiftSpace':\n      case 'csSpace':\n        if (!isNullOrUndefined(fItem)) {\n          this.doSelection(fItem, e);\n        }\n\n        break;\n\n      case 'ctrlA':\n        this.ctrlAKey(firstItem, lastItem);\n        break;\n\n      case 'enter':\n        this.doOpenAction(this.parent.visitedItem ? this.parent.visitedItem : this.getVisitedItem());\n        break;\n\n      case 'altEnter':\n        this.parent.notify(detailsInit, {});\n        GetDetails(this.parent, this.parent.selectedItems, this.parent.path, 'details');\n        break;\n\n      case 'esc':\n        removeActive(this.parent);\n        break;\n\n      case 'del':\n      case 'shiftdel':\n        this.performDelete();\n        break;\n\n      case 'ctrlC':\n        copyFiles(this.parent);\n        break;\n\n      case 'ctrlV':\n        this.parent.folderPath = '';\n        pasteHandler(this.parent);\n        break;\n\n      case 'ctrlX':\n        cutFiles(this.parent);\n        break;\n\n      case 'f2':\n        this.performRename();\n        break;\n\n      case 'ctrlD':\n        this.doDownload();\n        break;\n    }\n  };\n\n  LargeIconsView.prototype.doDownload = function () {\n    this.updateSelectedData();\n    doDownload(this.parent);\n  };\n\n  LargeIconsView.prototype.performDelete = function () {\n    if (this.parent.selectedItems && this.parent.selectedItems.length > 0) {\n      this.updateSelectedData(); // eslint-disable-next-line\n\n      var data = this.parent.itemData;\n\n      for (var i = 0; i < data.length; i++) {\n        if (!hasEditAccess(data[i])) {\n          createDeniedDialog(this.parent, data[i], permissionEdit);\n          return;\n        }\n      }\n\n      createDialog(this.parent, 'Delete');\n    }\n  };\n\n  LargeIconsView.prototype.performRename = function () {\n    if (this.parent.selectedItems.length === 1) {\n      this.updateRenameData();\n      doRename(this.parent);\n    }\n  };\n\n  LargeIconsView.prototype.updateRenameData = function () {\n    var item = select('.' + LIST_ITEM + '.' + ACTIVE, this.element); // eslint-disable-next-line\n\n    var data = this.getItemObject(item);\n    updateRenamingData(this.parent, data);\n  };\n\n  LargeIconsView.prototype.getVisitedItem = function () {\n    var item = this.parent.selectedItems[this.parent.selectedItems.length - 1];\n    var indexes = this.getIndexes([item], this.parent.hasId);\n    return this.itemList[indexes[0]];\n  };\n\n  LargeIconsView.prototype.getFocusedItem = function () {\n    return select('.' + LIST_ITEM + '.' + FOCUS, this.element);\n  };\n\n  LargeIconsView.prototype.getActiveItem = function () {\n    return select('.' + LIST_ITEM + '.' + ACTIVE, this.element);\n  };\n\n  LargeIconsView.prototype.getFirstItem = function () {\n    return this.itemList[0];\n  };\n\n  LargeIconsView.prototype.getLastItem = function () {\n    return this.itemList[this.itemList.length - 1];\n  };\n\n  LargeIconsView.prototype.navigateItem = function (item) {\n    this.setFocus(item);\n  };\n\n  LargeIconsView.prototype.navigateDown = function (fItem, isTowards) {\n    var nItem = this.getNextItem(fItem, isTowards, this.perRow);\n    this.setFocus(nItem);\n  };\n\n  LargeIconsView.prototype.navigateRight = function (fItem, isTowards) {\n    var nItem = this.getNextItem(fItem, isTowards);\n    this.setFocus(nItem);\n  };\n\n  LargeIconsView.prototype.getNextItem = function (li, isTowards, perRow) {\n    if (isNullOrUndefined(li)) {\n      return this.getFocusedItem() || this.getActiveItem() || this.getFirstItem();\n    }\n\n    var index = this.itemList.indexOf(li);\n    var nextItem;\n\n    do {\n      if (isTowards) {\n        index = perRow ? index + perRow : index + 1;\n      } else {\n        index = perRow ? index - perRow : index - 1;\n      }\n\n      nextItem = this.itemList[index];\n\n      if (isNullOrUndefined(nextItem)) {\n        return li;\n      }\n    } while (!isVisible(nextItem));\n\n    return nextItem;\n  };\n\n  LargeIconsView.prototype.setFocus = function (nextItem) {\n    if (!isNullOrUndefined(nextItem)) {\n      var fileSelectionArgs = this.triggerSelection('select', nextItem);\n\n      if (fileSelectionArgs.cancel !== true) {\n        this.startItem = nextItem;\n        this.clearSelect();\n        this.addActive(nextItem);\n        this.addFocus(nextItem);\n        this.parent.notify(selectionChanged, {});\n        this.triggerSelect('select', nextItem);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.spaceKey = function (fItem) {\n    if (!isNullOrUndefined(fItem) && !fItem.classList.contains(ACTIVE)) {\n      var fileSelectionArgs = this.triggerSelection('select', fItem);\n\n      if (fileSelectionArgs.cancel !== true) {\n        this.addActive(fItem);\n        this.parent.notify(selectionChanged, {});\n        this.triggerSelect('select', fItem);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.ctrlAKey = function (firstItem, lastItem) {\n    if (this.parent.allowMultiSelection && !isNullOrUndefined(firstItem)) {\n      this.startItem = firstItem;\n      var eveArgs = {\n        ctrlKey: true,\n        shiftKey: true\n      };\n      var liParent = this.element.querySelector('.' + LIST_PARENT);\n      var liScrPos = liParent.scrollTop;\n      var getCurFocusedItem = this.getFocusedItem();\n      this.doSelection(lastItem, eveArgs);\n      liParent.scrollTop = liScrPos;\n\n      if (!isNullOrUndefined(getCurFocusedItem)) {\n        this.addFocus(getCurFocusedItem);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.csEndKey = function (lastItem, e) {\n    if (!this.parent.allowMultiSelection) {\n      this.navigateItem(lastItem);\n    } else if (!isNullOrUndefined(lastItem)) {\n      if (e.action === 'ctrlEnd') {\n        this.addFocus(lastItem);\n      } else {\n        this.doSelection(lastItem, e);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.csHomeKey = function (firstItem, e) {\n    if (!this.parent.allowMultiSelection) {\n      this.navigateItem(firstItem);\n    } else if (!isNullOrUndefined(firstItem)) {\n      if (e.action === 'ctrlHome') {\n        this.addFocus(firstItem);\n      } else {\n        this.doSelection(firstItem, e);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.csDownKey = function (fItem, e) {\n    if (!this.parent.allowMultiSelection) {\n      this.navigateDown(fItem, true);\n    } else {\n      var dItem = this.getNextItem(fItem, true, this.perRow);\n\n      if (!isNullOrUndefined(dItem)) {\n        if (e.action === 'ctrlDown') {\n          this.addFocus(dItem);\n        } else {\n          this.doSelection(dItem, e);\n        }\n      }\n    }\n  };\n\n  LargeIconsView.prototype.csLeftKey = function (fItem, e) {\n    if (!this.parent.allowMultiSelection) {\n      this.navigateRight(fItem, false);\n    } else {\n      var lItem = this.getNextItem(fItem, false);\n\n      if (!isNullOrUndefined(lItem)) {\n        if (e.action === 'ctrlLeft') {\n          this.addFocus(lItem);\n        } else {\n          this.doSelection(lItem, e);\n        }\n      }\n    }\n  };\n\n  LargeIconsView.prototype.csRightKey = function (fItem, e) {\n    if (!this.parent.allowMultiSelection) {\n      this.navigateRight(fItem, true);\n    } else {\n      var rItem = this.getNextItem(fItem, true);\n\n      if (!isNullOrUndefined(rItem)) {\n        if (e.action === 'ctrlRight') {\n          this.addFocus(rItem);\n        } else {\n          this.doSelection(rItem, e);\n        }\n      }\n    }\n  };\n\n  LargeIconsView.prototype.csUpKey = function (fItem, e) {\n    if (!this.parent.allowMultiSelection) {\n      this.navigateDown(fItem, false);\n    } else {\n      var uItem = this.getNextItem(fItem, false, this.perRow);\n\n      if (!isNullOrUndefined(uItem)) {\n        if (e.action === 'ctrlUp') {\n          this.addFocus(uItem);\n        } else {\n          this.doSelection(uItem, e);\n        }\n      }\n    }\n  };\n\n  LargeIconsView.prototype.addActive = function (nextItem) {\n    if (!isNullOrUndefined(nextItem)) {\n      if (!nextItem.classList.contains(ACTIVE)) {\n        this.parent.selectedItems.push(this.getDataName(nextItem));\n        this.parent.setProperties({\n          selectedItems: this.parent.selectedItems\n        }, true);\n        addClass([nextItem], [ACTIVE]);\n        nextItem.setAttribute('aria-selected', 'true');\n        this.checkState(nextItem, true);\n      }\n\n      this.parent.visitedItem = nextItem;\n    }\n  };\n\n  LargeIconsView.prototype.removeActive = function (preItem) {\n    if (!isNullOrUndefined(preItem)) {\n      removeClass([preItem], [ACTIVE]);\n\n      if (this.parent.allowMultiSelection) {\n        preItem.setAttribute('aria-selected', 'false');\n      } else {\n        preItem.removeAttribute('aria-selected');\n      }\n\n      this.checkState(preItem, false);\n      var index = this.parent.selectedItems.indexOf(this.getDataName(preItem));\n\n      if (index > -1) {\n        this.parent.selectedItems.splice(index, 1);\n        this.parent.setProperties({\n          selectedItems: this.parent.selectedItems\n        }, true);\n      }\n\n      this.parent.visitedItem = null;\n    }\n  };\n\n  LargeIconsView.prototype.getDataName = function (item) {\n    // eslint-disable-next-line\n    var data = this.getItemObject(item);\n    return getItemName(this.parent, data);\n  };\n\n  LargeIconsView.prototype.addFocus = function (item) {\n    this.element.setAttribute('tabindex', '-1');\n    var fItem = this.getFocusedItem();\n\n    if (fItem) {\n      fItem.removeAttribute('tabindex');\n      removeClass([fItem], [FOCUS]);\n    }\n\n    addClass([item], [FOCUS]);\n    item.setAttribute('tabindex', '0');\n    item.focus();\n  };\n\n  LargeIconsView.prototype.checkState = function (item, toCheck) {\n    if (!this.parent.allowMultiSelection) {\n      return;\n    }\n\n    var checkEle = select('.' + FRAME, item);\n\n    if (isNullOrUndefined(checkEle)) {\n      return;\n    }\n\n    if (toCheck) {\n      if (!checkEle.classList.contains(CHECK)) {\n        addClass([checkEle], CHECK);\n        closest(checkEle, '.' + CB_WRAP).setAttribute('aria-checked', 'true');\n      }\n    } else {\n      if (checkEle.classList.contains(CHECK)) {\n        removeClass([checkEle], CHECK);\n        closest(checkEle, '.' + CB_WRAP).setAttribute('aria-checked', 'false');\n      }\n    }\n  };\n\n  LargeIconsView.prototype.clearSelect = function () {\n    var eles = Array.prototype.slice.call(selectAll('.' + ACTIVE, this.listElements));\n    var fileSelectionArgs;\n\n    if (eles.length !== 0) {\n      fileSelectionArgs = this.triggerSelection('unselect', eles[0]);\n\n      if (fileSelectionArgs.cancel !== true) {\n        for (var i = 0, len = eles.length; i < len; i++) {\n          this.removeActive(eles[i]);\n        }\n      }\n\n      this.triggerSelect('unselect', eles[0]);\n    }\n  };\n\n  LargeIconsView.prototype.resizeHandler = function () {\n    this.getItemCount();\n\n    if (!isNullOrUndefined(this.listObj)) {\n      this.adjustHeight();\n    }\n  };\n\n  LargeIconsView.prototype.splitterResizeHandler = function () {\n    this.getItemCount();\n  };\n\n  LargeIconsView.prototype.getItemCount = function () {\n    var perRow = 1;\n\n    if (this.itemList) {\n      for (var i = 0, len = this.itemList.length - 1; i < len; i++) {\n        if (this.itemList[i].getBoundingClientRect().top === this.itemList[i + 1].getBoundingClientRect().top) {\n          perRow++;\n        } else {\n          break;\n        }\n      }\n    }\n\n    this.perRow = perRow;\n  };\n\n  LargeIconsView.prototype.triggerSelection = function (action, item) {\n    // eslint-disable-next-line\n    var data = this.getItemObject(item);\n    var eventArgs = {\n      action: action,\n      fileDetails: data,\n      isInteracted: this.isInteraction,\n      cancel: false,\n      target: item\n    };\n    this.parent.trigger('fileSelection', eventArgs);\n    this.isInteraction = true;\n    return eventArgs;\n  };\n\n  LargeIconsView.prototype.triggerSelect = function (action, item) {\n    // eslint-disable-next-line\n    var data = this.getItemObject(item);\n    this.parent.visitedData = data;\n    var eventArgs = {\n      action: action,\n      fileDetails: data,\n      isInteracted: this.isInteracted\n    };\n    this.parent.trigger('fileSelect', eventArgs);\n    this.isInteracted = true;\n  };\n\n  LargeIconsView.prototype.selectItems = function (items) {\n    var indexes = this.getIndexes(items, this.parent.hasId);\n\n    for (var j = 0, len = indexes.length; j < len; j++) {\n      var eveArgs = {\n        ctrlKey: true,\n        shiftKey: false\n      };\n      this.doSelection(this.itemList[indexes[j]], eveArgs);\n    }\n  };\n\n  LargeIconsView.prototype.getIndexes = function (items, byId) {\n    var indexes = [];\n    var filter$$1 = byId ? 'id' : 'name';\n\n    for (var i = 0, len = this.items.length; i < len; i++) {\n      if (items.indexOf(getValue(filter$$1, this.items[i])) !== -1) {\n        indexes.push(i);\n      }\n    }\n\n    return indexes;\n  }; // eslint-disable-next-line\n\n\n  LargeIconsView.prototype.getItemObject = function (item) {\n    var index = this.itemList.indexOf(item);\n    return this.items[index];\n  }; // eslint-disable-next-line\n\n\n  LargeIconsView.prototype.addSelection = function (data) {\n    // eslint-disable-next-line\n    var resultData = [];\n\n    if (this.parent.hasId) {\n      resultData = new DataManager(this.items).executeLocal(new Query().where('id', 'equal', this.parent.renamedId, false));\n    } else {\n      // eslint-disable-next-line\n      var newData = new DataManager(this.items).executeLocal(new Query().where('name', 'equal', getValue('name', data), false));\n\n      if (newData.length > 0) {\n        resultData = new DataManager(newData).executeLocal(new Query().where('filterPath', 'equal', this.parent.filterPath, false));\n      }\n    }\n\n    if (resultData.length > 0) {\n      var index = this.items.indexOf(resultData[0]);\n      var eveArgs = {\n        ctrlKey: true,\n        shiftKey: false\n      };\n      this.doSelection(this.itemList[index], eveArgs);\n    }\n  };\n\n  LargeIconsView.prototype.updateSelectedData = function () {\n    // eslint-disable-next-line\n    var data = [];\n    var items = selectAll('.' + LIST_ITEM + '.' + ACTIVE, this.element);\n\n    for (var i = 0; i < items.length; i++) {\n      data[i] = this.getItemObject(items[i]);\n    }\n\n    this.parent.itemData = data;\n  }; // eslint-disable-next-line\n\n\n  LargeIconsView.prototype.onMethodCall = function (args) {\n    if (this.parent.view !== 'LargeIcons') {\n      return;\n    }\n\n    var action = getValue('action', args);\n\n    switch (action) {\n      case 'deleteFiles':\n        this.deleteFiles(getValue('ids', args));\n        break;\n\n      case 'downloadFiles':\n        this.downloadFiles(getValue('ids', args));\n        break;\n\n      case 'openFile':\n        this.openFile(getValue('id', args));\n        break;\n\n      case 'renameFile':\n        this.isInteraction = false;\n        this.isInteracted = false;\n        this.renameFile(getValue('id', args), getValue('newName', args));\n        break;\n\n      case 'createFolder':\n        this.isInteraction = false;\n        this.isInteracted = false;\n        break;\n\n      case 'clearSelection':\n        this.isInteraction = false;\n        this.isInteracted = false;\n        this.onClearAllInit();\n        break;\n\n      case 'selectAll':\n        this.isInteraction = false;\n        this.isInteracted = false;\n        this.onSelectAllInit();\n        break;\n    }\n  };\n\n  LargeIconsView.prototype.getItemsIndex = function (items) {\n    var indexes = [];\n    var isFilter = this.parent.breadcrumbbarModule.searchObj.element.value !== '' || this.parent.isFiltered ? true : false;\n    var filterName = this.parent.hasId ? 'id' : 'name';\n\n    if (this.parent.hasId || !isFilter) {\n      for (var i = 0, len = this.items.length; i < len; i++) {\n        if (items.indexOf(getValue(filterName, this.items[i])) !== -1) {\n          indexes.push(i);\n        }\n      }\n    } else {\n      for (var i = 0, len = this.items.length; i < len; i++) {\n        var name_2 = getValue('filterPath', this.items[i]) + getValue('name', this.items[i]);\n\n        if (items.indexOf(name_2) !== -1 || items.indexOf(getValue(filterName, this.items[i])) !== -1) {\n          indexes.push(i);\n        }\n      }\n    }\n\n    return indexes;\n  };\n\n  LargeIconsView.prototype.deleteFiles = function (ids) {\n    this.parent.activeModule = 'largeiconsview';\n\n    if (isNullOrUndefined(ids)) {\n      this.performDelete();\n      return;\n    }\n\n    var indexes = this.getItemsIndex(ids);\n\n    if (indexes.length === 0) {\n      return;\n    } // eslint-disable-next-line\n\n\n    var data = [];\n    var newIds = [];\n\n    for (var i = 0; i < indexes.length; i++) {\n      data[i] = this.items[indexes[i]];\n      newIds[i] = getItemName(this.parent, data[i]);\n    }\n\n    doDeleteFiles(this.parent, data, newIds);\n  };\n\n  LargeIconsView.prototype.downloadFiles = function (ids) {\n    if (isNullOrUndefined(ids)) {\n      this.doDownload();\n      return;\n    }\n\n    var index = this.getItemsIndex(ids);\n\n    if (index.length === 0) {\n      return;\n    } // eslint-disable-next-line\n\n\n    var data = [];\n    var newIds = [];\n\n    for (var i = 0; i < index.length; i++) {\n      data[i] = this.items[index[i]];\n      newIds[i] = getItemName(this.parent, data[i]);\n    }\n\n    doDownloadFiles(this.parent, data, newIds);\n  };\n\n  LargeIconsView.prototype.openFile = function (id) {\n    if (isNullOrUndefined(id)) {\n      return;\n    }\n\n    var indexes = this.getItemsIndex([id]);\n\n    if (indexes.length > 0) {\n      this.doOpenAction(this.itemList[indexes[0]]);\n    }\n  };\n\n  LargeIconsView.prototype.renameFile = function (id, name) {\n    this.parent.activeModule = 'largeiconsview';\n\n    if (isNullOrUndefined(id)) {\n      this.performRename();\n      return;\n    }\n\n    var indexes = this.getItemsIndex([id]);\n\n    if (indexes.length > 0) {\n      updateRenamingData(this.parent, this.items[indexes[0]]);\n\n      if (isNullOrUndefined(name)) {\n        doRename(this.parent);\n      } else {\n        if (!hasEditAccess(this.parent.itemData[0])) {\n          createDeniedDialog(this.parent, this.parent.itemData[0], permissionEdit);\n        } else {\n          rename(this.parent, this.parent.path, name);\n        }\n      }\n    }\n  };\n\n  return LargeIconsView;\n}();\n/**\n * BreadCrumbBar module\n */\n\n\nvar BreadCrumbBar =\n/** @__PURE__ @class */\nfunction () {\n  /**\n   * constructor for addressbar module\n   *\n   * @hidden\n   * @param {IFileManager} parent - specifies parent element.\n   * @private\n   *\n   */\n  function BreadCrumbBar(parent) {\n    this.addressPath = '';\n    this.addressBarLink = '';\n    this.searchTimer = null;\n    this.searchWrapWidth = null;\n    this.parent = parent;\n    this.keyConfigs = {\n      enter: 'enter'\n    };\n    this.render();\n  }\n\n  BreadCrumbBar.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName() && e.module !== 'common') {\n      return;\n    }\n\n    for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n      var value = e.newProp.searchSettings;\n\n      switch (prop) {\n        case 'searchSettings':\n          if (!isNullOrUndefined(value.allowSearchOnTyping)) {\n            this.searchEventBind(value.allowSearchOnTyping);\n          }\n\n          if (this.parent.breadcrumbbarModule.searchObj.value && this.parent.breadcrumbbarModule.searchObj.value !== '' && !(!isNullOrUndefined(value.allowSearchOnTyping) && isNullOrUndefined(value.filterType) && isNullOrUndefined(value.ignoreCase))) {\n            searchWordHandler(this.parent, this.parent.breadcrumbbarModule.searchObj.value, false);\n          }\n\n          break;\n      }\n    }\n  };\n\n  BreadCrumbBar.prototype.render = function () {\n    this.addEventListener();\n  };\n\n  BreadCrumbBar.prototype.onPathChange = function () {\n    var pathNames = this.parent.pathNames;\n    var paths = this.parent.path.split('/');\n    var addressbarUL = this.parent.createElement('ul', {\n      className: 'e-addressbar-ul'\n    });\n    var addressbarLI = null;\n    var pathNamesLen = pathNames.length;\n\n    if (pathNames.length > 0) {\n      var id = '';\n\n      for (var i = 0; i < pathNamesLen; i++) {\n        var addressATag = null;\n        addressbarLI = this.parent.createElement('li', {\n          className: 'e-address-list-item'\n        });\n\n        for (var j = 0; j <= i; j++) {\n          id = id + paths[j] + '/';\n        }\n\n        addressbarLI.setAttribute('data-utext', id);\n\n        if (i !== 0) {\n          var icon = createElement('span', {\n            className: ICONS\n          });\n          addressbarLI.appendChild(icon);\n        }\n\n        if (pathNamesLen - i !== 1) {\n          addressATag = createElement('a', {\n            className: LIST_TEXT\n          });\n          addressbarLI.setAttribute('tabindex', '0');\n        } else {\n          addressATag = createElement('span', {\n            className: LIST_TEXT\n          });\n        }\n\n        id = '';\n        addressATag.innerText = pathNames[i];\n        addressbarLI.appendChild(addressATag);\n        addressbarUL.appendChild(addressbarLI);\n      }\n\n      var ulElement = this.parent.breadCrumbBarNavigation.querySelector('.e-addressbar-ul');\n\n      if (!isNullOrUndefined(ulElement)) {\n        if (!isNullOrUndefined(this.subMenuObj)) {\n          this.subMenuObj.destroy();\n        }\n\n        remove(ulElement);\n      }\n\n      var searchWrap = this.parent.breadCrumbBarNavigation.querySelector('.e-search-wrap');\n\n      if (!searchWrap) {\n        this.parent.breadCrumbBarNavigation.insertBefore(addressbarUL, searchWrap);\n      } else {\n        this.parent.breadCrumbBarNavigation.appendChild(addressbarUL);\n      }\n\n      this.updateBreadCrumbBar(addressbarUL);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.updateBreadCrumbBar = function (addresBarUL) {\n    var liElements = addresBarUL.querySelectorAll('li');\n    var ulElement = this.parent.breadCrumbBarNavigation.querySelector('.e-addressbar-ul');\n    var style = window.getComputedStyle(ulElement, null);\n    var pRight = parseFloat(style.getPropertyValue('padding-right'));\n    var pLeft = parseFloat(style.getPropertyValue('padding-left'));\n    var breadCrumbBarWidth = ulElement.offsetWidth - pRight - pLeft;\n    var addressbarUL = this.parent.createElement('ul', {\n      className: 'e-addressbar-ul'\n    });\n    var liElementsWidth = 0;\n    var liElementsWidths = [];\n\n    for (var i = 0; i < liElements.length; i++) {\n      var width = liElements[i].clientWidth;\n      liElementsWidths.push(width);\n      liElementsWidth = liElementsWidth + width;\n    }\n\n    if (!isNullOrUndefined(ulElement)) {\n      remove(ulElement);\n    }\n\n    var searchContainer = this.parent.createElement('div');\n    searchContainer.setAttribute('class', 'e-search-wrap');\n    var id = this.parent.element.id + SEARCH_ID;\n    var searchInput = createElement('input', {\n      id: id,\n      attrs: {\n        autocomplete: 'off',\n        'aria-label': getLocaleText(this.parent, 'Search')\n      }\n    });\n    searchContainer.appendChild(searchInput);\n    var searchEle = this.parent.breadCrumbBarNavigation.querySelector('.e-search-wrap .e-input');\n\n    if (isNullOrUndefined(searchEle)) {\n      this.parent.breadCrumbBarNavigation.appendChild(searchContainer);\n      var span = createElement('span', {\n        className: 'e-icons e-fe-search'\n      });\n      EventHandler.add(span, 'click', this.onShowInput, this);\n      searchInput.parentElement.insertBefore(span, searchInput);\n      this.searchObj = new TextBox({\n        value: '',\n        showClearButton: true,\n        placeholder: getLocaleText(this.parent, 'Search'),\n        focus: this.onFocus.bind(this),\n        blur: this.onBlur.bind(this)\n      });\n      this.searchObj.appendTo('#' + this.parent.element.id + SEARCH_ID);\n      this.searchEventBind(this.parent.searchSettings.allowSearchOnTyping);\n      var search$$1 = this.searchObj.element.nextElementSibling;\n      EventHandler.add(search$$1, 'mousedown', this.searchChangeHandler.bind(this), this);\n      EventHandler.add(this.searchObj.element, 'keyup', this.onKeyUp.bind(this), this);\n    }\n\n    var searchWrap = this.parent.breadCrumbBarNavigation.querySelector('.e-search-wrap');\n    breadCrumbBarWidth = breadCrumbBarWidth - (this.searchWrapWidth ? this.searchWrapWidth : searchWrap.offsetWidth);\n\n    if (liElementsWidth > breadCrumbBarWidth) {\n      var i = liElements.length;\n\n      while (i--) {\n        var diff = breadCrumbBarWidth - liElementsWidths[i];\n\n        if (diff > 40) {\n          addressbarUL.insertBefore(liElements[i], addressbarUL.querySelector('li'));\n          breadCrumbBarWidth = diff;\n        } else {\n          // eslint-disable-next-line\n          var items = [];\n\n          for (var j = 0; j <= i; j++) {\n            var liElement = liElements[j];\n            items.push({\n              text: liElement.innerText,\n              utext: liElement.getAttribute('data-utext')\n            });\n          }\n\n          var subMenuLi = this.parent.createElement('li', {\n            className: 'e-breadcrumb-menu'\n          }); // eslint-disable-next-line\n\n          var attributes = {\n            className: 'e-breadcrumb-submenu'\n          };\n          var subMenuSpan = this.parent.createElement('button', attributes);\n          subMenuLi.appendChild(subMenuSpan);\n          addressbarUL.insertBefore(subMenuLi, addressbarUL.querySelector('li'));\n          this.subMenuObj = new DropDownButton({\n            items: items,\n            cssClass: 'e-caret-hide e-submenu',\n            iconCss: ICON_BREADCRUMB,\n            iconPosition: 'Top',\n            enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n            beforeItemRender: this.addSubMenuAttributes.bind(this),\n            select: this.subMenuSelectOperations.bind(this)\n          });\n          this.subMenuObj.isStringTemplate = true;\n          this.subMenuObj.appendTo(subMenuSpan);\n          break;\n        }\n      }\n\n      this.parent.breadCrumbBarNavigation.insertBefore(addressbarUL, searchWrap);\n    } else {\n      this.parent.breadCrumbBarNavigation.insertBefore(addresBarUL, searchWrap);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.onFocus = function () {\n    var wrap = closest(this.searchObj.element, '.e-search-wrap');\n    wrap.classList.add('e-focus');\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.onKeyUp = function () {\n    this.parent.notify(pathColumn, {\n      args: this.parent\n    });\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.onBlur = function () {\n    var wrap = closest(this.searchObj.element, '.e-search-wrap');\n    wrap.classList.remove('e-focus');\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.subMenuSelectOperations = function (event) {\n    // eslint-disable-next-line\n    var args = {\n      target: event.element\n    };\n    this.addressPathClickHandler(args);\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.addSubMenuAttributes = function (args) {\n    args.element.setAttribute('data-utext', getValue('utext', args.item));\n    var anchor = this.parent.createElement('a', {\n      className: 'e-list-text'\n    });\n    args.element.appendChild(anchor);\n  };\n\n  BreadCrumbBar.prototype.searchEventBind = function (allow) {\n    if (allow) {\n      this.searchObj.input = this.searchChangeHandler.bind(this);\n      this.searchObj.change = null;\n    } else {\n      this.searchObj.change = this.searchChangeHandler.bind(this);\n      this.searchObj.input = null;\n    }\n  };\n\n  BreadCrumbBar.prototype.searchChangeHandler = function (args) {\n    var _this = this;\n\n    if (!isNullOrUndefined(args.value)) {\n      this.parent.isFiltered = false;\n\n      if (this.parent.searchSettings.allowSearchOnTyping) {\n        window.clearTimeout(this.searchTimer);\n        this.searchTimer = window.setTimeout(function () {\n          searchWordHandler(_this.parent, args.value, false);\n        }, 300);\n      } else {\n        searchWordHandler(this.parent, args.value, false);\n      }\n    }\n  };\n\n  BreadCrumbBar.prototype.addressPathClickHandler = function (e) {\n    var li = e.target;\n\n    if (li.nodeName === 'LI' || li.nodeName === 'A') {\n      var node = li.nodeName === 'LI' ? li.children[0] : li;\n\n      if (!isNullOrUndefined(node)) {\n        this.parent.isFiltered = false;\n        var currentPath = this.updatePath(node);\n        this.parent.itemData = [getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent)];\n        this.triggerFileOpen(this.parent.itemData[0]);\n        read(this.parent, pathChanged, currentPath);\n        var treeNodeId = this.parent.pathId[this.parent.pathId.length - 1];\n        this.parent.notify(updateTreeSelection, {\n          module: 'treeview',\n          selectedNode: treeNodeId\n        });\n      }\n    }\n  }; // eslint-disable-next-line\n\n\n  BreadCrumbBar.prototype.triggerFileOpen = function (data) {\n    var eventArgs = {\n      cancel: false,\n      fileDetails: data,\n      module: 'BreadCrumbBar'\n    };\n    delete eventArgs.cancel;\n    this.parent.trigger('fileOpen', eventArgs);\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.onShowInput = function () {\n    if (this.parent.isMobile) {\n      if (this.parent.element.classList.contains(FILTER)) {\n        removeClass([this.parent.element], FILTER);\n        this.searchWrapWidth = null;\n      } else {\n        var searchWrap = this.parent.breadCrumbBarNavigation.querySelector('.e-search-wrap');\n        this.searchWrapWidth = searchWrap.offsetWidth;\n        addClass([this.parent.element], FILTER);\n        this.searchObj.element.focus();\n      }\n    }\n  };\n\n  BreadCrumbBar.prototype.updatePath = function (list) {\n    var li = closest(list, 'li');\n    var liElementId = li.getAttribute('data-utext');\n    this.addressBarLink = liElementId;\n    var link = this.addressBarLink.split('/');\n    var ids = this.parent.pathId;\n    var names = this.parent.pathNames;\n    this.parent.pathId = [];\n    this.parent.pathNames = [];\n    var newpath = '';\n\n    for (var i = 0, len = link.length - 1; i < len; i++) {\n      this.parent.pathId.push(ids[i]);\n      this.parent.pathNames.push(names[i]);\n      newpath += link[i] + '/';\n    }\n\n    this.parent.setProperties({\n      path: newpath\n    }, true);\n    return newpath;\n  };\n\n  BreadCrumbBar.prototype.onUpdatePath = function () {\n    this.onPathChange();\n    this.removeSearchValue();\n  };\n\n  BreadCrumbBar.prototype.onCreateEnd = function () {\n    this.onPathChange();\n  };\n\n  BreadCrumbBar.prototype.onRenameEnd = function () {\n    this.onPathChange();\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.onDeleteEnd = function () {\n    this.onUpdatePath();\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.removeSearchValue = function () {\n    this.parent.isFiltered = false;\n\n    if (this.searchObj && (this.searchObj.value !== '' || this.searchObj.element.value !== '')) {\n      this.searchObj.value = '';\n      this.searchObj.element.value = '';\n      this.searchObj.dataBind();\n    }\n  };\n\n  BreadCrumbBar.prototype.onResize = function () {\n    this.onPathChange();\n  };\n\n  BreadCrumbBar.prototype.onPasteEnd = function () {\n    this.onPathChange();\n  };\n\n  BreadCrumbBar.prototype.addEventListener = function () {\n    this.keyboardModule = new KeyboardEvents(this.parent.breadCrumbBarNavigation, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n    this.parent.on(modelChanged, this.onPropertyChanged, this);\n    EventHandler.add(this.parent.breadCrumbBarNavigation, 'click', this.addressPathClickHandler, this);\n    this.parent.on(destroy, this.destroy, this);\n    this.parent.on(pathChanged, this.onUpdatePath, this);\n    this.parent.on(finalizeEnd, this.onUpdatePath, this);\n    this.parent.on(refreshEnd, this.onUpdatePath, this);\n    this.parent.on(openEnd, this.onUpdatePath, this);\n    this.parent.on(createEnd, this.onCreateEnd, this);\n    this.parent.on(renameEnd, this.onRenameEnd, this);\n    this.parent.on(deleteEnd, this.onDeleteEnd, this);\n    this.parent.on(splitterResize, this.onResize, this);\n    this.parent.on(pasteEnd, this.onPasteEnd, this);\n    this.parent.on(resizeEnd, this.onResize, this);\n    this.parent.on(searchTextChange, this.onSearchTextChange, this);\n    this.parent.on(dropInit, this.onDropInit, this);\n    this.parent.on(layoutRefresh, this.onResize, this);\n    this.parent.on(dropPath, this.onPathChange, this);\n  };\n\n  BreadCrumbBar.prototype.keyActionHandler = function (e) {\n    switch (e.action) {\n      case 'enter':\n        this.addressPathClickHandler(e);\n        break;\n    }\n  };\n\n  BreadCrumbBar.prototype.removeEventListener = function () {\n    this.keyboardModule.destroy();\n    this.parent.off(pathChanged, this.onUpdatePath);\n    this.parent.off(finalizeEnd, this.onUpdatePath);\n    this.parent.off(refreshEnd, this.onUpdatePath);\n    this.parent.off(openEnd, this.onUpdatePath);\n    this.parent.off(pasteEnd, this.onPasteEnd);\n    this.parent.off(createEnd, this.onCreateEnd);\n    this.parent.off(renameEnd, this.onRenameEnd);\n    this.parent.off(deleteEnd, this.onDeleteEnd);\n    this.parent.off(splitterResize, this.onResize);\n    this.parent.off(resizeEnd, this.onResize);\n    this.parent.off(searchTextChange, this.onSearchTextChange);\n    this.parent.off(dropInit, this.onDropInit);\n    this.parent.off(layoutRefresh, this.onResize);\n    this.parent.off(dropPath, this.onPathChange);\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.onDropInit = function (args) {\n    if (this.parent.targetModule === this.getModuleName()) {\n      var liEle = args.target.closest('li');\n      this.parent.dropPath = this.updatePath(liEle.children[0]);\n      this.parent.dropData = getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent);\n      this.triggerFileOpen(this.parent.dropData);\n      var treeNodeId = this.parent.pathId[this.parent.pathId.length - 1];\n      this.parent.notify(updateTreeSelection, {\n        module: 'treeview',\n        selectedNode: treeNodeId\n      });\n    }\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} - returns the module name\n   * @private\n   */\n\n\n  BreadCrumbBar.prototype.getModuleName = function () {\n    return 'breadcrumbbar';\n  };\n\n  BreadCrumbBar.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeEventListener();\n    /* istanbul ignore next */\n\n    if (!isNullOrUndefined(this.subMenuObj)) {\n      this.subMenuObj.destroy();\n    }\n\n    if (!isNullOrUndefined(this.searchObj)) {\n      this.searchObj.destroy();\n    }\n  };\n\n  BreadCrumbBar.prototype.onSearchTextChange = function (args) {\n    this.searchObj.element.placeholder = this.parent.searchSettings.placeholder != null ? this.parent.searchSettings.placeholder : getLocaleText(this.parent, 'Search') + ' ' + args.cwd.name;\n  };\n\n  return BreadCrumbBar;\n}();\n/**\n * ContextMenu module\n */\n\n\nvar ContextMenu$2 =\n/** @__PURE__ @class */\nfunction () {\n  /**\n   * Constructor for the ContextMenu module\n   *\n   * @param {IFileManager} parent - Specifies the parent element.\n   * @hidden\n   */\n  function ContextMenu$$1(parent) {\n    this.currentItems = [];\n    this.currentElement = null;\n    this.disabledItems = [];\n    this.parent = parent;\n    this.render();\n  }\n\n  ContextMenu$$1.prototype.render = function () {\n    this.keyConfigs = {\n      downarrow: 'downarrow',\n      uparrow: 'uparrown'\n    };\n    this.contextMenu = new ContextMenu({\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale,\n      target: '#' + this.parent.element.id,\n      enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n      beforeItemRender: this.onBeforeItemRender.bind(this),\n      select: this.onSelect.bind(this),\n      beforeOpen: this.onBeforeOpen.bind(this),\n      beforeClose: this.onBeforeClose.bind(this),\n      cssClass: getCssClass(this.parent, ROOT_POPUP)\n    });\n    this.contextMenu.isStringTemplate = true;\n    this.contextMenu.appendTo('#' + this.parent.element.id + CONTEXT_MENU_ID);\n    this.addEventListener();\n  };\n  /* istanbul ignore next */\n\n\n  ContextMenu$$1.prototype.onBeforeItemRender = function (args) {\n    if (args.item.id === this.getMenuId('largeiconsview')) {\n      var iconSpan = createElement('span');\n      var element = args.element;\n      element.insertBefore(iconSpan, this.parent.view === 'LargeIcons' ? element.childNodes[1] : element.childNodes[0]);\n      iconSpan.setAttribute('class', ICON_LARGE + ' ' + MENU_ICON);\n    }\n\n    if (args.item.id === this.getMenuId('detailsview')) {\n      var iconSpan = createElement('span');\n      var element = args.element;\n      element.insertBefore(iconSpan, this.parent.view === 'Details' ? element.childNodes[1] : element.childNodes[0]);\n      iconSpan.setAttribute('class', ICON_GRID + ' ' + MENU_ICON);\n    }\n  };\n\n  ContextMenu$$1.prototype.onBeforeClose = function () {\n    this.menuTarget = null;\n  };\n  /* istanbul ignore next */\n\n\n  ContextMenu$$1.prototype.onBeforeOpen = function (args) {\n    var _this = this;\n\n    this.disabledItems = [];\n    var selected = false;\n    var uid; // eslint-disable-next-line\n\n    var data;\n    var treeFolder = false;\n    var target = args.event.target;\n    this.menuTarget = this.targetNodeElement = target;\n    this.currentElement = args.element;\n\n    if (target.classList.contains('e-spinner-pane')) {\n      target = this.parent.navigationpaneModule.activeNode.getElementsByClassName(FULLROW)[0];\n      this.menuTarget = this.targetNodeElement = target;\n    }\n\n    this.targetElement = this.parent.view === 'Details' ? closest(target, 'tr.e-row') : target;\n    var view = this.getTargetView(target);\n    this.updateActiveModule();\n    /* istanbul ignore next */\n\n    if (target.classList.contains(TREE_VIEW) || closest(target, 'th') || closest(target, '#' + this.parent.element.id + BREADCRUMBBAR_ID) || closest(target, '#' + this.parent.element.id + TOOLBAR_ID)) {\n      args.cancel = true; // eslint:disable-next-line\n    } else if (!(this.parent.view === 'LargeIcons') && this.targetElement && this.targetElement.classList.contains('e-emptyrow')) {\n      this.setLayoutItem(target);\n      /* istanbul ignore next */\n    } else if (closest(target, '.' + EMPTY)) {\n      this.setLayoutItem(target); // eslint:disable-next-line\n    } else if (!target.classList.contains(MENU_ITEM) && !target.classList.contains(MENU_ICON) && !target.classList.contains(SUBMENU_ICON)) {\n      /* istanbul ignore next */\n      // eslint:disable-next-line\n      if (this.parent.view === 'LargeIcons' && !isNullOrUndefined(closest(target, 'li')) && !closest(target, '#' + this.parent.element.id + TREE_ID)) {\n        var eveArgs = {\n          ctrlKey: true,\n          shiftKey: true\n        };\n\n        if (!closest(target, 'li').classList.contains('e-active')) {\n          this.parent.largeiconsviewModule.doSelection(target, eveArgs);\n        } // eslint-disable-next-line\n\n\n        data = this.parent.visitedData;\n        selected = true;\n      } else if (!isNullOrUndefined(closest(target, 'tr.e-row'))) {\n        uid = this.targetElement.getAttribute('data-uid'); // eslint-disable-next-line\n\n        data = this.parent.detailsviewModule.gridObj.getRowObjectFromUID(uid).data;\n\n        if (isNullOrUndefined(this.targetElement.getAttribute('aria-selected'))) {\n          /* istanbul ignore next */\n          this.parent.detailsviewModule.gridObj.selectRows([parseInt(this.targetElement.getAttribute('data-rowindex'), 10)]);\n        }\n\n        selected = true;\n        /* istanbul ignore next */\n      } else if (closest(target, '#' + this.parent.element.id + TREE_ID)) {\n        uid = closest(target, 'li').getAttribute('data-uid');\n        treeFolder = true;\n      }\n      /* istanbul ignore next */\n\n\n      if (selected) {\n        if (getValue('isFile', data) === true) {\n          this.setFileItem();\n        } else {\n          this.setFolderItem(false);\n        }\n        /* istanbul ignore next */\n\n      } else if (treeFolder) {\n        this.setFolderItem(true);\n\n        if (uid === this.parent.pathId[0]) {\n          this.disabledItems.push('Delete', 'Rename', 'Cut', 'Copy');\n        }\n        /* istanbul ignore next */\n        // eslint:disable-next-line\n\n      } else if (view === 'TreeView' || view === 'GridView' || view === 'LargeIcon') {\n        this.setLayoutItem(target);\n        /* istanbul ignore next */\n      } else {\n        args.cancel = true;\n      }\n    }\n\n    var pasteEle = select('#' + this.getMenuId('Paste'), this.contextMenu.element);\n\n    if (!args.cancel && !this.parent.enablePaste && pasteEle && !pasteEle.classList.contains('e-disabled')) {\n      this.disabledItems.push('Paste');\n    }\n\n    if (args.cancel) {\n      this.menuTarget = this.currentElement = null;\n      return;\n    }\n\n    this.contextMenu.dataBind();\n    var isSubMenu = false;\n\n    if (target.classList.contains(MENU_ITEM) || target.classList.contains(MENU_ICON) || target.classList.contains(SUBMENU_ICON)) {\n      isSubMenu = true;\n    }\n\n    this.menuItemData = isSubMenu ? this.menuItemData : this.getMenuItemData();\n    var eventArgs = {\n      fileDetails: [this.menuItemData],\n      element: args.element,\n      target: target,\n      items: isSubMenu ? args.items : this.contextMenu.items,\n      menuModule: this.contextMenu,\n      cancel: false,\n      menuType: this.menuType,\n      isSubMenu: isSubMenu\n    };\n    this.currentItems = eventArgs.items;\n    this.parent.trigger('menuOpen', eventArgs, function (menuOpenArgs) {\n      if (!isSubMenu) {\n        _this.contextMenu.dataBind();\n\n        _this.contextMenu.items = menuOpenArgs.items;\n\n        _this.contextMenu.dataBind();\n      }\n\n      _this.enableItems(_this.disabledItems, false, true);\n\n      args.cancel = menuOpenArgs.cancel;\n\n      if (menuOpenArgs.cancel) {\n        _this.menuTarget = _this.targetNodeElement = _this.currentElement = null;\n      }\n    });\n  };\n\n  ContextMenu$$1.prototype.updateActiveModule = function () {\n    this.parent.activeModule = closest(this.menuTarget, '#' + this.parent.element.id + TREE_ID) ? 'navigationpane' : closest(this.menuTarget, '#' + this.parent.element.id + GRID_ID) ? 'detailsview' : closest(this.menuTarget, '#' + this.parent.element.id + LARGEICON_ID) ? 'largeiconsview' : this.parent.activeModule;\n  };\n  /* istanbul ignore next */\n\n  /**\n   *\n   * @param {Element} target - specifies the target element.\n   * @returns {string} -returns the target view.\n   * @hidden\n   */\n\n\n  ContextMenu$$1.prototype.getTargetView = function (target) {\n    return target.classList.contains(TREE_VIEW) ? 'TreeView' : target.classList.contains(GRID_VIEW) ? 'GridView' : target.classList.contains(ICON_VIEW) ? 'LargeIcon' : target.classList.contains(LARGE_ICONS) ? 'LargeIcon' : '';\n  };\n\n  ContextMenu$$1.prototype.getItemIndex = function (item) {\n    var itemId = this.getMenuId(item);\n\n    for (var i = 0; i < this.currentItems.length; i++) {\n      if (this.currentItems[i].id === itemId || this.currentItems[i].id === item) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  ContextMenu$$1.prototype.disableItem = function (items) {\n    if (items.length !== 0) {\n      this.disabledItems = this.disabledItems.concat(items);\n    }\n  };\n\n  ContextMenu$$1.prototype.enableItems = function (items, enable, isUniqueId) {\n    for (var i = 0; i < items.length; i++) {\n      if (this.checkValidItem(items[i]) === 1) {\n        this.contextMenu.enableItems([this.getMenuId(items[i])], enable, isUniqueId);\n      } else if (this.checkValidItem(items[i]) === 2) {\n        this.contextMenu.enableItems([items[i]], enable, isUniqueId);\n      }\n    }\n  };\n\n  ContextMenu$$1.prototype.setFolderItem = function (isTree) {\n    this.menuType = 'folder';\n    this.contextMenu.items = this.getItemData(this.parent.contextMenuSettings.folder.map(function (item) {\n      return item.trim();\n    }));\n    this.contextMenu.dataBind();\n\n    if (isTree) {\n      this.disabledItems.push('Open');\n    } else if (this.parent.selectedItems.length !== 1) {\n      this.disabledItems.push('Rename', 'Paste');\n    }\n  };\n\n  ContextMenu$$1.prototype.setFileItem = function () {\n    this.menuType = 'file';\n    this.contextMenu.items = this.getItemData(this.parent.contextMenuSettings.file.map(function (item) {\n      return item.trim();\n    }));\n    this.contextMenu.dataBind();\n\n    if (this.parent.selectedItems.length !== 1) {\n      this.disabledItems.push('Rename');\n    }\n  };\n\n  ContextMenu$$1.prototype.setLayoutItem = function (target) {\n    this.menuType = 'layout';\n    this.contextMenu.items = this.getItemData(this.parent.contextMenuSettings.layout.map(function (item) {\n      return item.trim();\n    }));\n    this.contextMenu.dataBind();\n\n    if (!this.parent.allowMultiSelection || this.parent.view === 'LargeIcons' && closest(target, '#' + this.parent.element.id + LARGEICON_ID).getElementsByClassName(EMPTY).length !== 0 || this.parent.view === 'Details' && closest(target, '#' + this.parent.element.id + GRID_ID).getElementsByClassName(EMPTY).length !== 0) {\n      this.disabledItems.push('SelectAll');\n    }\n\n    if (this.parent.selectedNodes.length === 0) {\n      this.disabledItems.push('Paste');\n    }\n\n    this.contextMenu.dataBind();\n  };\n\n  ContextMenu$$1.prototype.checkValidItem = function (nameEle) {\n    if (!isNullOrUndefined(select('#' + this.getMenuId(nameEle), this.currentElement))) {\n      return 1;\n    } else if (!isNullOrUndefined(select('#' + nameEle, this.currentElement))) {\n      return 2;\n    } else {\n      return -1;\n    }\n  }; // eslint-disable-next-line\n\n\n  ContextMenu$$1.prototype.getMenuItemData = function () {\n    if (this.menuType === 'layout') {\n      return getPathObject(this.parent);\n    } else {\n      // eslint-disable-next-line\n      var args = {\n        target: this.menuTarget\n      };\n      this.parent.notify(menuItemData, args);\n      return this.parent.itemData[0];\n    }\n  };\n  /* istanbul ignore next */\n\n\n  ContextMenu$$1.prototype.onSelect = function (args) {\n    var _this = this;\n\n    if (isNullOrUndefined(args.item) || !args.item.id) {\n      return;\n    }\n\n    var itemText = args.item.id.substr((this.parent.element.id + '_cm_').length); // eslint-disable-next-line\n\n    var details;\n\n    if (itemText === 'refresh' || itemText === 'newfolder' || itemText === 'upload') {\n      details = [getPathObject(this.parent)];\n      this.parent.itemData = details;\n    } else {\n      this.parent.notify(selectedData, {});\n\n      if (this.parent.activeModule === 'navigationpane' && itemText === 'open') {\n        details = [this.menuItemData];\n      } else {\n        details = this.parent.itemData;\n      }\n    }\n\n    var eventArgs = {\n      cancel: false,\n      element: args.element,\n      fileDetails: details,\n      item: args.item\n    };\n    this.parent.trigger('menuClick', eventArgs, function (menuClickArgs) {\n      var sItems;\n\n      if (!menuClickArgs.cancel) {\n        // eslint:disable-next-line\n        switch (itemText) {\n          case 'cut':\n            cutFiles(_this.parent);\n            break;\n\n          case 'copy':\n            copyFiles(_this.parent);\n            break;\n\n          case 'paste':\n            if (_this.menuType === 'folder') {\n              if (_this.parent.activeModule === 'largeiconsview' || _this.parent.activeModule === 'detailsview') {\n                _this.parent.folderPath = getFullPath(_this.parent, _this.menuItemData, _this.parent.path);\n              } else {\n                _this.parent.folderPath = '';\n              }\n            } else {\n              _this.parent.folderPath = '';\n            }\n\n            pasteHandler(_this.parent);\n            break;\n\n          case 'delete':\n            for (var j = 0; j < details.length; j++) {\n              if (!hasEditAccess(details[j])) {\n                createDeniedDialog(_this.parent, details[j], permissionEdit);\n                return;\n              }\n            }\n\n            createDialog(_this.parent, 'Delete');\n            break;\n\n          /* istanbul ignore next */\n\n          case 'download':\n            for (var i = 0; i < details.length; i++) {\n              if (!hasDownloadAccess(details[i])) {\n                createDeniedDialog(_this.parent, details[i], permissionDownload);\n                return;\n              }\n            }\n\n            if (_this.parent.activeModule === 'navigationpane') {\n              _this.parent.notify(downloadInit, {});\n            } else if (_this.parent.selectedItems.length > 0) {\n              Download(_this.parent, _this.parent.path, _this.parent.selectedItems);\n            }\n\n            break;\n\n          case 'rename':\n            if (!hasEditAccess(details[0])) {\n              createDeniedDialog(_this.parent, details[0], permissionEdit);\n            } else {\n              _this.parent.notify(renameInit, {});\n\n              createDialog(_this.parent, 'Rename');\n            }\n\n            break;\n\n          case 'selectall':\n            /* istanbul ignore next */\n            _this.parent.notify(selectAllInit, {});\n\n            break;\n\n          case 'refresh':\n            refresh(_this.parent);\n            break;\n\n          case 'open':\n            if (_this.parent.visitedItem) {\n              _this.parent.notify(openInit, {\n                target: _this.parent.visitedItem\n              });\n            } else if (_this.parent.activeModule === 'navigationpane') {\n              _this.parent.navigationpaneModule.openFileOnContextMenuClick(closest(_this.targetNodeElement, 'li'));\n            }\n\n            break;\n\n          case 'details':\n            _this.parent.notify(detailsInit, {});\n\n            sItems = _this.parent.selectedItems;\n\n            if (_this.parent.activeModule === 'navigationpane') {\n              sItems = [];\n            }\n\n            GetDetails(_this.parent, sItems, _this.parent.path, 'details');\n            break;\n\n          case 'newfolder':\n            createNewFolder(_this.parent);\n            break;\n\n          case 'upload':\n            uploadItem(_this.parent);\n            break;\n\n          /* istanbul ignore next */\n\n          case 'name':\n          /* istanbul ignore next */\n          // eslint-disable-next-line no-fallthrough\n\n          case 'size':\n          /* istanbul ignore next */\n          // eslint-disable-next-line no-fallthrough\n\n          case 'date':\n          /* istanbul ignore next */\n          // eslint-disable-next-line no-fallthrough\n\n          case 'ascending':\n          /* istanbul ignore next */\n          // eslint-disable-next-line no-fallthrough\n\n          case 'descending':\n            /* istanbul ignore next */\n            sortbyClickHandler(_this.parent, args);\n            break;\n\n          /* istanbul ignore next */\n\n          case 'none':\n            /* istanbul ignore next */\n            sortbyClickHandler(_this.parent, args);\n            break;\n\n          /* istanbul ignore next */\n          // eslint:disable-next-line\n\n          case 'largeiconsview':\n            updateLayout(_this.parent, 'LargeIcons');\n            break;\n\n          /* istanbul ignore next */\n          // eslint:disable-next-line\n\n          case 'detailsview':\n            updateLayout(_this.parent, 'Details');\n            break;\n        }\n      }\n    });\n  };\n\n  ContextMenu$$1.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName() && e.module !== 'common') {\n      /* istanbul ignore next */\n      return;\n    }\n\n    for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'cssClass':\n          this.contextMenu.cssClass = getCssClass(this.parent, ROOT_POPUP);\n          break;\n      }\n    }\n  };\n\n  ContextMenu$$1.prototype.addEventListener = function () {\n    this.parent.on(destroy, this.destroy, this);\n    this.parent.on(modelChanged, this.onPropertyChanged, this);\n    this.keyboardModule = new KeyboardEvents(this.contextMenu.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n\n  ContextMenu$$1.prototype.removeEventListener = function () {\n    this.parent.off(destroy, this.destroy);\n    this.parent.off(modelChanged, this.onPropertyChanged);\n    this.keyboardModule.destroy();\n  };\n\n  ContextMenu$$1.prototype.keyActionHandler = function (e) {\n    switch (e.action) {\n      case 'uparrow':\n      case 'downarrow':\n        e.preventDefault();\n    }\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} - returns the module name.\n   * @private\n   */\n\n\n  ContextMenu$$1.prototype.getModuleName = function () {\n    return 'contextmenu';\n  };\n\n  ContextMenu$$1.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeEventListener();\n    this.contextMenu.destroy();\n  };\n  /* istanbul ignore next */\n\n\n  ContextMenu$$1.prototype.getItemData = function (data) {\n    var items = [];\n\n    for (var i = 0; i < data.length; i++) {\n      var item = void 0;\n      var itemId = this.getMenuId(data[i]);\n      var itemText = getLocaleText(this.parent, data[i]);\n\n      switch (data[i]) {\n        case '|':\n          item = {\n            separator: true\n          };\n          break;\n\n        case 'Open':\n          item = {\n            id: itemId,\n            text: itemText,\n            iconCss: ICON_OPEN\n          };\n          break;\n\n        case 'Upload':\n          item = {\n            id: itemId,\n            text: itemText,\n            iconCss: ICON_UPLOAD\n          };\n          break;\n\n        case 'Cut':\n          item = {\n            id: itemId,\n            text: itemText,\n            iconCss: ICON_CUT\n          };\n          break;\n\n        case 'Copy':\n          item = {\n            id: itemId,\n            text: itemText,\n            iconCss: ICON_COPY\n          };\n          break;\n\n        case 'Paste':\n          item = {\n            id: itemId,\n            text: itemText,\n            iconCss: ICON_PASTE\n          };\n          break;\n\n        case 'Delete':\n          item = {\n            id: itemId,\n            text: itemText,\n            iconCss: ICON_DELETE\n          };\n          break;\n\n        case 'Rename':\n          item = {\n            id: itemId,\n            text: itemText,\n            iconCss: ICON_RENAME\n          };\n          break;\n\n        case 'NewFolder':\n          item = {\n            id: itemId,\n            text: itemText,\n            iconCss: ICON_NEWFOLDER\n          };\n          break;\n\n        case 'Details':\n          item = {\n            id: itemId,\n            text: itemText,\n            iconCss: ICON_DETAILS\n          };\n          break;\n\n        case 'SortBy':\n          item = {\n            id: itemId,\n            text: itemText,\n            iconCss: ICON_SHORTBY,\n            items: [{\n              id: this.getMenuId('Name'),\n              text: getLocaleText(this.parent, 'Name'),\n              iconCss: this.parent.sortBy === 'name' ? TB_OPTION_DOT : null\n            }, {\n              id: this.getMenuId('Size'),\n              text: getLocaleText(this.parent, 'Size'),\n              iconCss: this.parent.sortBy === 'size' ? TB_OPTION_DOT : null\n            }, {\n              id: this.getMenuId('Date'),\n              text: getLocaleText(this.parent, 'DateModified'),\n              iconCss: this.parent.sortBy === '_fm_modified' ? TB_OPTION_DOT : null\n            }, {\n              separator: true\n            }, {\n              id: this.getMenuId('Ascending'),\n              text: getLocaleText(this.parent, 'Ascending'),\n              iconCss: this.parent.sortOrder === 'Ascending' ? TB_OPTION_TICK : null\n            }, {\n              id: this.getMenuId('Descending'),\n              text: getLocaleText(this.parent, 'Descending'),\n              iconCss: this.parent.sortOrder === 'Descending' ? TB_OPTION_TICK : null\n            }, {\n              id: this.getMenuId('None'),\n              text: getLocaleText(this.parent, 'None'),\n              iconCss: this.parent.sortOrder === 'None' ? TB_OPTION_TICK : null\n            }]\n          };\n          break;\n\n        /* istanbul ignore next */\n\n        case 'View':\n          item = {\n            id: itemId,\n            text: itemText,\n            iconCss: this.parent.view === 'Details' ? ICON_GRID : ICON_LARGE,\n            items: [{\n              id: this.getMenuId('largeiconsview'),\n              text: getLocaleText(this.parent, 'View-LargeIcons'),\n              iconCss: this.parent.view === 'Details' ? null : TB_OPTION_TICK\n            }, {\n              id: this.getMenuId('detailsview'),\n              text: getLocaleText(this.parent, 'View-Details'),\n              iconCss: this.parent.view === 'Details' ? TB_OPTION_TICK : null\n            }]\n          };\n          break;\n\n        case 'Refresh':\n          item = {\n            id: itemId,\n            text: itemText,\n            iconCss: ICON_REFRESH\n          };\n          break;\n\n        case 'SelectAll':\n          item = {\n            id: itemId,\n            text: itemText,\n            iconCss: ICON_SELECTALL\n          };\n          break;\n\n        /* istanbul ignore next */\n\n        case 'Download':\n          item = {\n            id: itemId,\n            text: itemText,\n            iconCss: ICON_DOWNLOAD\n          };\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          item = {\n            id: itemId,\n            text: itemText\n          };\n          break;\n      }\n\n      items.push(item);\n    }\n\n    return items;\n  };\n\n  ContextMenu$$1.prototype.getMenuId = function (id) {\n    return this.parent.element.id + '_cm_' + id.toLowerCase();\n  };\n\n  return ContextMenu$$1;\n}();\n/**\n * Specifies the default locale of FileManager component\n */\n// eslint-disable-next-line\n\n\nvar defaultLocale = {\n  'NewFolder': 'New folder',\n  'Upload': 'Upload',\n  'Delete': 'Delete',\n  'Rename': 'Rename',\n  'Download': 'Download',\n  'Cut': 'Cut',\n  'Copy': 'Copy',\n  'Paste': 'Paste',\n  'SortBy': 'Sort by',\n  'Refresh': 'Refresh',\n  'Item-Selection': 'item selected',\n  'Items-Selection': 'items selected',\n  'View': 'View',\n  'Details': 'Details',\n  'SelectAll': 'Select all',\n  'Open': 'Open',\n  'Tooltip-NewFolder': 'New folder',\n  'Tooltip-Upload': 'Upload',\n  'Tooltip-Delete': 'Delete',\n  'Tooltip-Rename': 'Rename',\n  'Tooltip-Download': 'Download',\n  'Tooltip-Cut': 'Cut',\n  'Tooltip-Copy': 'Copy',\n  'Tooltip-Paste': 'Paste',\n  'Tooltip-SortBy': 'Sort by',\n  'Tooltip-Refresh': 'Refresh',\n  'Tooltip-Selection': 'Clear selection',\n  'Tooltip-View': 'View',\n  'Tooltip-Details': 'Details',\n  'Tooltip-SelectAll': 'Select all',\n  'Name': 'Name',\n  'Size': 'Size',\n  'DateModified': 'Modified',\n  'DateCreated': 'Date created',\n  'Path': 'Path',\n  'Modified': 'Modified',\n  'Created': 'Created',\n  'Location': 'Location',\n  'Type': 'Type',\n  'Permission': 'Permission',\n  'Ascending': 'Ascending',\n  'Descending': 'Descending',\n  'None': 'None',\n  'View-LargeIcons': 'Large icons',\n  'View-Details': 'Details',\n  'Search': 'Search',\n  'Button-Ok': 'OK',\n  'Button-Cancel': 'Cancel',\n  'Button-Yes': 'Yes',\n  'Button-No': 'No',\n  'Button-Create': 'Create',\n  'Button-Save': 'Save',\n  'Header-NewFolder': 'Folder',\n  'Content-NewFolder': 'Enter your folder name',\n  'Header-Rename': 'Rename',\n  'Content-Rename': 'Enter your new name',\n  'Header-Rename-Confirmation': 'Rename Confirmation',\n  'Content-Rename-Confirmation': 'If you change a file name extension, the file might become unstable. ' + 'Are you sure you want to change it?',\n  'Header-Delete': 'Delete File',\n  'Content-Delete': 'Are you sure you want to delete this file?',\n  'Header-Folder-Delete': 'Delete Folder',\n  'Content-Folder-Delete': 'Are you sure you want to delete this folder?',\n  'Header-Multiple-Delete': 'Delete Multiple Items',\n  'Content-Multiple-Delete': 'Are you sure you want to delete these {0} items?',\n  'Header-Duplicate': 'File/Folder exists',\n  'Content-Duplicate': '{0} already exists. Do you want to rename and paste?',\n  'Header-Upload': 'Upload Files',\n  'Error': 'Error',\n  'Validation-Empty': 'The file or folder name cannot be empty.',\n  'Validation-Invalid': 'The file or folder name {0} contains invalid characters. Please use a different name. ' + // eslint-disable-next-line no-useless-escape\n  'Valid file or folder names cannot end with a dot or space, and cannot contain any of the following characters: \\\\/:*?\\\"<>|',\n  'Validation-NewFolder-Exists': 'A file or folder with the name {0} already exists.',\n  'Validation-Rename-Exists': 'Cannot rename {0} to {1}: destination already exists.',\n  'Folder-Empty': 'This folder is empty',\n  'File-Upload': 'Drag files here to upload',\n  'Search-Empty': 'No results found',\n  'Search-Key': 'Try with different keywords',\n  'Filter-Empty': 'No results found',\n  'Filter-Key': 'Try with different filter',\n  'Sub-Folder-Error': 'The destination folder is the subfolder of the source folder.',\n  'Same-Folder-Error': 'The destination folder is the same as the source folder.',\n  'Access-Denied': 'Access Denied',\n  'Access-Details': 'You don\"t have permission to access this folder.',\n  'Header-Retry': 'File Already Exists',\n  'Content-Retry': 'A file with this name already exists in this folder. What would you like to do?',\n  'Button-Keep-Both': 'Keep both',\n  'Button-Replace': 'Replace',\n  'Button-Skip': 'Skip',\n  'ApplyAll-Label': 'Do this for all current items',\n  'KB': 'KB',\n  'Access-Message': '{0} is not accessible. You need permission to perform the {1} action.',\n  'Network-Error': 'NetworkError: Failed to send on XMLHTTPRequest: Failed to load',\n  'Server-Error': 'ServerError: Invalid response from'\n};\n\nvar __extends$8 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$8 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * The FileManager component allows users to access and manage the file system through the web  browser. It can performs the\n * functionalities like add, rename, search, sort, upload and delete files or folders. And also it\n * provides an easy way of  dynamic injectable modules like toolbar, navigationpane, detailsview, largeiconsview.\n * ```html\n *  <div id=\"file\"></div>\n * ```\n * ```typescript,\n *  let feObj: FileManager = new FileManager();\n *  feObj.appendTo('#file');\n * ```\n */\n\n\nvar FileManager =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$8(FileManager, _super);\n\n  function FileManager(options, element) {\n    var _this = _super.call(this, options, element) || this; // eslint-disable-next-line\n\n\n    _this.filterData = null;\n    _this.selectedNodes = [];\n    _this.duplicateItems = []; // eslint-disable-next-line\n\n    _this.duplicateRecords = [];\n    _this.previousPath = [];\n    _this.nextPath = [];\n    _this.isLayoutChange = false;\n    _this.layoutSelectedItems = [];\n    _this.renamedId = null;\n    _this.uploadItem = [];\n    _this.deleteRecords = [];\n    _this.isFile = false;\n    _this.isCut = false;\n    _this.isSearchCut = false;\n    _this.isSearchDrag = false;\n    _this.isPasteError = false;\n    _this.folderPath = '';\n    _this.isSameAction = false;\n    _this.isFiltered = false; // Specifies whether the sort by option is clicked or not.\n\n    _this.isSortByClicked = false;\n    _this.enablePaste = false;\n    _this.persistData = false;\n    _this.retryArgs = [];\n    _this.isOpened = false;\n    _this.isRetryOpened = false;\n    _this.isPathDrag = false; // eslint-disable-next-line\n\n    _this.searchedItems = [];\n    _this.retryFiles = [];\n    _this.isApplySame = false; // eslint-disable-next-line\n\n    _this.dragData = [];\n    _this.dragNodes = [];\n    _this.dragPath = '';\n    _this.dropPath = '';\n    _this.isDragDrop = false;\n    _this.treeExpandTimer = null;\n    _this.dragCursorPosition = {\n      left: 44,\n      top: 18\n    };\n    _this.isDropEnd = false;\n    _this.dragCount = 0; // eslint-disable-next-line\n\n    _this.droppedObjects = [];\n    _this.uploadingCount = 0;\n    _this.uploadedCount = 0; //Specifies whether the operating system is MAC or not \n\n    _this.isMac = false;\n    FileManager_1.Inject(BreadCrumbBar, LargeIconsView, ContextMenu$2);\n    return _this;\n  }\n\n  FileManager_1 = FileManager;\n  /**\n   * Get component name.\n   *\n   * @returns {string} - returns module name.\n   * @private\n   */\n\n  FileManager.prototype.getModuleName = function () {\n    return 'filemanager';\n  };\n  /**\n   * Initialize the event handler\n   *\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.preRender = function () {\n    if (isNullOrUndefined(this.element.id) || this.element.id === '') {\n      this.element.setAttribute('id', getUniqueID('filemanager'));\n    }\n\n    this.ensurePath();\n    this.feParent = [];\n    this.feFiles = [];\n    setStyleAttribute(this.element, {\n      'width': formatUnit(this.width),\n      'height': formatUnit(this.height)\n    });\n    this.isDevice = Browser.isDevice;\n    this.isMobile = this.checkMobile();\n\n    if (this.isMobile) {\n      this.setProperties({\n        navigationPaneSettings: {\n          visible: false\n        }\n      }, true);\n    }\n\n    var ele = closest(this.element, '.e-bigger');\n    this.isBigger = ele ? true : false;\n    this.activeModule = this.view === 'LargeIcons' ? 'largeiconsview' : 'detailsview';\n    createSpinner({\n      target: this.element\n    }, createElement);\n    this.addWrapper();\n    this.keyConfigs = {\n      altN: 'alt+n',\n      f5: 'f5',\n      ctrlShift1: 'ctrl+shift+1',\n      ctrlShift2: 'ctrl+shift+2',\n      ctrlU: 'ctrl+u'\n    };\n    this.localeObj = new L10n(this.getModuleName(), defaultLocale, this.locale);\n  };\n  /**\n   * Gets the properties to be maintained upon browser refresh.\n   *\n   * @returns {string} - returns the persisted data.\n   * @hidden\n   */\n\n\n  FileManager.prototype.getPersistData = function () {\n    var keyEntity = ['view', 'path', 'selectedItems'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * To provide the array of modules needed for component rendering\n   *\n   * @returns {ModuleDeclaration[]} - returns module declaration.\n   * @hidden\n   */\n\n\n  FileManager.prototype.requiredModules = function () {\n    var modules = [];\n    modules.push({\n      member: 'breadcrumbbar',\n      args: [this]\n    });\n    modules.push({\n      member: 'largeiconsview',\n      args: [this]\n    });\n\n    if (this.toolbarSettings.visible) {\n      modules.push({\n        member: 'toolbar',\n        args: [this]\n      });\n    }\n\n    if (this.navigationPaneSettings.visible) {\n      modules.push({\n        member: 'navigationpane',\n        args: [this]\n      });\n    }\n\n    if (this.view) {\n      modules.push({\n        member: 'detailsview',\n        args: [this]\n      });\n    }\n\n    if (this.contextMenuSettings.visible && !this.isDevice) {\n      modules.push({\n        member: 'contextmenu',\n        args: [this]\n      });\n    }\n\n    return modules;\n  };\n  /**\n   * To Initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.render = function () {\n    this.initialize();\n    var slItems = isNullOrUndefined(this.selectedItems) ? [] : this.allowMultiSelection ? this.selectedItems : this.selectedItems.slice(this.selectedItems.length - 1);\n    this.setProperties({\n      selectedItems: slItems\n    }, true);\n    this.fileView = this.view;\n    this.isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n    this.setRtl(this.enableRtl);\n    this.addEventListeners();\n    read(this, this.path !== this.originalPath ? initialEnd : finalizeEnd, this.path);\n    this.adjustHeight();\n\n    if (isNullOrUndefined(this.navigationpaneModule)) {\n      this.splitterObj.collapse(this.enableRtl ? 1 : 0);\n      var bar = select('.' + SPLIT_BAR, this.element);\n      bar.classList.add(DISPLAY_NONE);\n    }\n\n    this.wireEvents();\n    this.renderComplete();\n  };\n\n  FileManager.prototype.ensurePath = function () {\n    var currentPath = this.path;\n\n    if (isNullOrUndefined(currentPath)) {\n      currentPath = '/';\n    }\n\n    if (currentPath.lastIndexOf('/') !== currentPath.length - 1) {\n      currentPath = currentPath + '/';\n    }\n\n    this.originalPath = currentPath;\n    var paths = currentPath.split('/');\n    this.setProperties({\n      path: paths[0] + '/'\n    }, true);\n    this.pathNames = [];\n    this.pathId = ['fe_tree'];\n    this.itemData = [];\n  };\n\n  FileManager.prototype.initialize = function () {\n    if (this.isMobile) {\n      addClass([this.element], MOBILE);\n    }\n\n    if (this.allowMultiSelection) {\n      addClass([this.element], CHECK_SELECT);\n    }\n\n    this.addCssClass(null, this.cssClass);\n    this.renderFileUpload();\n  };\n\n  FileManager.prototype.addWrapper = function () {\n    var headerWrap = this.createElement('div', {\n      id: this.element.id + TOOLBAR_ID\n    });\n    this.element.appendChild(headerWrap);\n    var layoutWrap = this.createElement('div', {\n      id: this.element.id + LAYOUT_ID,\n      className: LAYOUT\n    });\n    this.element.appendChild(layoutWrap);\n    var navigationWrap = this.createElement('div', {\n      id: this.element.id + NAVIGATION_ID,\n      className: NAVIGATION\n    });\n    var treeWrap = this.createElement('div', {\n      id: this.element.id + TREE_ID\n    });\n    navigationWrap.appendChild(treeWrap);\n    var contentWrap = this.createElement('div', {\n      id: this.element.id + CONTENT_ID,\n      className: LAYOUT_CONTENT\n    });\n    this.breadCrumbBarNavigation = this.createElement('div', {\n      id: this.element.id + BREADCRUMBBAR_ID,\n      className: BREADCRUMBS\n    });\n    contentWrap.appendChild(this.breadCrumbBarNavigation);\n    var gridWrap = this.createElement('div', {\n      id: this.element.id + GRID_ID\n    });\n    contentWrap.appendChild(gridWrap);\n    var largeiconWrap = this.createElement('div', {\n      id: this.element.id + LARGEICON_ID,\n      className: LARGE_ICONS,\n      attrs: {\n        'role': 'group'\n      }\n    });\n    contentWrap.appendChild(largeiconWrap);\n    var overlay = this.createElement('span', {\n      className: OVERLAY\n    });\n    contentWrap.appendChild(overlay);\n    var paneSettings;\n\n    if (!this.enableRtl) {\n      layoutWrap.appendChild(navigationWrap);\n      layoutWrap.appendChild(contentWrap);\n      paneSettings = [{\n        size: '25%',\n        min: this.navigationPaneSettings.minWidth.toString(),\n        max: this.navigationPaneSettings.maxWidth.toString()\n      }, {\n        size: '75%',\n        min: '270px'\n      }];\n    } else {\n      layoutWrap.appendChild(contentWrap);\n      layoutWrap.appendChild(navigationWrap);\n      paneSettings = [{\n        size: '75%',\n        min: '270px'\n      }, {\n        size: '25%',\n        min: this.navigationPaneSettings.minWidth.toString(),\n        max: this.navigationPaneSettings.maxWidth.toString()\n      }];\n    }\n\n    this.splitterObj = new Splitter({\n      paneSettings: paneSettings,\n      width: '100%',\n      enableRtl: false,\n      enableHtmlSanitizer: this.enableHtmlSanitizer,\n      resizing: this.splitterResize.bind(this)\n    });\n    this.splitterObj.isStringTemplate = true;\n    this.splitterObj.appendTo(layoutWrap);\n    var dialogWrap = this.createElement('div', {\n      id: this.element.id + DIALOG_ID\n    });\n    this.element.appendChild(dialogWrap);\n    var menuWrap = this.createElement('ul', {\n      id: this.element.id + CONTEXT_MENU_ID\n    });\n    this.element.appendChild(menuWrap);\n    var dialogImgWrap = this.createElement('div', {\n      id: this.element.id + IMG_DIALOG_ID\n    });\n    this.element.appendChild(dialogImgWrap);\n    var extnDialogWrap = this.createElement('div', {\n      id: this.element.id + EXTN_DIALOG_ID\n    });\n    this.element.appendChild(extnDialogWrap);\n    var uploadDialogWrap = this.createElement('div', {\n      id: this.element.id + UPLOAD_DIALOG_ID\n    });\n    this.element.appendChild(uploadDialogWrap);\n  };\n\n  FileManager.prototype.adjustHeight = function () {\n    var toolbar = select('#' + this.element.id + TOOLBAR_ID, this.element);\n    var toolBarHeight = toolbar ? toolbar.offsetHeight : 0;\n\n    if (this.splitterObj) {\n      this.splitterObj.height = (this.element.clientHeight - toolBarHeight).toString();\n      this.splitterObj.dataBind();\n    }\n  };\n  /* istanbul ignore next */\n\n\n  FileManager.prototype.splitterResize = function () {\n    this.notify(splitterResize, {});\n  };\n\n  FileManager.prototype.splitterAdjust = function () {\n    var bar = select('.' + SPLIT_BAR, this.element);\n\n    if (this.navigationPaneSettings.visible) {\n      this.splitterObj.expand(this.enableRtl ? 1 : 0);\n      bar.classList.remove(DISPLAY_NONE);\n    } else {\n      this.splitterObj.collapse(this.enableRtl ? 1 : 0);\n      bar.classList.add(DISPLAY_NONE);\n    }\n  };\n\n  FileManager.prototype.addCssClass = function (oldOne, newOne) {\n    if (!isNullOrUndefined(oldOne) && oldOne !== '') {\n      removeClass([this.element], oldOne.split(' '));\n    }\n\n    if (!isNullOrUndefined(newOne) && newOne !== '') {\n      addClass([this.element], newOne.split(' '));\n    }\n  };\n\n  FileManager.prototype.showSpinner = function () {\n    showSpinner(this.element);\n  };\n\n  FileManager.prototype.hideSpinner = function () {\n    hideSpinner(this.element);\n  };\n\n  FileManager.prototype.onContextMenu = function (e) {\n    e.preventDefault();\n  };\n\n  FileManager.prototype.checkMobile = function () {\n    return /iphone|ipod|android|blackberry|opera|mini|windows\\sce|palm|smartphone|iemobile/i.test(Browser.userAgent.toLowerCase()) && /mobile/i.test(Browser.userAgent.toLowerCase());\n  };\n\n  FileManager.prototype.renderFileUpload = function () {\n    var id = this.element.id + UPLOAD_ID;\n    var uploadEle = this.createElement('input', {\n      id: id,\n      attrs: {\n        name: 'uploadFiles',\n        type: 'file'\n      }\n    });\n    this.element.appendChild(uploadEle);\n    this.uploadDialogObj = new Dialog({\n      header: getLocaleText(this, 'Header-Upload'),\n      content: uploadEle,\n      animationSettings: {\n        effect: 'None'\n      },\n      showCloseIcon: true,\n      closeOnEscape: true,\n      visible: false,\n      isModal: true,\n      width: '350px',\n      target: this.popupTarget ? this.popupTarget : '#' + this.element.id,\n      cssClass: getCssClass(this, this.isMobile ? MOB_POPUP : ROOT_POPUP),\n      locale: this.locale,\n      allowDragging: true,\n      position: {\n        X: 'center',\n        Y: 'center'\n      },\n      enableRtl: this.enableRtl,\n      enableHtmlSanitizer: this.enableHtmlSanitizer,\n      open: this.onOpen.bind(this),\n      close: this.onClose.bind(this),\n      beforeOpen: this.onBeforeOpen.bind(this),\n      beforeClose: this.onBeforeClose.bind(this)\n    });\n    this.uploadDialogObj.appendTo('#' + this.element.id + UPLOAD_DIALOG_ID);\n    this.renderUploadBox();\n  };\n\n  FileManager.prototype.renderUploadBox = function () {\n    var uploadUrl = this.ajaxSettings.uploadUrl ? this.ajaxSettings.uploadUrl : this.ajaxSettings.url;\n    this.uploadObj = new Uploader({\n      dropArea: select('#' + this.element.id + CONTENT_ID, this.element),\n      asyncSettings: {\n        saveUrl: uploadUrl,\n        removeUrl: uploadUrl\n      },\n      locale: this.locale,\n      enableRtl: this.enableRtl,\n      uploading: this.onUploading.bind(this),\n      removing: this.onRemoving.bind(this),\n      canceling: this.onCancel.bind(this),\n      clearing: this.onClearing.bind(this),\n      selected: this.onSelected.bind(this),\n      success: this.onUploadSuccess.bind(this),\n      failure: this.onUploadFailure.bind(this),\n      autoUpload: this.uploadSettings.autoUpload,\n      minFileSize: this.uploadSettings.minFileSize,\n      maxFileSize: this.uploadSettings.maxFileSize,\n      allowedExtensions: this.uploadSettings.allowedExtensions,\n      directoryUpload: this.uploadSettings.directoryUpload,\n      fileListRendering: this.onFileListRender.bind(this)\n    });\n    this.uploadObj.appendTo('#' + this.element.id + UPLOAD_ID);\n  };\n\n  FileManager.prototype.onFileListRender = function (args) {\n    this.trigger('uploadListCreate', args);\n  };\n\n  FileManager.prototype.updateUploader = function () {\n    this.uploadObj.autoUpload = this.uploadSettings.autoUpload;\n    this.uploadObj.minFileSize = this.uploadSettings.minFileSize;\n    this.uploadObj.maxFileSize = this.uploadSettings.maxFileSize;\n    this.uploadObj.allowedExtensions = this.uploadSettings.allowedExtensions;\n    this.uploadObj.directoryUpload = this.uploadSettings.directoryUpload;\n    this.uploadObj.dataBind();\n  };\n\n  FileManager.prototype.onBeforeOpen = function (args) {\n    var eventArgs = {\n      cancel: args.cancel,\n      popupName: 'Upload',\n      popupModule: this.uploadDialogObj\n    };\n    this.trigger('beforePopupOpen', eventArgs, function (eventargs) {\n      args.cancel = eventargs.cancel;\n    });\n  };\n\n  FileManager.prototype.onBeforeClose = function (args) {\n    var eventArgs = {\n      cancel: args.cancel,\n      popupName: 'Upload',\n      popupModule: this.uploadDialogObj\n    };\n    this.trigger('beforePopupClose', eventArgs, function (eventargs) {\n      args.cancel = eventargs.cancel;\n    });\n  };\n\n  FileManager.prototype.onOpen = function () {\n    this.isOpened = true;\n    this.uploadDialogObj.element.focus();\n    var args = {\n      popupModule: this.uploadDialogObj,\n      popupName: 'Upload',\n      element: this.uploadDialogObj.element\n    };\n    this.trigger('popupOpen', args);\n  };\n\n  FileManager.prototype.onClose = function () {\n    this.isOpened = false;\n    this.uploadObj.clearAll();\n    var args = {\n      popupModule: this.uploadDialogObj,\n      popupName: 'Upload',\n      element: this.uploadDialogObj.element\n    };\n    this.trigger('popupClose', args);\n  };\n  /* istanbul ignore next */\n\n\n  FileManager.prototype.onUploading = function (args) {\n    var action = 'save';\n\n    if (this.retryArgs.length !== 0) {\n      for (var i = 0; i < this.retryArgs.length; i++) {\n        if (args.fileData.name === this.retryArgs[i].file.name) {\n          action = this.retryArgs[i].action;\n          this.retryArgs.splice(i, 1);\n          i = this.retryArgs.length;\n        }\n      }\n    }\n\n    var data = JSON.stringify(getValue(this.pathId[this.pathId.length - 1], this.feParent));\n    args.customFormData = [{\n      'path': this.path\n    }, {\n      'action': action\n    }, {\n      'data': data\n    }, {\n      'filename': args.fileData.name\n    }];\n    var uploadUrl = this.ajaxSettings.uploadUrl ? this.ajaxSettings.uploadUrl : this.ajaxSettings.url; // eslint-disable-next-line\n\n    var ajaxSettings = {\n      url: uploadUrl,\n      type: 'POST',\n      mode: true,\n      dataType: null,\n      contentType: null,\n      data: JSON.stringify(args.customFormData),\n      onSuccess: null,\n      onFailure: null,\n      beforeSend: null\n    };\n    this.uploadEventArgs = {\n      action: 'Upload',\n      ajaxSettings: ajaxSettings,\n      cancel: false\n    };\n    this.trigger('beforeSend', this.uploadEventArgs, function (uploadEventArgs) {\n      args.customFormData = JSON.parse(getValue('data', uploadEventArgs.ajaxSettings));\n      args.cancel = uploadEventArgs.cancel; // eslint-disable-next-line\n\n      var eventArgs = {\n        cancel: false,\n        httpRequest: args.currentRequest\n      };\n\n      if (typeof getValue('beforeSend', uploadEventArgs.ajaxSettings) === 'function') {\n        getValue('beforeSend', uploadEventArgs.ajaxSettings)(eventArgs);\n\n        if (getValue('cancel', eventArgs)) {\n          args.cancel = getValue('cancel', eventArgs);\n        }\n      }\n    });\n  };\n\n  FileManager.prototype.onRemoving = function () {\n    this.onFileUploadSuccess({\n      count: 1\n    });\n\n    if (this.uploadObj.getFilesData().length === 1) {\n      this.uploadDialogObj.hide();\n    }\n  };\n  /* istanbul ignore next */\n\n\n  FileManager.prototype.onCancel = function (args) {\n    var data = JSON.stringify(getValue(this.pathId[this.pathId.length - 1], this.feParent));\n    args.customFormData = [{\n      'path': this.path\n    }, {\n      'action': 'remove'\n    }, {\n      'data': data\n    }];\n  };\n  /* istanbul ignore next */\n\n\n  FileManager.prototype.onClearing = function () {\n    if (this.isOpened) {\n      this.uploadDialogObj.hide();\n    }\n  };\n  /* istanbul ignore next */\n\n\n  FileManager.prototype.onSelected = function (args) {\n    if (args.filesData.length === 0) {\n      return;\n    }\n\n    this.uploadingCount = args.filesData.length;\n    this.uploadedCount = 0; // eslint-disable-next-line\n\n    var details = getPathObject(this);\n\n    if (!hasUploadAccess(details)) {\n      args.cancel = true;\n      createDeniedDialog(this, details, permissionUpload);\n      return;\n    }\n\n    this.uploadDialogObj.show();\n  }; // eslint-disable-next-line\n\n\n  FileManager.prototype.onFileUploadSuccess = function (args) {\n    this.uploadedCount = this.uploadedCount + args.count;\n\n    if (this.uploadSettings.autoClose && this.uploadingCount === this.uploadedCount) {\n      this.uploadDialogObj.hide();\n    }\n  };\n  /* istanbul ignore next */\n  // eslint-disable-next-line\n\n\n  FileManager.prototype.onUploadSuccess = function (files) {\n    var args = {\n      action: 'Upload',\n      result: files\n    };\n    this.trigger('success', args);\n    this.itemData = [getValue(this.pathId[this.pathId.length - 1], this.feParent)];\n    read(this, pathChanged, this.path);\n    this.onFileUploadSuccess({\n      count: 1\n    });\n\n    if (typeof getValue('onSuccess', this.uploadEventArgs.ajaxSettings) === 'function') {\n      getValue('onSuccess', this.uploadEventArgs.ajaxSettings)();\n    }\n  };\n  /* istanbul ignore next */\n  // eslint-disable-next-line\n\n\n  FileManager.prototype.onUploadFailure = function (files) {\n    // eslint-disable-next-line\n    var response = getValue('response', files);\n    var statusText = getValue('statusText', response);\n\n    if (statusText !== '') {\n      setValue('statusText', statusText, files);\n    }\n\n    var args = {\n      action: 'Upload',\n      error: files\n    };\n    this.trigger('failure', args);\n\n    if (getValue('statusCode', response) === 400) {\n      this.retryFiles.push(getValue('file', files));\n\n      if (!this.isRetryOpened) {\n        createExtDialog(this, 'UploadRetry');\n      }\n    }\n\n    if (typeof getValue('onFailure', this.uploadEventArgs.ajaxSettings) === 'function') {\n      getValue('onFailure', this.uploadEventArgs.ajaxSettings)();\n    }\n  };\n\n  FileManager.prototype.onInitialEnd = function () {\n    setNextPath(this, this.path);\n  };\n\n  FileManager.prototype.addEventListeners = function () {\n    this.on(beforeRequest, this.showSpinner, this);\n    this.on(afterRequest, this.hideSpinner, this);\n    this.on(initialEnd, this.onInitialEnd, this);\n    this.on(detailsInit, this.onDetailsInit, this);\n    this.on(skipUpload, this.onFileUploadSuccess, this);\n    EventHandler.add(this.element, 'contextmenu', this.onContextMenu, this);\n  };\n\n  FileManager.prototype.removeEventListeners = function () {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    this.off(beforeRequest, this.showSpinner);\n    this.off(afterRequest, this.hideSpinner);\n    this.off(initialEnd, this.onInitialEnd);\n    this.off(detailsInit, this.onDetailsInit);\n    this.off(skipUpload, this.onFileUploadSuccess);\n    EventHandler.remove(this.element, 'contextmenu', this.onContextMenu);\n  };\n\n  FileManager.prototype.onDetailsInit = function () {\n    if (isNullOrUndefined(this.activeModule)) {\n      this.itemData = [getValue(this.pathId[this.pathId.length - 1], this.feParent)];\n    }\n  };\n\n  FileManager.prototype.resizeHandler = function () {\n    this.adjustHeight();\n    this.notify(resizeEnd, {});\n  };\n\n  FileManager.prototype.keyActionHandler = function (e) {\n    var uploadEle;\n\n    switch (e.action) {\n      case 'altN':\n        e.preventDefault();\n        this.itemData = [getPathObject(this)];\n\n        if (!hasContentAccess(this.itemData[0])) {\n          createDeniedDialog(this, this.itemData[0], permissionEditContents);\n        } else {\n          createDialog(this, 'NewFolder');\n        }\n\n        break;\n\n      case 'f5':\n        e.preventDefault();\n        refresh(this);\n        break;\n\n      /* istanbul ignore next */\n\n      case 'ctrlShift1':\n        e.preventDefault();\n        this.fileView = 'Details';\n        this.setProperties({\n          view: 'Details'\n        }, true);\n        showSpinner(this.element);\n        updateLayout(this, 'Details');\n        break;\n\n      /* istanbul ignore next */\n\n      case 'ctrlShift2':\n        e.preventDefault();\n        this.fileView = 'LargeIcons';\n        this.setProperties({\n          view: 'LargeIcons'\n        }, true);\n        showSpinner(this.element);\n        updateLayout(this, 'LargeIcons');\n        break;\n\n      case 'ctrlU':\n        e.preventDefault();\n        uploadEle = select('#' + this.element.id + UPLOAD_ID, this.element);\n        uploadEle.click();\n        break;\n    }\n  };\n\n  FileManager.prototype.wireEvents = function () {\n    EventHandler.add(window, 'resize', this.resizeHandler, this);\n    this.keyboardModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n\n  FileManager.prototype.unWireEvents = function () {\n    EventHandler.remove(window, 'resize', this.resizeHandler);\n    this.keyboardModule.destroy();\n  };\n\n  FileManager.prototype.setPath = function () {\n    this.setProperties({\n      selectedItems: []\n    }, true);\n    this.ensurePath();\n    this.notify(clearPathInit, {\n      selectedNode: this.pathId[0]\n    });\n    read(this, this.path !== this.originalPath ? initialEnd : finalizeEnd, this.path);\n  };\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param  {FileManager} newProp\n   * @param  {FileManager} oldProp\n   * @returns void\n   * @private\n   */\n\n  /* istanbul ignore next */\n  // eslint:disable-next-line\n\n\n  FileManager.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var height;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'ajaxSettings':\n          this.ajaxSettingSetModel(newProp);\n          break;\n\n        case 'allowDragAndDrop':\n          this.allowDragAndDrop = newProp.allowDragAndDrop;\n          this.notify(modelChanged, {\n            module: 'common',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        case 'allowMultiSelection':\n          if (this.allowMultiSelection) {\n            addClass([this.element], CHECK_SELECT);\n          } else {\n            if (this.selectedItems.length > 1) {\n              this.setProperties({\n                selectedItems: this.selectedItems.slice(this.selectedItems.length - 1)\n              }, true);\n            }\n\n            removeClass([this.element], CHECK_SELECT);\n          }\n\n          this.notify(modelChanged, {\n            module: 'common',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        case 'cssClass':\n          this.addCssClass(oldProp.cssClass, newProp.cssClass);\n          this.notify(modelChanged, {\n            module: 'common',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        case 'detailsViewSettings':\n          this.notify(modelChanged, {\n            module: 'detailsview',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        case 'enableRtl':\n          this.enableRtl = newProp.enableRtl;\n          this.refresh();\n          break;\n\n        case 'rootAliasName':\n          this.rootAliasName = newProp.rootAliasName;\n          this.refresh();\n          break;\n\n        case 'height':\n          height = !isNullOrUndefined(newProp.height) ? formatUnit(newProp.height) : newProp.height;\n          setStyleAttribute(this.element, {\n            'height': height\n          });\n          this.adjustHeight();\n          this.notify(modelChanged, {\n            module: 'common',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        case 'locale':\n          if (!isNullOrUndefined(newProp.enableRtl)) {\n            this.setProperties({\n              enableRtl: newProp.enableRtl\n            }, true);\n          }\n\n          this.localeSetModelOption(newProp);\n          break;\n\n        case 'navigationPaneSettings':\n          this.splitterAdjust();\n          this.notify(modelChanged, {\n            module: 'navigationpane',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        case 'path':\n          this.setPath();\n          break;\n\n        case 'searchSettings':\n          if (!isNullOrUndefined(newProp.searchSettings.allowSearchOnTyping)) {\n            this.setProperties({\n              searchSettings: {\n                allowSearchOnTyping: newProp.searchSettings.allowSearchOnTyping\n              }\n            }, true);\n          }\n\n          if (isNullOrUndefined(newProp.searchSettings.ignoreCase)) {\n            this.setProperties({\n              searchSettings: {\n                ignoreCase: newProp.searchSettings.ignoreCase\n              }\n            }, true);\n          }\n\n          if (isNullOrUndefined(newProp.searchSettings.filterType)) {\n            this.setProperties({\n              searchSettings: {\n                filterType: newProp.searchSettings.filterType\n              }\n            }, true);\n          }\n\n          this.notify(modelChanged, {\n            module: 'breadcrumbbar',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        case 'selectedItems':\n          if (this.view === 'Details') {\n            this.notify(modelChanged, {\n              module: 'detailsview',\n              newProp: newProp,\n              oldProp: oldProp\n            });\n          } else if (this.view === 'LargeIcons') {\n            this.notify(modelChanged, {\n              module: 'largeiconsview',\n              newProp: newProp,\n              oldProp: oldProp\n            });\n          }\n\n          break;\n\n        case 'showFileExtension':\n          this.notify(modelChanged, {\n            module: 'common',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        case 'showHiddenItems':\n          this.notify(modelChanged, {\n            module: 'common',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        case 'showThumbnail':\n          this.notify(modelChanged, {\n            module: 'largeiconsview',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        case 'toolbarSettings':\n          this.adjustHeight();\n          this.notify(modelChanged, {\n            module: 'toolbar',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        case 'uploadSettings':\n          this.updateUploader();\n          break;\n\n        case 'view':\n          if (newProp.view === 'Details') {\n            this.notify(modelChanged, {\n              module: 'detailsview',\n              newProp: newProp,\n              oldProp: oldProp\n            });\n          } else if (newProp.view === 'LargeIcons') {\n            this.notify(modelChanged, {\n              module: 'largeiconsview',\n              newProp: newProp,\n              oldProp: oldProp\n            });\n          }\n\n          break;\n\n        case 'width':\n          setStyleAttribute(this.element, {\n            'width': !isNullOrUndefined(newProp.width) ? formatUnit(newProp.width) : newProp.width\n          });\n          this.notify(modelChanged, {\n            module: 'common',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        case 'sortOrder':\n          refresh(this);\n          this.notify(sortByChange, {});\n          break;\n\n        case 'sortBy':\n          refresh(this);\n          this.notify(sortByChange, {});\n\n          if (this.view === 'Details') {\n            this.notify(sortColumn, {});\n          }\n\n          break;\n\n        case 'popupTarget':\n          if (this.uploadDialogObj) {\n            this.uploadDialogObj.target = newProp.popupTarget;\n          }\n\n          if (this.dialogObj) {\n            this.dialogObj.target = newProp.popupTarget;\n          }\n\n          if (this.extDialogObj) {\n            this.extDialogObj.target = newProp.popupTarget;\n          }\n\n          if (this.viewerObj) {\n            this.viewerObj.target = newProp.popupTarget;\n          }\n\n          break;\n      }\n    }\n  };\n  /* istanbul ignore next */\n\n\n  FileManager.prototype.ajaxSettingSetModel = function (newProp) {\n    if (!isNullOrUndefined(newProp.ajaxSettings.url)) {\n      this.setProperties({\n        ajaxSettings: {\n          url: newProp.ajaxSettings.url\n        }\n      }, true);\n    }\n\n    if (!isNullOrUndefined(newProp.ajaxSettings.uploadUrl)) {\n      this.setProperties({\n        ajaxSettings: {\n          uploadUrl: newProp.ajaxSettings.uploadUrl\n        }\n      }, true);\n    }\n\n    if (!isNullOrUndefined(newProp.ajaxSettings.downloadUrl)) {\n      this.setProperties({\n        ajaxSettings: {\n          downloadUrl: newProp.ajaxSettings.downloadUrl\n        }\n      }, true);\n    }\n\n    if (!isNullOrUndefined(newProp.ajaxSettings.getImageUrl)) {\n      this.setProperties({\n        ajaxSettings: {\n          getImageUrl: newProp.ajaxSettings.getImageUrl\n        }\n      }, true);\n    }\n\n    this.setProperties({\n      path: '/'\n    }, true);\n    this.setProperties({\n      selectedItems: []\n    }, true);\n\n    _super.prototype.refresh.call(this);\n  };\n  /* istanbul ignore next */\n\n\n  FileManager.prototype.localeSetModelOption = function (newProp) {\n    this.uploadObj.locale = newProp.locale;\n\n    _super.prototype.refresh.call(this);\n  };\n  /**\n   * Triggers when the component is destroyed.\n   *\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.destroy = function () {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (!this.refreshing) {\n      this.notify(destroy, {});\n    }\n\n    this.uploadObj.destroy();\n    this.uploadObj = null;\n    this.uploadDialogObj.destroy();\n    this.uploadDialogObj = null;\n    this.splitterObj.destroy();\n    this.splitterObj = null;\n\n    if (this.dialogObj) {\n      this.dialogObj.destroy();\n      this.dialogObj = null;\n    }\n\n    if (this.viewerObj) {\n      this.viewerObj.destroy();\n      this.viewerObj = null;\n    }\n\n    if (this.extDialogObj) {\n      this.extDialogObj.destroy();\n      this.extDialogObj = null;\n    }\n\n    this.element.removeAttribute('style');\n    this.element.removeAttribute('tabindex');\n    this.removeEventListeners();\n    this.unWireEvents();\n    this.addCssClass(this.cssClass, null);\n    removeClass([this.element], [RTL, MOBILE, CHECK_SELECT]);\n    this.element.innerHTML = '';\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * Creates a new folder in file manager.\n   *\n   * @param {string} name – Specifies the name of new folder in current path.\n   * If it is not specified, then the default new folder dialog will be opened.\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.createFolder = function (name) {\n    this.notify(methodCall, {\n      action: 'createFolder'\n    }); // eslint-disable-next-line\n\n    var details = [getPathObject(this)];\n    this.itemData = details;\n\n    if (name) {\n      if (/[/\\\\|*?\"<>:]/.test(name)) {\n        var result = {\n          files: null,\n          error: {\n            code: '402',\n            message: getLocaleText(this, 'Validation-Invalid').replace('{0}', '\"' + name + '\"'),\n            fileExists: null\n          }\n        };\n        createDialog(this, 'Error', result);\n      } else {\n        if (!hasContentAccess(details[0])) {\n          createDeniedDialog(this, details[0], permissionEditContents);\n        } else {\n          createFolder(this, name);\n        }\n      }\n    } else {\n      createNewFolder(this);\n    }\n  };\n  /**\n   * Deletes the folders or files from the given unique identifiers.\n   *\n   * @param {string} ids - Specifies the name of folders or files in current path. If you want to delete the nested level folders or\n   * files, then specify the filter path along with name of the folders or files when performing the search or custom filtering.\n   * For ID based file provider, specify the unique identifier of folders or files.\n   * If it is not specified, then delete confirmation dialog will be opened for selected item.\n   *\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.deleteFiles = function (ids) {\n    this.notify(methodCall, {\n      action: 'deleteFiles',\n      ids: ids\n    });\n  };\n  /**\n   * Disables the specified toolbar items of the file manager.\n   *\n   * @param {string[]} items - Specifies an array of items to be disabled.\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.disableToolbarItems = function (items) {\n    if (!isNullOrUndefined(items)) {\n      this.toolbarModule.enableItems(items, false);\n    }\n  };\n  /**\n   * Downloads the folders or files from the given unique identifiers.\n   *\n   * @param {string} ids - Specifies the name of folders or files in current path. If you want to download the nested level folders\n   * or files, then specify the filter path along with name of the folders or files when performing search or custom filtering.\n   * For ID based file provider, specify the unique identifier of folders or files.\n   * If it is not specified, then the selected items will be downloaded.\n   *\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.downloadFiles = function (ids) {\n    this.notify(methodCall, {\n      action: 'downloadFiles',\n      ids: ids\n    });\n  };\n  /**\n   * Enables the specified toolbar items of the file manager.\n   *\n   * @param {string[]} items - Specifies an array of items to be enabled.\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.enableToolbarItems = function (items) {\n    if (!isNullOrUndefined(items)) {\n      this.toolbarModule.enableItems(items, true);\n    }\n  };\n  /**\n   * Disables the specified context menu items in file manager. This method is used only in the menuOpen event.\n   *\n   * @param {string[]} items - Specifies an array of items to be disabled.\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.disableMenuItems = function (items) {\n    if (!isNullOrUndefined(items) && !isNullOrUndefined(this.contextmenuModule.contextMenu)) {\n      this.contextmenuModule.disableItem(items);\n    }\n  };\n  /**\n   * Returns the index position of given current context menu item in file manager.\n   *\n   * @param {string} item - Specifies an item to get the index position.\n   * @returns {number} - returns menu item index.\n   */\n\n\n  FileManager.prototype.getMenuItemIndex = function (item) {\n    if (this.contextmenuModule) {\n      return this.contextmenuModule.getItemIndex(item);\n    } else {\n      return -1;\n    }\n  };\n  /**\n   * Returns the index position of given toolbar item in file manager.\n   *\n   * @param {string} item - Specifies an item to get the index position.\n   * @returns {number} - returns toolbar item index.\n   */\n\n\n  FileManager.prototype.getToolbarItemIndex = function (item) {\n    if (this.toolbarModule) {\n      return this.toolbarModule.getItemIndex(item);\n    } else {\n      return -1;\n    }\n  };\n  /**\n   * Display the custom filtering files in file manager.\n   *\n   * @param {Object} filterData - Specifies the custom filter details along with custom file action name,\n   * which needs to be sent to the server side. If you do not specify the details, then default action name will be `filter`.\n   *\n   * @returns {void}\n   */\n  // eslint-disable-next-line\n\n\n  FileManager.prototype.filterFiles = function (filterData) {\n    this.filterData = filterData ? filterData : null;\n    this.setProperties({\n      selectedItems: []\n    }, true);\n    this.notify(selectionChanged, {});\n    this.isFiltered = true;\n\n    if (this.breadcrumbbarModule.searchObj.element.value !== '') {\n      this.breadcrumbbarModule.searchObj.element.value = '';\n    }\n\n    filter(this, filterEnd);\n  };\n  /**\n   * Gets the details of the selected files in the file manager.\n   *\n   * @returns {Object[]} - returns selected files.\n   */\n  // eslint-disable-next-line\n\n\n  FileManager.prototype.getSelectedFiles = function () {\n    this.notify(updateSelectionData, {});\n    return this.itemData;\n  };\n  /**\n   * Opens the corresponding file or folder from the given unique identifier.\n   *\n   * @param {string} id - Specifies the name of folder or file in current path. If you want to open the nested level folder or\n   * file, then specify the filter path along with name of the folder or file when performing search or custom filtering. For ID based\n   * file provider, specify the unique identifier of folder or file.\n   *\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.openFile = function (id) {\n    this.notify(methodCall, {\n      action: 'openFile',\n      id: id\n    });\n  };\n  /**\n   * Refreshes the folder files of the file manager.\n   *\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.refreshFiles = function () {\n    refresh(this);\n  };\n  /**\n   * Refreshes the layout of the file manager.\n   *\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.refreshLayout = function () {\n    this.adjustHeight();\n    this.notify(layoutRefresh, {});\n  };\n  /**\n   * Selects the entire folders and files in current path.\n   *\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.selectAll = function () {\n    this.notify(methodCall, {\n      action: 'selectAll'\n    });\n  };\n  /**\n   * Deselects the currently selected folders and files in current path.\n   *\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.clearSelection = function () {\n    this.notify(methodCall, {\n      action: 'clearSelection'\n    });\n  };\n  /**\n   * Renames the file or folder with given new name in file manager.\n   *\n   * @param {string} id - Specifies the name of folder or file in current path. If you want to rename the nested level folder or\n   * file, then specify the filter path along with name of the folder or file when performing search or custom filtering. For ID based\n   * file provider, specify the unique identifier of folder or file.\n   * If it is not specified, then rename dialog will be opened for selected item.\n   *\n   * @param {string} name – Specifies the new name of the file or folder in current path. If it is not specified, then rename dialog\n   * will be opened for given identifier.\n   *\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.renameFile = function (id, name) {\n    this.notify(methodCall, {\n      action: 'renameFile',\n      id: id,\n      newName: name\n    });\n  };\n  /**\n   * Opens the upload dialog in file manager.\n   *\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.uploadFiles = function () {\n    // eslint-disable-next-line\n    var details = [getPathObject(this)];\n    this.itemData = details;\n    uploadItem(this);\n  };\n  /**\n   * Specifies the direction of FileManager\n   *\n   * @param {boolean} rtl - specifies rtl parameter.\n   * @returns {void}\n   */\n\n\n  FileManager.prototype.setRtl = function (rtl) {\n    if (rtl) {\n      this.addCssClass(null, RTL);\n    } else {\n      this.addCssClass(RTL, null);\n    }\n\n    if (this.uploadObj) {\n      this.uploadDialogObj.enableRtl = rtl;\n      this.uploadObj.enableRtl = rtl;\n    }\n  };\n\n  var FileManager_1;\n\n  __decorate$8([Complex({}, AjaxSettings)], FileManager.prototype, \"ajaxSettings\", void 0);\n\n  __decorate$8([Property(false)], FileManager.prototype, \"allowDragAndDrop\", void 0);\n\n  __decorate$8([Property(true)], FileManager.prototype, \"allowMultiSelection\", void 0);\n\n  __decorate$8([Complex({}, ContextMenuSettings)], FileManager.prototype, \"contextMenuSettings\", void 0);\n\n  __decorate$8([Property('')], FileManager.prototype, \"cssClass\", void 0);\n\n  __decorate$8([Complex({}, DetailsViewSettings)], FileManager.prototype, \"detailsViewSettings\", void 0);\n\n  __decorate$8([Property(true)], FileManager.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate$8([Property(false)], FileManager.prototype, \"enablePersistence\", void 0);\n\n  __decorate$8([Property('400px')], FileManager.prototype, \"height\", void 0);\n\n  __decorate$8([Property('LargeIcons')], FileManager.prototype, \"view\", void 0);\n\n  __decorate$8([Complex({}, NavigationPaneSettings)], FileManager.prototype, \"navigationPaneSettings\", void 0);\n\n  __decorate$8([Property('/')], FileManager.prototype, \"path\", void 0);\n\n  __decorate$8([Property(null)], FileManager.prototype, \"popupTarget\", void 0);\n\n  __decorate$8([Complex({}, SearchSettings)], FileManager.prototype, \"searchSettings\", void 0);\n\n  __decorate$8([Property()], FileManager.prototype, \"selectedItems\", void 0);\n\n  __decorate$8([Property(true)], FileManager.prototype, \"showFileExtension\", void 0);\n\n  __decorate$8([Property(null)], FileManager.prototype, \"rootAliasName\", void 0);\n\n  __decorate$8([Property(false)], FileManager.prototype, \"showHiddenItems\", void 0);\n\n  __decorate$8([Property(true)], FileManager.prototype, \"showThumbnail\", void 0);\n\n  __decorate$8([Property('Ascending')], FileManager.prototype, \"sortOrder\", void 0);\n\n  __decorate$8([Property('name')], FileManager.prototype, \"sortBy\", void 0);\n\n  __decorate$8([Complex({}, ToolbarSettings)], FileManager.prototype, \"toolbarSettings\", void 0);\n\n  __decorate$8([Complex({}, UploadSettings)], FileManager.prototype, \"uploadSettings\", void 0);\n\n  __decorate$8([Property('100%')], FileManager.prototype, \"width\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"fileLoad\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"fileOpen\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"beforeDownload\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"beforeImageLoad\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"beforePopupClose\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"beforePopupOpen\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"beforeSend\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"created\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"destroyed\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"fileDragStart\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"fileDragging\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"fileDragStop\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"fileDropped\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"fileSelection\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"fileSelect\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"menuClick\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"menuOpen\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"failure\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"popupClose\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"popupOpen\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"success\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"toolbarClick\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"toolbarCreate\", void 0);\n\n  __decorate$8([Event()], FileManager.prototype, \"uploadListCreate\", void 0);\n\n  FileManager = FileManager_1 = __decorate$8([NotifyPropertyChanges], FileManager);\n  return FileManager;\n}(Component);\n/**\n * File Manager base modules\n */\n\n/**\n * Toolbar module\n */\n\n\nvar Toolbar$1 =\n/** @__PURE__ @class */\nfunction () {\n  /**\n   * Constructor for the Toolbar module\n   *\n   * @hidden\n   * @param {IFileManager} parent - specifies the parent element.\n   * @private\n   */\n  function Toolbar$$1(parent) {\n    this.default = ['Delete', 'Rename', 'Download', 'Cut', 'Copy', 'Paste'];\n    this.single = ['Delete', 'Rename', 'Download', 'Cut', 'Copy'];\n    this.multiple = ['Delete', 'Download', 'Cut', 'Copy', 'Refresh'];\n    this.selection = ['NewFolder', 'Upload', 'SortBy', 'Refresh'];\n    this.parent = parent;\n    this.render();\n    this.addEventListener();\n  }\n\n  Toolbar$$1.prototype.render = function () {\n    var _this = this;\n\n    this.items = this.toolbarItemData(this.getItems(this.parent.toolbarSettings.items.map(function (item) {\n      return item.trim();\n    })));\n    var eventArgs = {\n      items: this.items\n    };\n    this.parent.trigger('toolbarCreate', eventArgs, function (toolbarCreateArgs) {\n      _this.items = toolbarCreateArgs.items;\n      _this.toolbarObj = new Toolbar({\n        items: _this.items,\n        created: _this.toolbarCreateHandler.bind(_this),\n        overflowMode: 'Popup',\n        clicked: _this.onClicked.bind(_this),\n        enableHtmlSanitizer: _this.parent.enableHtmlSanitizer,\n        enableRtl: _this.parent.enableRtl\n      });\n      _this.toolbarObj.isStringTemplate = true;\n\n      _this.toolbarObj.appendTo('#' + _this.parent.element.id + TOOLBAR_ID);\n    });\n  };\n\n  Toolbar$$1.prototype.getItemIndex = function (item) {\n    var itemId = this.getId(item);\n\n    for (var i = 0; i < this.items.length; i++) {\n      if (this.items[i].id === itemId) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  Toolbar$$1.prototype.getItems = function (items) {\n    var currItems = items.slice();\n\n    if (this.parent.isDevice && this.parent.allowMultiSelection) {\n      currItems.push('SelectAll');\n    }\n\n    return currItems;\n  };\n  /* istanbul ignore next */\n\n\n  Toolbar$$1.prototype.onClicked = function (args) {\n    var _this = this;\n\n    if (isNullOrUndefined(args.item) || !args.item.id) {\n      return;\n    }\n\n    var tool = args.item.id.substr((this.parent.element.id + '_tb_').length); // eslint-disable-next-line\n\n    var details;\n\n    if (tool === 'refresh' || tool === 'newfolder' || tool === 'upload') {\n      details = [getPathObject(this.parent)];\n      this.parent.itemData = details;\n    } else {\n      this.parent.notify(selectedData, {});\n      details = this.parent.itemData;\n    }\n\n    var eventArgs = {\n      cancel: false,\n      fileDetails: details,\n      item: args.item\n    };\n    this.parent.trigger('toolbarClick', eventArgs, function (toolbarClickArgs) {\n      var sItems;\n      var target;\n\n      if (!toolbarClickArgs.cancel) {\n        switch (tool) {\n          case 'sortby':\n            target = closest(args.originalEvent.target, '.' + TB_ITEM);\n\n            if (target && target.classList.contains('e-toolbar-popup')) {\n              args.cancel = true;\n            }\n\n            break;\n\n          case 'newfolder':\n            createNewFolder(_this.parent);\n            break;\n\n          case 'cut':\n            cutFiles(_this.parent);\n            break;\n\n          case 'copy':\n            copyFiles(_this.parent);\n            break;\n\n          case 'delete':\n            for (var i = 0; i < details.length; i++) {\n              if (!hasEditAccess(details[i])) {\n                createDeniedDialog(_this.parent, details[i], permissionEdit);\n                return;\n              }\n            }\n\n            createDialog(_this.parent, 'Delete');\n            break;\n\n          case 'details':\n            _this.parent.notify(detailsInit, {});\n\n            sItems = _this.parent.selectedItems;\n\n            if (_this.parent.activeModule === 'navigationpane') {\n              sItems = [];\n            }\n\n            GetDetails(_this.parent, sItems, _this.parent.path, 'details');\n            break;\n\n          case 'paste':\n            _this.parent.folderPath = '';\n            pasteHandler(_this.parent);\n            break;\n\n          case 'refresh':\n            refresh(_this.parent);\n            break;\n\n          case 'download':\n            doDownload(_this.parent);\n            break;\n\n          case 'rename':\n            if (!hasEditAccess(details[0])) {\n              createDeniedDialog(_this.parent, details[0], permissionEdit);\n            } else {\n              _this.parent.notify(renameInit, {});\n\n              createDialog(_this.parent, 'Rename');\n            }\n\n            break;\n\n          case 'upload':\n            uploadItem(_this.parent);\n            break;\n\n          case 'selectall':\n            _this.parent.notify(selectAllInit, {});\n\n            break;\n\n          case 'selection':\n            _this.parent.notify(clearAllInit, {});\n\n            break;\n        }\n      }\n    });\n  };\n\n  Toolbar$$1.prototype.toolbarCreateHandler = function () {\n    if (!isNullOrUndefined(select('#' + this.getId('SortBy'), this.parent.element))) {\n      var items = [{\n        id: this.getPupupId('name'),\n        text: getLocaleText(this.parent, 'Name'),\n        iconCss: this.parent.sortBy === 'name' ? TB_OPTION_DOT : ''\n      }, {\n        id: this.getPupupId('size'),\n        text: getLocaleText(this.parent, 'Size'),\n        iconCss: this.parent.sortBy === 'size' ? TB_OPTION_DOT : ''\n      }, {\n        id: this.getPupupId('date'),\n        text: getLocaleText(this.parent, 'DateModified'),\n        iconCss: this.parent.sortBy === '_fm_modified' ? TB_OPTION_DOT : ''\n      }, {\n        separator: true\n      }, {\n        id: this.getPupupId('ascending'),\n        text: getLocaleText(this.parent, 'Ascending'),\n        iconCss: this.parent.sortOrder === 'Ascending' ? TB_OPTION_TICK : ''\n      }, {\n        id: this.getPupupId('descending'),\n        text: getLocaleText(this.parent, 'Descending'),\n        iconCss: this.parent.sortOrder === 'Descending' ? TB_OPTION_TICK : ''\n      }, {\n        id: this.getPupupId('none'),\n        text: getLocaleText(this.parent, 'None'),\n        iconCss: this.parent.sortOrder === 'None' ? TB_OPTION_TICK : ''\n      }];\n      this.buttonObj = new DropDownButton({\n        items: items,\n        cssClass: getCssClass(this.parent, ROOT_POPUP),\n        select: sortbyClickHandler.bind(this, this.parent),\n        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n        enableRtl: this.parent.enableRtl,\n        iconCss: ICON_SHORTBY\n      });\n      this.buttonObj.isStringTemplate = true;\n      this.buttonObj.appendTo('#' + this.getId('SortBy'));\n    }\n\n    if (!isNullOrUndefined(select('#' + this.getId('View'), this.parent.element))) {\n      var gridSpan = '<span class=\"' + ICON_GRID + ' ' + MENU_ICON + '\"></span>';\n      var largeIconSpan = '<span class=\"' + ICON_LARGE + ' ' + MENU_ICON + '\"></span>';\n      var layoutItems = [{\n        id: this.getPupupId('large'),\n        text: largeIconSpan + getLocaleText(this.parent, 'View-LargeIcons'),\n        iconCss: this.parent.view === 'Details' ? '' : TB_OPTION_TICK\n      }, {\n        id: this.getPupupId('details'),\n        text: gridSpan + getLocaleText(this.parent, 'View-Details'),\n        iconCss: this.parent.view === 'Details' ? TB_OPTION_TICK : ''\n      }];\n      this.layoutBtnObj = new DropDownButton({\n        iconCss: this.parent.view === 'Details' ? ICON_GRID : ICON_LARGE,\n        cssClass: getCssClass(this.parent, 'e-caret-hide ' + ROOT_POPUP),\n        items: layoutItems,\n        select: this.layoutChange.bind(this),\n        enableRtl: this.parent.enableRtl,\n        content: '<span class=\"e-tbar-btn-text\">' + getLocaleText(this.parent, 'View') + '</span>'\n      });\n      this.layoutBtnObj.isStringTemplate = true;\n      this.layoutBtnObj.appendTo('#' + this.getId('View'));\n    }\n\n    this.hideItems(this.default, true);\n    this.hideStatus();\n    var btnElement = selectAll('.e-btn', this.toolbarObj.element);\n\n    var _loop_1 = function (btnCount) {\n      /* istanbul ignore next */\n      btnElement[btnCount].onkeydown = function (e) {\n        if (e.keyCode === 13 && !e.target.classList.contains('e-fe-popup')) {\n          e.preventDefault();\n        }\n      };\n\n      btnElement[btnCount].onkeyup = function (e) {\n        if (e.keyCode === 13 && !e.target.classList.contains('e-fe-popup')) {\n          btnElement[btnCount].click();\n        }\n      };\n    };\n\n    for (var btnCount = 0; btnCount < btnElement.length; btnCount++) {\n      _loop_1(btnCount);\n    }\n\n    this.parent.refreshLayout();\n  };\n\n  Toolbar$$1.prototype.updateSortByButton = function () {\n    if (this.buttonObj) {\n      var items = this.buttonObj.items;\n\n      for (var itemCount = 0; itemCount < items.length; itemCount++) {\n        if (items[itemCount].id === this.getPupupId('name')) {\n          items[itemCount].iconCss = this.parent.sortBy === 'name' ? TB_OPTION_DOT : '';\n        } else if (items[itemCount].id === this.getPupupId('size')) {\n          items[itemCount].iconCss = this.parent.sortBy === 'size' ? TB_OPTION_DOT : '';\n        } else if (items[itemCount].id === this.getPupupId('date')) {\n          items[itemCount].iconCss = this.parent.sortBy === '_fm_modified' ? TB_OPTION_DOT : '';\n        } else if (items[itemCount].id === this.getPupupId('ascending')) {\n          items[itemCount].iconCss = this.parent.sortOrder === 'Ascending' ? TB_OPTION_TICK : '';\n        } else if (items[itemCount].id === this.getPupupId('descending')) {\n          items[itemCount].iconCss = this.parent.sortOrder === 'Descending' ? TB_OPTION_TICK : '';\n        } else if (items[itemCount].id === this.getPupupId('none')) {\n          items[itemCount].iconCss = this.parent.sortOrder === 'None' ? TB_OPTION_TICK : '';\n        }\n      }\n    }\n  };\n\n  Toolbar$$1.prototype.getPupupId = function (id) {\n    return this.parent.element.id + '_ddl_' + id.toLowerCase();\n  };\n\n  Toolbar$$1.prototype.layoutChange = function (args) {\n    if (this.parent.view === 'Details') {\n      if (args.item.id === this.getPupupId('large')) {\n        updateLayout(this.parent, 'LargeIcons');\n      }\n    } else {\n      if (args.item.id === this.getPupupId('details')) {\n        updateLayout(this.parent, 'Details');\n      }\n    }\n  };\n\n  Toolbar$$1.prototype.toolbarItemData = function (data) {\n    var items = [];\n    var mode = 'Both';\n\n    if (this.parent.isMobile) {\n      mode = 'Overflow';\n    }\n\n    for (var i = 0; i < data.length; i++) {\n      var item = void 0;\n      var itemId = this.getId(data[i]);\n      var itemText = getLocaleText(this.parent, data[i]);\n      var itemTooltip = getLocaleText(this.parent, 'Tooltip-' + data[i]);\n      var spanElement = '<span class=\"e-tbar-btn-text e-tbar-ddb-text\">' + itemText + '</span>';\n\n      switch (data[i]) {\n        case '|':\n          item = {\n            type: 'Separator'\n          };\n          break;\n\n        case 'Upload':\n          item = {\n            id: itemId,\n            text: itemText,\n            tooltipText: itemTooltip,\n            prefixIcon: ICON_UPLOAD,\n            showTextOn: mode\n          };\n          break;\n\n        case 'SortBy':\n          item = {\n            id: itemId,\n            tooltipText: itemTooltip,\n            template: '<button id=\"' + itemId + '\" class=\"e-tbar-btn e-tbtn-txt\" tabindex=\"-1\">' + spanElement + '</button>'\n          };\n          break;\n\n        case 'Refresh':\n          item = {\n            id: itemId,\n            text: itemText,\n            tooltipText: itemTooltip,\n            prefixIcon: ICON_REFRESH,\n            showTextOn: mode\n          };\n          break;\n\n        case 'Selection':\n          item = {\n            id: itemId,\n            text: itemText,\n            tooltipText: itemTooltip,\n            suffixIcon: ICON_CLEAR,\n            overflow: 'Show',\n            align: 'Right'\n          };\n          break;\n\n        case 'View':\n          item = {\n            id: itemId,\n            tooltipText: itemTooltip,\n            prefixIcon: this.parent.view === 'Details' ? ICON_GRID : ICON_LARGE,\n            overflow: 'Show',\n            align: 'Right',\n            text: itemText,\n            showTextOn: 'Overflow',\n            template: '<button id=\"' + itemId + '\" class=\"e-tbar-btn e-tbtn-txt\" tabindex=\"-1\" aria-label=' + getLocaleText(this.parent, 'View') + '></button>'\n          };\n          break;\n\n        case 'Details':\n          item = {\n            id: itemId,\n            tooltipText: itemTooltip,\n            prefixIcon: ICON_DETAILS,\n            overflow: 'Show',\n            align: 'Right',\n            text: itemText,\n            showTextOn: 'Overflow'\n          };\n          break;\n\n        case 'NewFolder':\n          item = {\n            id: itemId,\n            text: itemText,\n            tooltipText: itemTooltip,\n            prefixIcon: ICON_NEWFOLDER,\n            showTextOn: mode\n          };\n          break;\n\n        case 'Cut':\n          item = {\n            id: itemId,\n            text: itemText,\n            tooltipText: itemTooltip,\n            prefixIcon: ICON_CUT,\n            showTextOn: mode\n          };\n          break;\n\n        case 'Copy':\n          item = {\n            id: itemId,\n            text: itemText,\n            tooltipText: itemTooltip,\n            prefixIcon: ICON_COPY,\n            showTextOn: mode\n          };\n          break;\n\n        case 'Paste':\n          item = {\n            id: itemId,\n            text: itemText,\n            tooltipText: itemTooltip,\n            prefixIcon: ICON_PASTE,\n            showTextOn: mode\n          };\n          break;\n\n        case 'Delete':\n          item = {\n            id: itemId,\n            text: itemText,\n            tooltipText: itemTooltip,\n            prefixIcon: ICON_DELETE,\n            showTextOn: mode\n          };\n          break;\n\n        case 'Rename':\n          item = {\n            id: itemId,\n            text: itemText,\n            tooltipText: itemTooltip,\n            prefixIcon: ICON_RENAME,\n            showTextOn: mode\n          };\n          break;\n\n        case 'Download':\n          item = {\n            id: itemId,\n            text: itemText,\n            tooltipText: itemTooltip,\n            prefixIcon: ICON_DOWNLOAD,\n            showTextOn: mode\n          };\n          break;\n\n        case 'SelectAll':\n          item = {\n            id: itemId,\n            text: itemText,\n            tooltipText: itemTooltip,\n            prefixIcon: ICON_SELECTALL,\n            showTextOn: mode\n          };\n          break;\n\n        default:\n          item = {\n            id: itemId,\n            text: itemText,\n            tooltipText: itemTooltip\n          };\n          break;\n      }\n\n      items.push(item);\n    }\n\n    return items;\n  };\n\n  Toolbar$$1.prototype.getId = function (id) {\n    return this.parent.element.id + '_tb_' + id.toLowerCase();\n  };\n\n  Toolbar$$1.prototype.addEventListener = function () {\n    this.parent.on(modelChanged, this.onPropertyChanged, this);\n    this.parent.on(selectionChanged, this.onSelectionChanged, this);\n    this.parent.on(layoutChange, this.onLayoutChange, this);\n    this.parent.on(showPaste, this.showPaste, this);\n    this.parent.on(hidePaste, this.hidePaste, this);\n    this.parent.on(destroy, this.destroy, this);\n    this.parent.on(sortByChange, this.updateSortByButton, this);\n  };\n\n  Toolbar$$1.prototype.reRenderToolbar = function (e) {\n    var _this = this;\n\n    if (e.newProp.toolbarSettings.items !== undefined) {\n      this.items = this.toolbarItemData(this.getItems(e.newProp.toolbarSettings.items.map(function (item) {\n        return item.trim();\n      })));\n      var eventArgs = {\n        items: this.items\n      };\n      this.parent.trigger('toolbarCreate', eventArgs, function (toolbarCreateArgs) {\n        if (_this.buttonObj) {\n          _this.buttonObj.destroy();\n        }\n\n        if (_this.layoutBtnObj) {\n          _this.layoutBtnObj.destroy();\n        }\n\n        _this.items = toolbarCreateArgs.items;\n        _this.toolbarObj.items = _this.items;\n\n        _this.toolbarObj.dataBind();\n\n        _this.toolbarCreateHandler();\n      });\n    }\n  };\n\n  Toolbar$$1.prototype.onSelectionChanged = function () {\n    this.hideStatus();\n    this.hideItems(this.single, true);\n    this.hideItems(this.selection, false);\n\n    if (this.parent.selectedItems.length === 1) {\n      this.hideItems(this.single, false);\n      this.hideItems(this.selection, true);\n    } else if (this.parent.selectedItems.length > 1) {\n      this.hideItems(this.multiple, false);\n      this.hideItems(this.selection, true);\n    }\n\n    var ele = select('#' + this.getId('Selection'), this.toolbarObj.element);\n\n    if (this.parent.selectedItems.length > 0 && ele) {\n      var txt = void 0;\n\n      if (this.parent.selectedItems.length === 1) {\n        txt = this.parent.selectedItems.length + ' ' + getLocaleText(this.parent, 'Item-Selection');\n      } else {\n        txt = this.parent.selectedItems.length + ' ' + getLocaleText(this.parent, 'Items-Selection');\n      }\n\n      select('.e-tbar-btn-text', ele).textContent = txt;\n      this.toolbarObj.hideItem(ele.parentElement, false);\n    }\n  };\n\n  Toolbar$$1.prototype.hideItems = function (tools, toHide) {\n    for (var i = 0; i < tools.length; i++) {\n      var ele = select('#' + this.getId(tools[i]), this.parent.element);\n\n      if (ele) {\n        this.toolbarObj.hideItem(ele.parentElement, toHide);\n      }\n    }\n  };\n\n  Toolbar$$1.prototype.hideStatus = function () {\n    var ele = select('#' + this.getId('Selection'), this.toolbarObj.element);\n\n    if (ele) {\n      this.toolbarObj.hideItem(ele.parentElement, true);\n    }\n  };\n\n  Toolbar$$1.prototype.showPaste = function () {\n    this.hideItems(['Paste'], false);\n  };\n\n  Toolbar$$1.prototype.hidePaste = function () {\n    this.hideItems(['Paste'], true);\n  };\n\n  Toolbar$$1.prototype.onLayoutChange = function () {\n    if (this.layoutBtnObj) {\n      this.layoutBtnObj.iconCss = this.parent.view === 'Details' ? ICON_GRID : ICON_LARGE;\n      var items = this.layoutBtnObj.items;\n\n      for (var itemCount = 0; itemCount < items.length; itemCount++) {\n        if (items[itemCount].id === this.getPupupId('large')) {\n          items[itemCount].iconCss = this.parent.view === 'LargeIcons' ? TB_OPTION_TICK : '';\n        } else if (items[itemCount].id === this.getPupupId('details')) {\n          items[itemCount].iconCss = this.parent.view === 'Details' ? TB_OPTION_TICK : '';\n        }\n      }\n    }\n  };\n\n  Toolbar$$1.prototype.removeEventListener = function () {\n    this.parent.off(modelChanged, this.onPropertyChanged);\n    this.parent.off(selectionChanged, this.onSelectionChanged);\n    this.parent.off(layoutChange, this.onLayoutChange);\n    this.parent.off(showPaste, this.showPaste);\n    this.parent.off(hidePaste, this.hidePaste);\n    this.parent.off(destroy, this.destroy);\n    this.parent.off(sortByChange, this.updateSortByButton);\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} - returns module name.\n   * @private\n   */\n\n\n  Toolbar$$1.prototype.getModuleName = function () {\n    return 'toolbar';\n  };\n\n  Toolbar$$1.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName() && e.module !== 'common') {\n      /* istanbul ignore next */\n      return;\n    }\n\n    for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'cssClass':\n          if (this.buttonObj) {\n            this.buttonObj.cssClass = getCssClass(this.parent, ROOT_POPUP);\n          }\n\n          if (this.layoutBtnObj) {\n            this.layoutBtnObj.cssClass = getCssClass(this.parent, 'e-caret-hide ' + ROOT_POPUP);\n          }\n\n          break;\n\n        case 'height':\n        case 'width':\n          this.toolbarObj.refreshOverflow();\n          break;\n\n        case 'toolbarSettings':\n          this.reRenderToolbar(e);\n          break;\n      }\n    }\n  };\n\n  Toolbar$$1.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeEventListener();\n\n    if (this.buttonObj) {\n      this.buttonObj.destroy();\n    }\n\n    if (this.layoutBtnObj) {\n      this.layoutBtnObj.destroy();\n    }\n\n    this.toolbarObj.destroy();\n    this.parent.refreshLayout();\n  };\n\n  Toolbar$$1.prototype.enableItems = function (items, isEnable) {\n    for (var i = 0; i < items.length; i++) {\n      var ele = select('#' + this.getId(items[i]), this.parent.element);\n\n      if (ele) {\n        this.toolbarObj.enableItems(ele.parentElement, isEnable);\n      }\n    }\n  };\n\n  return Toolbar$$1;\n}();\n/**\n * File Manager actions modules\n */\n\n/**\n * NavigationPane module\n */\n\n\nvar NavigationPane =\n/** @__PURE__ @class */\nfunction () {\n  /**\n   * Constructor for the TreeView module\n   *\n   * @param {IFileManager} parent - specifies the parent element.\n   * @hidden\n   */\n\n  /* istanbul ignore next */\n  function NavigationPane(parent) {\n    this.removeNodes = [];\n    this.moveNames = [];\n    this.expandTree = false;\n    this.isDrag = false;\n    this.isPathDragged = false;\n    this.isRenameParent = false;\n    this.isRightClick = false;\n    this.renameParent = null; // Specifies the previously selected nodes in the treeview control.\n\n    this.previousSelected = null; // Specifies whether the nodeClicked event of the treeview control is triggered or not.\n\n    this.isNodeClickCalled = false; // Specifies whether to restrict node selection in the treeview control.\n\n    this.restrictSelecting = false;\n    this.parent = parent;\n    this.addEventListener();\n    this.keyConfigs = {\n      altEnter: 'alt+enter',\n      esc: 'escape',\n      del: 'delete',\n      ctrlX: this.parent.isMac ? 'cmd+x' : 'ctrl+x',\n      ctrlC: this.parent.isMac ? 'cmd+c' : 'ctrl+c',\n      ctrlV: this.parent.isMac ? 'cmd+v' : 'ctrl+v',\n      ctrlShiftN: 'ctrl+shift+n',\n      shiftF10: 'shift+F10',\n      f2: 'f2'\n    };\n  }\n\n  NavigationPane.prototype.onInit = function () {\n    if (!isNullOrUndefined(this.treeObj)) {\n      return;\n    } // eslint-disable-next-line\n\n\n    var rootData = getValue(this.parent.pathId[0], this.parent.feParent);\n    setValue('_fm_icon', 'e-fe-folder', rootData); // eslint-disable-next-line\n\n    var attr = {};\n    var id = getValue('id', rootData);\n\n    if (!isNullOrUndefined(id)) {\n      setValue('data-id', id, attr);\n    }\n\n    if (!hasEditAccess(rootData)) {\n      setValue('class', getAccessClass(rootData), attr);\n    }\n\n    if (!isNullOrUndefined(attr)) {\n      setValue('_fm_htmlAttr', attr, rootData);\n    }\n\n    this.treeObj = new TreeView({\n      fields: {\n        dataSource: [rootData],\n        id: '_fm_id',\n        parentID: '_fm_pId',\n        expanded: '_fm_expanded',\n        selected: '_fm_selected',\n        text: 'name',\n        hasChildren: 'hasChild',\n        iconCss: '_fm_icon',\n        htmlAttributes: '_fm_htmlAttr',\n        tooltip: 'name'\n      },\n      enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n      sortOrder: this.parent.navigationPaneSettings.sortOrder,\n      nodeSelecting: this.onNodeSelecting.bind(this),\n      nodeSelected: this.onNodeSelected.bind(this),\n      nodeExpanding: this.onNodeExpand.bind(this),\n      nodeClicked: this.onNodeClicked.bind(this),\n      allowEditing: true,\n      nodeEditing: this.onNodeEditing.bind(this),\n      drawNode: this.onDrowNode.bind(this),\n      enableRtl: this.parent.enableRtl,\n      dataBound: this.addDragDrop.bind(this)\n    });\n    this.treeObj.isStringTemplate = true;\n    this.treeObj.appendTo('#' + this.parent.element.id + TREE_ID);\n    this.wireEvents();\n  };\n\n  NavigationPane.prototype.addDragDrop = function () {\n    var _this = this;\n\n    if (!this.parent.isMobile && this.treeObj) {\n      if (this.parent.allowDragAndDrop) {\n        if (this.dragObj) {\n          this.dragObj.destroy();\n        }\n\n        this.dragObj = new Draggable(this.treeObj.element, {\n          cursorAt: this.parent.dragCursorPosition,\n          dragTarget: '.' + FULLROW,\n          distance: 5,\n          dragArea: this.parent.element,\n          drag: draggingHandler.bind(this, this.parent),\n          dragStart: function (args) {\n            dragStartHandler(_this.parent, args, _this.dragObj);\n          },\n          dragStop: dragStopHandler.bind(this, this.parent),\n          enableTailMode: true,\n          enableAutoScroll: true,\n          helper: this.dragHelper.bind(this)\n        });\n      } else if (!this.parent.allowDragAndDrop && this.dragObj) {\n        this.dragObj.destroy();\n      }\n    }\n  };\n\n  NavigationPane.prototype.dragHelper = function (args) {\n    var dragTarget = args.sender.target;\n\n    if (!dragTarget.classList.contains(FULLROW)) {\n      return null;\n    }\n\n    var dragLi = closest(dragTarget, 'li');\n    this.parent.dragPath = '';\n    this.parent.dragData = [];\n    this.parent.activeElements = [];\n    this.parent.activeElements = [dragLi];\n    this.parent.dragNodes = [];\n    getModule(this.parent, dragLi); // eslint-disable-next-line\n\n    this.parent.dragData = this.getTreeData(dragLi);\n    this.parent.dragPath = this.getDragPath(dragLi, this.parent.dragData[0].name);\n    this.parent.dragNodes.push(this.parent.dragData[0].name);\n    createVirtualDragElement(this.parent);\n    return this.parent.virtualDragElement;\n  };\n\n  NavigationPane.prototype.getDragPath = function (dragLi, text) {\n    var path = this.getDropPath(dragLi, text);\n    return getParentPath(path);\n  };\n\n  NavigationPane.prototype.getDropPath = function (node, text) {\n    var id = node.getAttribute('data-id');\n    var newText = this.parent.hasId ? id : text;\n    return getPath(node, newText, this.parent.hasId);\n  };\n\n  NavigationPane.prototype.onDrowNode = function (args) {\n    var eventArgs = {\n      element: args.node,\n      fileDetails: args.nodeData,\n      module: 'NavigationPane'\n    };\n    this.parent.trigger('fileLoad', eventArgs);\n  }; // eslint-disable-next-line\n\n\n  NavigationPane.prototype.addChild = function (files, target, prevent) {\n    // eslint-disable-next-line\n    var directories = getDirectories(files);\n\n    if (directories.length > 0) {\n      var length_1 = 0; // eslint-disable-next-line\n\n      var folders = directories;\n\n      while (length_1 < directories.length) {\n        // eslint-disable-next-line\n        folders[length_1]._fm_icon = 'e-fe-folder'; // eslint-disable-next-line\n\n        var attr = {};\n        var id = getValue('id', folders[length_1]);\n\n        if (!isNullOrUndefined(id)) {\n          setValue('data-id', id, attr);\n        }\n\n        if (!hasEditAccess(folders[length_1])) {\n          setValue('class', getAccessClass(folders[length_1]), attr);\n        }\n\n        if (!isNullOrUndefined(attr)) {\n          setValue('_fm_htmlAttr', attr, folders[length_1]);\n        }\n\n        length_1++;\n      } // eslint-disable-next-line\n\n\n      this.treeObj.addNodes(directories, target, null, prevent);\n    }\n  }; // Node Selecting event handler\n\n\n  NavigationPane.prototype.onNodeSelecting = function (args) {\n    if (!args.isInteracted && !this.isRightClick && !this.isPathDragged && !this.isRenameParent || this.restrictSelecting) {\n      this.restrictSelecting = false;\n      this.isNodeClickCalled = false;\n      return;\n    }\n\n    if (!this.renameParent) {\n      this.parent.activeModule = 'navigationpane'; // eslint-disable-next-line\n\n      var nodeData = this.getTreeData(getValue('id', args.nodeData));\n      var eventArgs = {\n        cancel: false,\n        fileDetails: nodeData[0],\n        module: 'NavigationPane'\n      };\n      this.parent.trigger('fileOpen', eventArgs);\n      args.cancel = eventArgs.cancel;\n\n      if (args.cancel) {\n        this.restrictSelecting = this.isNodeClickCalled ? this.previousSelected[0] !== args.node.getAttribute('data-uid') : false;\n        this.treeObj.selectedNodes = this.isNodeClickCalled ? this.previousSelected : this.treeObj.selectedNodes;\n        this.previousSelected = this.treeObj.selectedNodes;\n\n        if (!isNullOrUndefined(this.parent) && !isNullOrUndefined(this.parent.contextmenuModule)) {\n          this.parent.contextmenuModule.contextMenu.enableItems(['Open'], true);\n        }\n      }\n    }\n  }; // Opens the folder while clicking open context menu item in the treeview.\n\n\n  NavigationPane.prototype.openFileOnContextMenuClick = function (node) {\n    var data = this.treeObj.getTreeData(node); // eslint-disable-next-line\n\n    this.parent.selectedItems = [];\n    this.parent.itemData = data;\n    this.activeNode = node;\n    this.parent.activeModule = 'navigationpane';\n    updatePath(node, this.parent.itemData[0], this.parent);\n    read(this.parent, this.isPathDragged ? pasteEnd : pathChanged, this.parent.path);\n    this.parent.visitedItem = node;\n    this.isPathDragged = this.isRenameParent = this.isRightClick = false;\n    this.treeObj.selectedNodes = [node.getAttribute('data-uid')];\n  };\n\n  NavigationPane.prototype.onNodeSelected = function (args) {\n    if (this.parent.breadcrumbbarModule && this.parent.breadcrumbbarModule.searchObj && !this.renameParent) {\n      this.parent.breadcrumbbarModule.searchObj.element.value = '';\n      this.parent.isFiltered = false;\n    }\n\n    this.parent.searchedItems = [];\n\n    if (!args.isInteracted && !this.isRightClick && !this.isPathDragged && !this.isRenameParent) {\n      return;\n    }\n\n    this.activeNode = args.node;\n    this.parent.activeModule = 'navigationpane'; // eslint-disable-next-line\n\n    var nodeData = this.getTreeData(getValue('id', args.nodeData));\n    this.parent.selectedItems = [];\n    this.parent.itemData = nodeData;\n    var previousPath = this.parent.path;\n    updatePath(args.node, this.parent.itemData[0], this.parent);\n\n    if (previousPath !== this.parent.path) {\n      this.expandNodeTarget = null;\n\n      if (args.node.querySelector('.' + ICONS) && args.node.querySelector('.' + LIST_ITEM) === null) {\n        this.expandNodeTarget = 'add';\n      }\n\n      read(this.parent, this.isPathDragged ? pasteEnd : pathChanged, this.parent.path);\n      this.parent.visitedItem = args.node;\n    }\n\n    this.isPathDragged = this.isRenameParent = this.isRightClick = false;\n  };\n  /* istanbul ignore next */\n  // eslint-disable-next-line\n\n\n  NavigationPane.prototype.onPathDrag = function (args) {\n    this.isPathDragged = true;\n    this.selectResultNode(args[0]);\n  };\n  /* istanbul ignore next */\n\n\n  NavigationPane.prototype.onNodeExpand = function (args) {\n    if (!args.isInteracted && !this.isDrag) {\n      return;\n    }\n\n    if (args.node.querySelector('.' + LIST_ITEM) === null) {\n      var text = getValue('text', args.nodeData);\n      var id = args.node.getAttribute('data-id');\n      var isId = isNullOrUndefined(id) ? false : true;\n      var newText = isNullOrUndefined(id) ? text : id;\n      var path = getPath(args.node, newText, isId);\n      this.expandNodeTarget = args.node.getAttribute('data-uid');\n      this.parent.expandedId = this.expandNodeTarget;\n      this.parent.itemData = this.getTreeData(getValue('id', args.nodeData));\n      read(this.parent, nodeExpand, path);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  NavigationPane.prototype.onNodeExpanded = function (args) {\n    this.addChild(args.files, this.expandNodeTarget, false);\n    this.parent.expandedId = null;\n  };\n\n  NavigationPane.prototype.onNodeClicked = function (args) {\n    this.parent.activeModule = 'navigationpane';\n    this.previousSelected = this.treeObj.selectedNodes;\n    this.activeNode = args.node;\n\n    if (args.event.which === 3 && args.node.getAttribute('data-uid') !== this.treeObj.selectedNodes[0]) {\n      this.isRightClick = true;\n      this.isNodeClickCalled = true;\n      this.treeObj.selectedNodes = [args.node.getAttribute('data-uid')];\n    } else if (args.node.getAttribute('data-uid') === this.treeObj.selectedNodes[0] && this.parent.selectedItems.length !== 0) {\n      this.parent.setProperties({\n        selectedItems: []\n      }, true);\n      var layout = this.parent.view === 'LargeIcons' ? 'largeiconsview' : 'detailsview';\n      this.parent.notify(modelChanged, {\n        module: layout,\n        newProp: {\n          selectedItems: []\n        }\n      });\n    }\n  };\n  /* istanbul ignore next */\n\n\n  NavigationPane.prototype.onNodeEditing = function (args) {\n    if (!isNullOrUndefined(args.innerHtml)) {\n      args.cancel = true;\n    }\n  };\n\n  NavigationPane.prototype.onPathChanged = function (args) {\n    this.parent.isCut = false; // eslint-disable-next-line\n\n    var currFiles = getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feFiles);\n\n    if (this.expandNodeTarget === 'add') {\n      var sNode = select('[data-uid=\"' + this.treeObj.selectedNodes[0] + '\"]', this.treeObj.element);\n      var ul = !isNullOrUndefined(sNode) ? select('.' + LIST_PARENT, sNode) : null;\n\n      if (isNullOrUndefined(ul)) {\n        this.addChild(args.files, this.treeObj.selectedNodes[0], !this.expandTree);\n      }\n\n      this.expandNodeTarget = '';\n    }\n\n    this.expandTree = false;\n\n    if (isNullOrUndefined(currFiles)) {\n      setValue(this.parent.pathId[this.parent.pathId.length - 1], args.files, this.parent.feFiles);\n    }\n\n    if (this.parent.uploadObj.directoryUpload) this.updateTree(args);\n  };\n\n  NavigationPane.prototype.updateTree = function (args) {\n    if (this.treeObj) {\n      var id = this.treeObj.selectedNodes[0];\n      this.updateTreeNode(args, id);\n    }\n  };\n\n  NavigationPane.prototype.updateTreeNode = function (args, id) {\n    var toExpand = this.treeObj.expandedNodes.indexOf(id) === -1 ? false : true;\n    this.removeChildNodes(id);\n    this.addChild(args.files, id, !toExpand);\n  };\n\n  NavigationPane.prototype.removeChildNodes = function (id) {\n    var sNode = select('[data-uid=\"' + id + '\"]', this.treeObj.element);\n    var parent = select('.' + LIST_PARENT, sNode);\n    var childs = parent ? Array.prototype.slice.call(parent.children) : null;\n\n    if (childs) {\n      this.treeObj.removeNodes(childs);\n    }\n  };\n\n  NavigationPane.prototype.onOpenEnd = function (args) {\n    var sleId = this.parent.pathId[this.parent.pathId.length - 1];\n    this.treeObj.expandAll(this.treeObj.selectedNodes);\n    this.treeObj.selectedNodes = [sleId];\n    this.expandNodeTarget = 'add';\n    this.onPathChanged(args);\n  };\n\n  NavigationPane.prototype.onOpenInit = function (args) {\n    if (this.parent.activeModule === 'navigationpane') {\n      if (args.target.querySelector('.' + ICONS)) {\n        this.treeObj.expandAll(this.treeObj.selectedNodes);\n      }\n    }\n  };\n\n  NavigationPane.prototype.onInitialEnd = function (args) {\n    this.onInit();\n    this.addChild(args.files, getValue('_fm_id', args.cwd), false);\n  };\n\n  NavigationPane.prototype.onFinalizeEnd = function (args) {\n    this.onInit();\n    var id = getValue('_fm_id', args.cwd);\n    this.removeChildNodes(id);\n    this.addChild(args.files, id, false);\n    this.treeObj.selectedNodes = [this.parent.pathId[this.parent.pathId.length - 1]];\n  };\n\n  NavigationPane.prototype.onCreateEnd = function (args) {\n    this.updateTree(args);\n  };\n\n  NavigationPane.prototype.onSelectedData = function () {\n    if (this.parent.activeModule === 'navigationpane') {\n      this.updateItemData();\n    }\n  };\n\n  NavigationPane.prototype.onDeleteInit = function () {\n    if (this.parent.activeModule === 'navigationpane') {\n      this.updateActionData();\n      var name_1 = getValue('name', this.parent.itemData[0]);\n      Delete(this.parent, [name_1], this.parent.path, 'delete');\n    }\n  };\n  /* istanbul ignore next */\n\n\n  NavigationPane.prototype.onDeleteEnd = function (args) {\n    if (this.parent.activeModule === 'navigationpane') {\n      var selectedNode = this.treeObj.selectedNodes[0];\n      var selcetedEle = select('[data-uid=\"' + selectedNode + '\"]', this.treeObj.element);\n      var selectedNodeEle = closest(selcetedEle, '.' + LIST_PARENT).parentElement;\n      this.treeObj.selectedNodes = [selectedNodeEle.getAttribute('data-uid')];\n      this.treeObj.dataBind();\n    }\n\n    this.updateTree(args);\n  };\n\n  NavigationPane.prototype.onRefreshEnd = function (args) {\n    this.updateTree(args);\n  };\n\n  NavigationPane.prototype.onRenameInit = function () {\n    if (this.parent.activeModule === 'navigationpane') {\n      this.updateRenameData();\n    }\n  };\n  /* istanbul ignore next */\n\n\n  NavigationPane.prototype.onRenameEndParent = function (args) {\n    var id = this.renameParent ? this.renameParent : this.parent.pathId[this.parent.pathId.length - 1];\n    this.expandTree = this.treeObj.expandedNodes.indexOf(this.treeObj.selectedNodes[0]) !== -1;\n    this.updateTreeNode(args, id);\n    this.parent.expandedId = null;\n\n    if (this.renameParent) {\n      this.renameParent = null;\n    } else {\n      // eslint-disable-next-line\n      var resultData = [];\n\n      if (this.parent.hasId) {\n        resultData = new DataManager(this.treeObj.getTreeData()).executeLocal(new Query().where('id', 'equal', this.parent.renamedId, false));\n      } else {\n        // eslint-disable-next-line\n        var nData = new DataManager(this.treeObj.getTreeData()).executeLocal(new Query().where(this.treeObj.fields.text, 'equal', this.parent.renameText, false));\n\n        if (nData.length > 0) {\n          resultData = new DataManager(nData).executeLocal(new Query().where('_fm_pId', 'equal', id, false));\n        }\n      }\n\n      if (resultData.length > 0) {\n        this.isRenameParent = true;\n        var id_1 = getValue(this.treeObj.fields.id, resultData[0]);\n        this.treeObj.selectedNodes = [id_1];\n        this.treeObj.dataBind();\n      }\n    }\n  };\n  /* istanbul ignore next */\n\n\n  NavigationPane.prototype.onRenameEnd = function (args) {\n    if (this.parent.breadcrumbbarModule.searchObj.element.value === '' && !this.parent.isFiltered) {\n      this.updateTree(args);\n    } else {\n      // eslint-disable-next-line\n      var data = this.treeObj.getTreeData(); // eslint-disable-next-line\n\n      var resultData = [];\n\n      if (this.parent.hasId) {\n        resultData = new DataManager(data).executeLocal(new Query().where('id', 'equal', this.parent.renamedId, false));\n      } else {\n        // eslint-disable-next-line\n        var nData = new DataManager(data).executeLocal(new Query().where(this.treeObj.fields.text, 'equal', this.parent.currentItemText, false));\n\n        if (nData.length > 0) {\n          resultData = new DataManager(nData).executeLocal(new Query().where('filterPath', 'equal', this.parent.filterPath, false));\n        }\n      }\n\n      if (resultData.length > 0) {\n        this.renameParent = getValue(this.treeObj.fields.parentID, resultData[0]);\n        this.parent.expandedId = this.renameParent;\n        this.parent.itemData = this.getTreeData(this.renameParent);\n        read(this.parent, renameEndParent, this.parent.filterPath.replace(/\\\\/g, '/'));\n      }\n    }\n  };\n\n  NavigationPane.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName() && e.module !== 'common') {\n      /* istanbul ignore next */\n      return;\n    }\n\n    for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'allowDragAndDrop':\n          this.addDragDrop();\n          break;\n\n        case 'navigationPaneSettings':\n          read(this.parent, finalizeEnd, '/');\n\n          if (e.oldProp.navigationPaneSettings.sortOrder !== e.newProp.navigationPaneSettings.sortOrder) {\n            this.treeObj.sortOrder = e.newProp.navigationPaneSettings.sortOrder;\n          }\n\n          break;\n      }\n    }\n  };\n  /* istanbul ignore next */\n\n\n  NavigationPane.prototype.onDownLoadInit = function () {\n    this.doDownload();\n  };\n\n  NavigationPane.prototype.onSelectionChanged = function (e) {\n    this.treeObj.selectedNodes = [e.selectedNode];\n  };\n\n  NavigationPane.prototype.onClearPathInit = function (e) {\n    this.removeChildNodes(e.selectedNode);\n  };\n\n  NavigationPane.prototype.onDragEnd = function (args) {\n    var moveNames = [];\n\n    if (this.parent.isPasteError || this.parent.isSearchDrag) {\n      moveNames = this.getMoveNames(args.files, this.parent.isSearchDrag, this.parent.dragPath);\n    } else {\n      moveNames = this.moveNames;\n    }\n\n    this.treeObj.removeNodes(moveNames);\n  }; // eslint-disable-next-line\n\n\n  NavigationPane.prototype.getMoveNames = function (files, flag, path) {\n    var moveNames = [];\n\n    for (var i = 0; i < files.length; i++) {\n      if (!files[i].isFile) {\n        if (!this.parent.hasId) {\n          var name_2 = files[i].previousName;\n\n          if (flag) {\n            path = path + files[i].previousName;\n            var index = path.lastIndexOf('/');\n            name_2 = path.substring(index + 1);\n            path = path.substring(0, index + 1);\n          } // eslint-disable-next-line\n\n\n          var resultData = new DataManager(this.treeObj.getTreeData()).executeLocal(new Query().where(this.treeObj.fields.text, 'equal', name_2, false));\n\n          for (var j = 0; j < resultData.length; j++) {\n            var fPath = getValue('filterPath', resultData[j]);\n            fPath = fPath.replace(/\\\\/g, '/');\n\n            if (fPath === path) {\n              moveNames.push(getValue(this.treeObj.fields.id, resultData[j]));\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return moveNames;\n  };\n\n  NavigationPane.prototype.onCutEnd = function (args) {\n    var moveNames = [];\n\n    if (this.parent.isPasteError || this.parent.isSearchCut) {\n      this.moveNames = this.getMoveNames(args.files, this.parent.isSearchCut, this.parent.targetPath);\n    } else {\n      moveNames = this.moveNames;\n    }\n\n    this.treeObj.removeNodes(moveNames);\n  };\n  /* istanbul ignore next */\n  // eslint-disable-next-line\n\n\n  NavigationPane.prototype.selectResultNode = function (resultObj) {\n    if (!this.parent.hasId) {\n      var path = getValue('filterPath', resultObj);\n      var itemname = getValue('name', resultObj); // eslint-disable-next-line\n\n      var data = new DataManager(this.treeObj.getTreeData()).executeLocal(new Query().where(this.treeObj.fields.text, 'equal', itemname, false));\n\n      if (data.length > 0) {\n        // eslint-disable-next-line\n        var resultData = new DataManager(data).executeLocal(new Query().where('filterPath', 'equal', path, false));\n\n        if (resultData.length > 0) {\n          var id = getValue(this.treeObj.fields.id, resultData[0]);\n          this.treeObj.selectedNodes = [id];\n          this.treeObj.dataBind();\n        }\n      }\n    } else {\n      this.treeObj.selectedNodes = [getValue('_fm_id', resultObj)];\n      this.treeObj.dataBind();\n    }\n  };\n\n  NavigationPane.prototype.onDropPath = function (args) {\n    this.onpasteEnd(args);\n    this.selectResultNode(this.parent.dropData);\n    this.parent.isDropEnd = !this.parent.isPasteError;\n  };\n\n  NavigationPane.prototype.onpasteEnd = function (args) {\n    // eslint-disable-next-line\n    var resultData = [];\n\n    if (this.parent.hasId) {\n      resultData = new DataManager(this.treeObj.getTreeData()).executeLocal(new Query().where('id', 'equal', getValue('id', args.cwd), false));\n    } else {\n      // eslint-disable-next-line\n      var nData = new DataManager(this.treeObj.getTreeData()).executeLocal(new Query().where(this.treeObj.fields.text, 'equal', getValue('name', args.cwd), false));\n\n      if (nData.length > 0) {\n        resultData = new DataManager(nData).executeLocal(new Query().where('filterPath', 'equal', getValue('filterPath', args.cwd), false));\n      }\n    }\n\n    if (resultData.length > 0) {\n      var id = getValue(this.treeObj.fields.id, resultData[0]);\n      var toExpand = this.treeObj.expandedNodes.indexOf(id) === -1;\n      this.removeChildNodes(id);\n      this.addChild(args.files, id, toExpand);\n    }\n\n    this.parent.expandedId = null;\n    this.onPathChanged(args);\n\n    if (this.parent.isDragDrop) {\n      this.checkDropPath(args);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  NavigationPane.prototype.checkDropPath = function (args) {\n    if (this.parent.hasId) {\n      this.parent.isDropEnd = !this.parent.isPasteError;\n      readDropPath(this.parent);\n      return;\n    }\n\n    if (this.parent.dropPath.indexOf(getDirectoryPath(this.parent, args)) === -1) {\n      this.parent.isDropEnd = false;\n      readDropPath(this.parent);\n    } else {\n      this.parent.isDropEnd = !this.parent.isPasteError;\n    }\n  };\n\n  NavigationPane.prototype.onpasteInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      this.updateItemData();\n    }\n\n    this.moveNames = []; // eslint-disable-next-line\n\n    var obj = this.parent.isDragDrop ? this.parent.dragData : this.parent.actionRecords;\n\n    for (var i = 0; i < obj.length; i++) {\n      if (getValue('isFile', obj[i]) === false) {\n        this.moveNames.push(getValue('_fm_id', obj[i]));\n      }\n    }\n  };\n\n  NavigationPane.prototype.oncutCopyInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      this.parent.activeRecords = this.getTreeData(this.treeObj.selectedNodes[0]);\n      this.parent.activeElements = [this.activeNode];\n    }\n  };\n\n  NavigationPane.prototype.addEventListener = function () {\n    this.parent.on(modelChanged, this.onPropertyChanged, this);\n    this.parent.on(downloadInit, this.onDownLoadInit, this);\n    this.parent.on(initialEnd, this.onInitialEnd, this);\n    this.parent.on(finalizeEnd, this.onFinalizeEnd, this);\n    this.parent.on(pathChanged, this.onPathChanged, this);\n    this.parent.on(pasteEnd, this.onpasteEnd, this);\n    this.parent.on(cutEnd, this.onCutEnd, this);\n    this.parent.on(pasteInit, this.onpasteInit, this);\n    this.parent.on(nodeExpand, this.onNodeExpanded, this);\n    this.parent.on(createEnd, this.onCreateEnd, this);\n    this.parent.on(selectedData, this.onSelectedData, this);\n    this.parent.on(deleteInit, this.onDeleteInit, this);\n    this.parent.on(deleteEnd, this.onDeleteEnd, this);\n    this.parent.on(refreshEnd, this.onRefreshEnd, this);\n    this.parent.on(updateTreeSelection, this.onSelectionChanged, this);\n    this.parent.on(openInit, this.onOpenInit, this);\n    this.parent.on(openEnd, this.onOpenEnd, this);\n    this.parent.on(destroy, this.destroy, this);\n    this.parent.on(renameInit, this.onRenameInit, this);\n    this.parent.on(renameEnd, this.onRenameEnd, this);\n    this.parent.on(renameEndParent, this.onRenameEndParent, this);\n    this.parent.on(clearPathInit, this.onClearPathInit, this);\n    this.parent.on(cutCopyInit, this.oncutCopyInit, this);\n    this.parent.on(dropInit, this.onDropInit, this);\n    this.parent.on(menuItemData, this.onMenuItemData, this);\n    this.parent.on(dragEnd, this.onDragEnd, this);\n    this.parent.on(dragging, this.onDragging, this);\n    this.parent.on(dropPath, this.onDropPath, this);\n    this.parent.on(detailsInit, this.onDetailsInit, this);\n    this.parent.on(pathDrag, this.onPathDrag, this);\n  };\n\n  NavigationPane.prototype.removeEventListener = function () {\n    this.parent.off(initialEnd, this.onInitialEnd);\n    this.parent.off(downloadInit, this.onDownLoadInit);\n    this.parent.off(finalizeEnd, this.onFinalizeEnd);\n    this.parent.off(selectedData, this.onSelectedData);\n    this.parent.off(modelChanged, this.onPropertyChanged);\n    this.parent.off(pathChanged, this.onPathChanged);\n    this.parent.off(pasteEnd, this.onpasteEnd);\n    this.parent.off(cutEnd, this.onCutEnd);\n    this.parent.off(pasteInit, this.onpasteInit);\n    this.parent.off(updateTreeSelection, this.onSelectionChanged);\n    this.parent.off(nodeExpand, this.onNodeExpanded);\n    this.parent.off(createEnd, this.onCreateEnd);\n    this.parent.off(refreshEnd, this.onRefreshEnd);\n    this.parent.off(openInit, this.onOpenInit);\n    this.parent.off(openEnd, this.onOpenEnd);\n    this.parent.off(destroy, this.destroy);\n    this.parent.off(renameInit, this.onRenameInit);\n    this.parent.off(renameEnd, this.onRenameEnd);\n    this.parent.off(renameEndParent, this.onRenameEndParent);\n    this.parent.off(clearPathInit, this.onClearPathInit);\n    this.parent.off(deleteInit, this.onDeleteInit);\n    this.parent.off(deleteEnd, this.onDeleteEnd);\n    this.parent.off(cutCopyInit, this.oncutCopyInit);\n    this.parent.off(dropInit, this.onDropInit);\n    this.parent.off(dragEnd, this.onDragEnd);\n    this.parent.off(dragging, this.onDragging);\n    this.parent.off(dropPath, this.onDropPath);\n    this.parent.off(detailsInit, this.onDetailsInit);\n    this.parent.off(menuItemData, this.onMenuItemData);\n    this.parent.off(pathDrag, this.onPathDrag);\n  };\n  /* istanbul ignore next */\n\n\n  NavigationPane.prototype.onDetailsInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      // eslint-disable-next-line\n      var dataobj = this.getTreeData(this.treeObj.selectedNodes[0]);\n      this.parent.itemData = dataobj;\n    }\n  }; // eslint-disable-next-line\n\n\n  NavigationPane.prototype.onMenuItemData = function (args) {\n    if (this.parent.activeModule === this.getModuleName()) {\n      var liEle = closest(args.target, 'li');\n      this.parent.itemData = this.getTreeData(liEle.getAttribute('data-uid'));\n    }\n  };\n  /* istanbul ignore next */\n\n\n  NavigationPane.prototype.onDragging = function (args) {\n    var ele = closest(args.target, 'li');\n\n    if (ele.classList.contains('e-node-collapsed')) {\n      this.isDrag = true;\n      var level = parseInt(ele.getAttribute('aria-level'), 10);\n      this.treeObj.expandAll([ele.getAttribute('data-uid')], level + 1);\n      this.isDrag = false;\n    }\n  };\n\n  NavigationPane.prototype.onDropInit = function (args) {\n    if (this.parent.targetModule === this.getModuleName()) {\n      var dropLi = closest(args.target, 'li');\n      this.parent.dropData = this.getTreeData(dropLi)[0];\n      this.parent.dropPath = this.getDropPath(dropLi, getValue('name', this.parent.dropData));\n    }\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} - returns the module name.\n   * @private\n   */\n\n\n  NavigationPane.prototype.getModuleName = function () {\n    return 'navigationpane';\n  };\n\n  NavigationPane.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeEventListener();\n\n    if (this.treeObj) {\n      this.unWireEvents();\n      this.treeObj.destroy();\n    }\n  };\n\n  NavigationPane.prototype.wireEvents = function () {\n    this.keyboardModule = new KeyboardEvents(this.treeObj.element, {\n      keyAction: this.keyDown.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n\n  NavigationPane.prototype.unWireEvents = function () {\n    this.keyboardModule.destroy();\n  };\n  /* istanbul ignore next */\n\n\n  NavigationPane.prototype.keyDown = function (e) {\n    var action = e.action;\n\n    switch (action) {\n      case 'altEnter':\n        this.parent.notify(detailsInit, {});\n        GetDetails(this.parent, [], this.parent.path, 'details');\n        break;\n\n      case 'esc':\n        removeActive(this.parent);\n        break;\n\n      case 'del':\n        if (this.parent.pathId[0] !== this.activeNode.getAttribute('data-uid')) {\n          this.updateItemData();\n\n          if (!hasEditAccess(this.parent.itemData[0])) {\n            createDeniedDialog(this.parent, this.parent.itemData[0], permissionEdit);\n          } else {\n            this.removeNodes = [];\n            createDialog(this.parent, 'Delete');\n          }\n        }\n\n        break;\n\n      case 'ctrlC':\n        copyFiles(this.parent);\n        break;\n\n      case 'ctrlV':\n        this.parent.folderPath = '';\n        pasteHandler(this.parent);\n        break;\n\n      case 'ctrlX':\n        cutFiles(this.parent);\n        break;\n\n      case 'shiftF10':\n        this.updateItemData();\n\n        if (!hasDownloadAccess(this.parent.itemData[0])) {\n          createDeniedDialog(this.parent, this.parent.itemData[0], permissionDownload);\n          return;\n        }\n\n        if (this.parent.selectedItems.length !== 0) {\n          this.doDownload();\n        }\n\n        break;\n\n      case 'f2':\n        if (this.parent.selectedItems.length === 0) {\n          // eslint-disable-next-line\n          var data = this.getTreeData(this.treeObj.selectedNodes[0])[0];\n\n          if (!hasEditAccess(data)) {\n            createDeniedDialog(this.parent, data, permissionEdit);\n          } else {\n            this.updateRenameData();\n            createDialog(this.parent, 'Rename');\n          }\n        }\n\n        break;\n    }\n  }; // eslint-disable-next-line\n\n\n  NavigationPane.prototype.getTreeData = function (args) {\n    // eslint-disable-next-line\n    var data = this.treeObj.getTreeData(args);\n\n    for (var i = 0; i < data.length; i++) {\n      if (isNullOrUndefined(getValue('hasChild', data[i]))) {\n        setValue('hasChild', false, data[i]);\n      }\n    }\n\n    return data;\n  };\n\n  NavigationPane.prototype.updateRenameData = function () {\n    this.updateItemData();\n    this.parent.currentItemText = getValue('name', this.parent.itemData[0]);\n  };\n\n  NavigationPane.prototype.updateItemData = function () {\n    // eslint-disable-next-line\n    var data = this.getTreeData(this.treeObj.selectedNodes[0])[0];\n    this.parent.itemData = [data];\n    this.parent.isFile = false;\n  };\n\n  NavigationPane.prototype.updateActionData = function () {\n    this.updateItemData();\n    var newPath = getParentPath(this.parent.path);\n    this.parent.setProperties({\n      path: newPath\n    }, true);\n    this.parent.pathId.pop();\n    this.parent.pathNames.pop();\n  };\n  /* istanbul ignore next */\n\n\n  NavigationPane.prototype.doDownload = function () {\n    var newPath = getParentPath(this.parent.path);\n    var itemId = this.treeObj.selectedNodes[0];\n    var name = itemId === this.parent.pathId[0] ? '' : getValue('name', this.parent.itemData[0]);\n    Download(this.parent, newPath, [name]);\n  };\n\n  return NavigationPane;\n}();\n/**\n * DetailsView module\n */\n\n\nvar DetailsView =\n/** @__PURE__ @class */\nfunction () {\n  /**\n   * Constructor for the GridView module\n   *\n   * @param {FileManager} parent - specifies the parent.\n   * @hidden\n   */\n  function DetailsView(parent) {\n    this.isInteracted = true;\n    this.interaction = true;\n    this.isPasteOperation = false;\n    this.isColumnRefresh = false;\n    this.dragObj = null;\n    this.startIndex = null;\n    this.firstItemIndex = null;\n    this.isSelectionUpdate = false;\n    this.currentSelectedItem = [];\n    this.count = 0;\n    this.isRendered = true;\n    this.isLoaded = false;\n    this.isNameWidth = false;\n    this.pasteOperation = false;\n    this.uploadOperation = false;\n    Grid.Inject(Resize, ContextMenu$1, Sort, VirtualScroll);\n    this.parent = parent;\n    this.element = select('#' + this.parent.element.id + GRID_ID, this.parent.element);\n    this.addEventListener();\n    this.keyConfigs = {\n      altEnter: 'alt+enter',\n      esc: 'escape',\n      tab: 'tab',\n      moveDown: 'downarrow',\n      ctrlEnd: 'ctrl+end',\n      ctrlHome: 'ctrl+home',\n      ctrlDown: 'ctrl+downarrow',\n      ctrlLeft: 'ctrl+leftarrow',\n      ctrlRight: 'ctrl+rightarrow',\n      shiftEnd: 'shift+end',\n      shiftHome: 'shift+home',\n      shiftDown: 'shift+downarrow',\n      shiftUp: 'shift+uparrow',\n      ctrlUp: 'ctrl+uparrow',\n      csEnd: 'ctrl+shift+end',\n      csHome: 'ctrl+shift+home',\n      csDown: 'ctrl+shift+downarrow',\n      csUp: 'ctrl+shift+uparrow',\n      space: 'space',\n      ctrlSpace: 'ctrl+space',\n      shiftSpace: 'shift+space',\n      csSpace: 'ctrl+shift+space',\n      end: 'end',\n      home: 'home',\n      moveUp: 'uparrow',\n      del: 'delete',\n      ctrlX: this.parent.isMac ? 'cmd+x' : 'ctrl+x',\n      ctrlC: this.parent.isMac ? 'cmd+c' : 'ctrl+c',\n      ctrlV: this.parent.isMac ? 'cmd+v' : 'ctrl+v',\n      ctrlShiftN: 'ctrl+shift+n',\n      shiftdel: 'shift+delete',\n      ctrlD: 'ctrl+d',\n      f2: 'f2',\n      ctrlA: 'ctrl+a',\n      enter: 'enter'\n    };\n  }\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.render = function (args) {\n    showSpinner(this.parent.element);\n\n    if (this.parent.view === 'Details') {\n      removeClass([this.parent.element], MULTI_SELECT); // eslint-disable-next-line\n\n      var items = getSortedData(this.parent, args.files);\n      this.checkNameWidth();\n      var columns = this.getColumns();\n      var sortSettings = void 0;\n\n      if (this.parent.isMobile) {\n        sortSettings = [];\n      } else {\n        if (this.parent.sortOrder !== 'None') {\n          sortSettings = [{\n            direction: this.parent.sortOrder,\n            field: this.parent.sortBy\n          }];\n        }\n      }\n\n      this.gridObj = new Grid({\n        dataSource: items,\n        allowSorting: true,\n        rowSelecting: this.onSelection.bind(this, 'select'),\n        rowDeselecting: this.onSelection.bind(this, 'unselect'),\n        rowSelected: this.onSelected.bind(this),\n        rowDeselected: this.onDeSelection.bind(this),\n        allowResizing: this.parent.detailsViewSettings.columnResizing,\n        selectionSettings: {\n          type: this.parent.allowMultiSelection ? 'Multiple' : 'Single',\n          checkboxMode: 'ResetOnRowClick'\n        },\n        enableRtl: this.parent.enableRtl,\n        pageSettings: {\n          pageSize: 20\n        },\n        sortSettings: {\n          allowUnsort: false,\n          columns: sortSettings\n        },\n        columns: columns,\n        recordDoubleClick: this.DblClickEvents.bind(this),\n        beforeDataBound: this.onBeforeDataBound.bind(this),\n        dataBound: this.onDataBound.bind(this),\n        rowDataBound: this.onRowDataBound.bind(this),\n        actionBegin: this.onActionBegin.bind(this),\n        headerCellInfo: this.onHeaderCellInfo.bind(this),\n        width: '100%',\n        beforeCopy: function (args) {\n          args.cancel = true;\n        },\n        // eslint-disable-next-line\n        load: function (args) {\n          this.focusModule.destroy();\n        },\n        locale: this.parent.locale\n      });\n      this.gridObj.isStringTemplate = true;\n      this.gridObj.appendTo('#' + this.parent.element.id + GRID_ID);\n      this.wireEvents();\n      this.adjustHeight();\n      this.emptyArgs = args;\n    }\n  };\n\n  DetailsView.prototype.checkNameWidth = function () {\n    var initialColumn = this.parent.detailsViewSettings.columns;\n    this.isNameWidth = false;\n\n    for (var i = 0; i < initialColumn.length; i++) {\n      if (initialColumn[i].field === 'name') {\n        this.isNameWidth = !isNullOrUndefined(initialColumn[i].width);\n        return;\n      }\n    }\n  };\n\n  DetailsView.prototype.adjustWidth = function (columns, fieldName) {\n    if (this.isNameWidth && fieldName === 'name') {\n      return;\n    }\n\n    for (var i = 0; i < columns.length; i++) {\n      if (columns[i].field === fieldName) {\n        var nameWidth = void 0;\n\n        if (this.parent.breadcrumbbarModule.searchObj.element.value === '' && !this.parent.isFiltered) {\n          nameWidth = this.element.clientWidth <= 500 ? '120px' : 'auto';\n        } else {\n          nameWidth = this.element.clientWidth <= 680 ? fieldName === 'name' ? '120px' : '180px' : 'auto';\n        }\n\n        columns[i].width = nameWidth;\n      }\n    }\n  };\n\n  DetailsView.prototype.getColumns = function () {\n    var columns;\n\n    if (this.parent.isMobile) {\n      columns = [{\n        field: 'name',\n        headerText: getLocaleText(this.parent, 'Name'),\n        width: 'auto',\n        minWidth: 120,\n        headerTextAlign: 'Left',\n        template: '<div class=\"e-fe-text\">${name}</div><div class=\"e-fe-date\">${_fm_modified}</div>' + '<span class=\"e-fe-size\">${size}</span>'\n      }];\n    } else {\n      columns = JSON.parse(JSON.stringify(this.parent.detailsViewSettings.columns));\n      this.adjustWidth(columns, 'name');\n\n      for (var i = 0, len = columns.length; i < len; i++) {\n        columns[i].headerText = getLocaleText(this.parent, columns[i].headerText);\n      }\n    }\n\n    var iWidth = this.parent.isMobile || this.parent.isBigger ? '54' : '46';\n    var icon = {\n      field: 'type',\n      width: iWidth,\n      minWidth: iWidth,\n      template: '<span class=\"e-fe-icon ${_fm_iconClass}\"></span>',\n      allowResizing: false,\n      allowSorting: true,\n      customAttributes: {\n        class: 'e-fe-grid-icon'\n      },\n      headerTemplate: '<span class=\"e-fe-icon e-fe-folder\"></span>'\n    };\n    columns.unshift(icon);\n\n    if (this.parent.allowMultiSelection) {\n      var cWidth = this.parent.isBigger ? '36' : '26';\n      var cBox = {\n        type: 'checkbox',\n        width: cWidth,\n        minWidth: cWidth,\n        customAttributes: {\n          class: 'e-fe-checkbox'\n        },\n        allowResizing: false,\n        allowSorting: false\n      };\n\n      if (this.parent.isMobile) {\n        columns.push(cBox);\n      } else {\n        columns.unshift(cBox);\n      }\n    }\n\n    for (var i = 0, len = columns.length; i < len; i++) {\n      columns[i].disableHtmlEncode = !this.parent.enableHtmlSanitizer;\n    }\n\n    return columns;\n  };\n\n  DetailsView.prototype.adjustHeight = function () {\n    if (!this.gridObj) {\n      return;\n    }\n\n    var pane = select('#' + this.parent.element.id + CONTENT_ID, this.parent.element);\n    var bar = select('#' + this.parent.element.id + BREADCRUMBBAR_ID, this.parent.element);\n    var gridHeader = select('.' + GRID_HEADER, this.parent.element);\n    var height = pane.offsetHeight - bar.offsetHeight - gridHeader.offsetHeight;\n    this.gridObj.height = height;\n    this.gridObj.dataBind();\n  };\n\n  DetailsView.prototype.renderCheckBox = function () {\n    this.gridObj.columns = this.getColumns();\n    this.isColumnRefresh = true;\n    this.gridObj.refreshColumns();\n  };\n\n  DetailsView.prototype.onRowDataBound = function (args) {\n    var td = select('.e-fe-grid-name', args.row);\n\n    if (!td) {\n      var columns = this.parent.detailsViewSettings.columns;\n\n      for (var i = 0; i < columns.length; i++) {\n        if (columns[i].field === 'name') {\n          td = args.row.children[this.parent.allowMultiSelection ? i + 2 : i + 1];\n          break;\n        }\n      }\n    }\n\n    if (td) {\n      td.setAttribute('title', getValue('name', args.data));\n    }\n\n    if (this.parent.isLayoutChange && this.parent.isCut && this.parent.fileAction === 'move' && this.parent.selectedNodes && this.parent.selectedNodes.length !== 0) {\n      if (this.parent.selectedNodes.indexOf(getValue('name', args.data)) !== -1) {\n        addBlur(args.row);\n      }\n    }\n\n    if (!this.parent.showFileExtension && getValue('isFile', args.data)) {\n      var textEle = args.row.querySelector('.e-fe-text');\n\n      if (textEle) {\n        var name_1 = getValue('name', args.data);\n        var type = getValue('type', args.data);\n        textEle.innerHTML = name_1.substr(0, name_1.length - type.length);\n      }\n    }\n\n    if (getValue('size', args.data) !== undefined && args.row.querySelector('.e-fe-size')) {\n      var sizeEle = args.row.querySelector('.e-fe-size');\n      var modifiedSize = void 0;\n\n      if (!getValue('isFile', args.data)) {\n        modifiedSize = '';\n      } else {\n        var sizeValue = getValue('size', args.data);\n        var intl = new Internationalization(this.parent.locale);\n        var value = intl.formatNumber(sizeValue / 1024, {\n          format: 'n'\n        });\n        modifiedSize = value + ' ' + getLocaleText(this.parent, 'KB');\n      }\n\n      sizeEle.innerHTML = modifiedSize;\n    }\n\n    if (this.parent.isMobile) {\n      if (getValue('_fm_modified', args.data) !== undefined && args.row.querySelector('.e-fe-date')) {\n        var dateEle = args.row.querySelector('.e-fe-date');\n        var intl = new Internationalization(this.parent.locale);\n        var columns = this.parent.detailsViewSettings.columns; // eslint-disable-next-line\n\n        var format = void 0;\n\n        for (var i = 0; i < columns.length; i++) {\n          if (columns[i].field === 'dateModified') {\n            format = columns[i].format;\n            break;\n          }\n        }\n\n        var formattedString = intl.formatDate(new Date(getValue('_fm_modified', args.data)), format);\n        dateEle.innerHTML = formattedString;\n      }\n    }\n\n    var checkWrap = args.row.querySelector('.' + CB_WRAP);\n\n    if (checkWrap) {\n      checkWrap.classList.add('e-small');\n    }\n\n    if (!hasEditAccess(args.data)) {\n      args.row.className += ' ' + getAccessClass(args.data);\n    }\n\n    var eventArgs = {\n      element: args.row,\n      fileDetails: args.data,\n      module: 'DetailsView'\n    };\n    this.parent.trigger('fileLoad', eventArgs);\n  };\n\n  DetailsView.prototype.onActionBegin = function (args) {\n    if (args.requestType === 'sorting') {\n      this.parent.setProperties({\n        sortOrder: args.direction\n      }, true);\n      this.parent.setProperties({\n        sortBy: args.columnName\n      }, true);\n\n      if (this.parent.selectedItems.length !== 0) {\n        this.sortItem = true;\n        var rows = this.gridObj.getSelectedRowIndexes();\n        var len = rows.length;\n        this.sortSelectedNodes = [];\n\n        while (len > 0) {\n          // eslint-disable-next-line\n          var data = this.gridObj.getRowsObject()[rows[len - 1]].data;\n          this.sortSelectedNodes.push(getValue(this.parent.hasId ? 'id' : 'name', data));\n          len--;\n        }\n      }\n\n      this.parent.notify(sortByChange, {});\n    }\n  };\n\n  DetailsView.prototype.onHeaderCellInfo = function (args) {\n    var checkWrap = args.node.querySelector('.' + CB_WRAP);\n\n    if (checkWrap) {\n      checkWrap.classList.add('e-small');\n    }\n  };\n\n  DetailsView.prototype.onBeforeDataBound = function (args) {\n    showSpinner(this.parent.element); // eslint-disable-next-line\n\n    var items = getSortedData(this.parent, this.gridObj.dataSource);\n    args.result = items;\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onDataBound = function () {\n    this.createDragObj();\n\n    if (this.parent.selectedItems.length !== 0) {\n      this.selectRecords(this.parent.selectedItems);\n    }\n\n    if (this.isPasteOperation === true) {\n      if (!this.isColumnRefresh) {\n        this.selectRecords(this.parent.pasteNodes);\n        this.isPasteOperation = false;\n      } else {\n        this.isColumnRefresh = false;\n      }\n    }\n\n    if (this.parent.createdItem) {\n      this.selectRecords([getValue(this.parent.hasId ? 'id' : 'name', this.parent.createdItem)]);\n      this.parent.createdItem = null;\n    }\n\n    if (this.parent.layoutSelectedItems.length) {\n      this.selectRecords(this.parent.layoutSelectedItems);\n    }\n\n    if (this.parent.renamedItem) {\n      this.addSelection(this.parent.renamedItem);\n      this.parent.renamedItem = null;\n    }\n\n    if (this.sortItem === true) {\n      this.selectRecords(this.sortSelectedNodes);\n      this.sortItem = false;\n    }\n\n    if (this.isSelectionUpdate) {\n      if (!this.isColumnRefresh) {\n        this.selectRecords(this.currentSelectedItem);\n        this.isSelectionUpdate = false;\n      } else {\n        this.isColumnRefresh = false;\n      }\n    }\n\n    if (this.uploadOperation === true) {\n      this.count++;\n      this.selectRecords(this.parent.uploadItem);\n\n      if (this.count === this.parent.uploadItem.length) {\n        this.uploadOperation = false;\n        this.parent.uploadItem = [];\n      }\n    }\n\n    if (this.gridObj.currentViewData.length * this.gridObj.getRowHeight() < this.gridObj.height) {\n      var hdTable = this.gridObj.getHeaderContent();\n      hdTable.style.paddingRight = '';\n      hdTable.style.paddingLeft = '';\n      var hdContent = select('.e-headercontent', hdTable);\n      hdContent.style.borderRightWidth = '0';\n      var cnTable = this.gridObj.getContent().querySelector('.e-content');\n      cnTable.style.overflowY = '';\n      cnTable.classList.add('e-scrollShow');\n    } else {\n      var hdTable = this.gridObj.getHeaderContent();\n\n      if (!this.parent.enableRtl) {\n        hdTable.style.paddingRight = '16px';\n      } else {\n        hdTable.style.paddingLeft = '16px';\n      }\n\n      var cnTable = this.gridObj.getContent().querySelector('.e-content');\n      cnTable.classList.remove('e-scrollShow');\n    }\n\n    this.isRendered = true;\n    this.parent.isLayoutChange = false;\n    hideSpinner(this.parent.element);\n    this.checkEmptyDiv(this.emptyArgs);\n    this.isInteracted = this.isLoaded ? true : this.isInteracted;\n    this.isLoaded = false;\n  };\n\n  DetailsView.prototype.selectRecords = function (nodes) {\n    // eslint-disable-next-line\n    var gridRecords = this.gridObj.getCurrentViewRecords();\n    var sRecords = [];\n\n    for (var i = 0, len = gridRecords.length; i < len; i++) {\n      var node = this.parent.hasId ? getValue('id', gridRecords[i]) : getName(this.parent, gridRecords[i]);\n\n      if (nodes.indexOf(node) !== -1) {\n        sRecords.push(i);\n      }\n    }\n\n    if (sRecords.length !== 0) {\n      this.gridObj.selectRows(sRecords);\n      this.addFocus(this.gridObj.selectedRowIndex);\n    }\n  }; // eslint-disable-next-line\n\n\n  DetailsView.prototype.addSelection = function (data) {\n    // eslint-disable-next-line\n    var items = this.gridObj.getCurrentViewRecords(); // eslint-disable-next-line\n\n    var rData = [];\n\n    if (this.parent.hasId) {\n      rData = new DataManager(items).executeLocal(new Query().where('id', 'equal', this.parent.renamedId, false));\n    } else {\n      // eslint-disable-next-line\n      var nData = new DataManager(items).executeLocal(new Query().where('name', 'equal', getValue('name', data), false));\n\n      if (nData.length > 0) {\n        rData = new DataManager(nData).executeLocal(new Query().where('filterPath', 'equal', this.parent.filterPath, false));\n      }\n    }\n\n    if (rData.length > 0) {\n      var index = items.indexOf(rData[0]);\n      this.gridObj.selectRows([index]);\n    }\n  };\n\n  DetailsView.prototype.onSortColumn = function () {\n    if (this.parent.sortOrder !== 'None') {\n      this.gridObj.sortModule.sortColumn(this.parent.sortBy, this.parent.sortOrder);\n    } else {\n      // eslint-disable-next-line\n      this.gridObj.dataSource = getSortedData(this.parent, this.gridObj.dataSource);\n    }\n  };\n\n  DetailsView.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName() && e.module !== 'common') {\n      /* istanbul ignore next */\n      return;\n    }\n\n    for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'allowDragAndDrop':\n          this.createDragObj();\n          break;\n\n        case 'height':\n          this.adjustHeight();\n          break;\n\n        case 'detailsViewSettings':\n          if (!isNullOrUndefined(this.gridObj)) {\n            this.checkNameWidth();\n            var columns = this.getColumns();\n            this.gridObj.columns = columns;\n            this.gridObj.allowResizing = this.parent.detailsViewSettings.columnResizing;\n            this.gridObj.dataBind();\n            this.gridObj.refreshColumns();\n          }\n\n          break;\n\n        case 'selectedItems':\n          this.interaction = false;\n\n          if (this.parent.selectedItems.length !== 0) {\n            if (!this.parent.allowMultiSelection) {\n              var slItems = this.parent.selectedItems.slice(this.parent.selectedItems.length - 1);\n              this.parent.setProperties({\n                selectedItems: slItems\n              }, true);\n            }\n\n            this.selectRecords(this.parent.selectedItems);\n            this.parent.setProperties({\n              selectedItems: this.parent.selectedItems\n            }, true);\n          } else if (!isNullOrUndefined(this.gridObj)) {\n            this.gridObj.clearSelection();\n          }\n\n          break;\n\n        case 'showFileExtension':\n          read(this.parent, pathChanged, this.parent.path);\n          break;\n\n        case 'showHiddenItems':\n          read(this.parent, pathChanged, this.parent.path);\n          break;\n\n        case 'allowMultiSelection':\n          if (!isNullOrUndefined(this.gridObj)) {\n            this.currentSelectedItem = this.parent.selectedItems;\n            this.gridObj.selectionSettings.type = e.newProp.allowMultiSelection ? 'Multiple' : 'Single';\n            this.isSelectionUpdate = true;\n            this.renderCheckBox();\n          }\n\n          break;\n\n        case 'view':\n          updateLayout(this.parent, 'Details');\n          break;\n\n        case 'width':\n          this.onDetailsResize();\n      }\n    }\n  };\n\n  DetailsView.prototype.onPathChanged = function (args) {\n    this.parent.isCut = false;\n\n    if (this.parent.breadcrumbbarModule.searchObj.element.value.trim() === '' && this.gridObj) {\n      this.parent.searchedItems = [];\n\n      if (!this.parent.isFiltered) {\n        this.removePathColumn(false);\n      } else {\n        this.updatePathColumn();\n      }\n    }\n\n    removeBlur(this.parent);\n\n    if (this.parent.view === 'Details') {\n      /* istanbul ignore next */\n      this.isInteracted = false;\n      showSpinner(this.parent.element);\n      this.parent.setProperties({\n        selectedItems: []\n      }, true);\n      this.gridObj.dataSource = getSortedData(this.parent, args.files);\n    }\n\n    this.emptyArgs = args;\n  };\n\n  DetailsView.prototype.updatePathColumn = function () {\n    var len = this.gridObj.columns.length;\n    var columnData = JSON.parse(JSON.stringify(this.gridObj.columns));\n\n    if (columnData[len - 1].field && columnData[len - 1].field !== 'filterPath' && !this.parent.isMobile) {\n      var pathColumn$$1 = {\n        field: 'filterPath',\n        headerText: getLocaleText(this.parent, 'Path'),\n        minWidth: 180,\n        width: 'auto'\n      };\n      this.gridObj.columns.push(pathColumn$$1);\n      this.adjustWidth(this.gridObj.columns, 'filterPath');\n      this.adjustWidth(this.gridObj.columns, 'name');\n      this.isColumnRefresh = true;\n      this.gridObj.refreshColumns();\n    }\n  };\n\n  DetailsView.prototype.checkEmptyDiv = function (args) {\n    // eslint-disable-next-line\n    var items = getSortedData(this.parent, args.files);\n\n    if (items.length === 0 && !isNullOrUndefined(this.element.querySelector('.' + GRID_VIEW))) {\n      createEmptyElement(this.parent, this.element, args);\n    } else if (items.length !== 0 && this.element.querySelector('.' + EMPTY)) {\n      if (this.element.querySelector('.' + GRID_VIEW).querySelector('.' + EMPTY)) {\n        var emptyDiv = this.element.querySelector('.' + GRID_VIEW).querySelector('.' + EMPTY);\n        this.element.querySelector('.' + GRID_VIEW).removeChild(emptyDiv);\n      } else {\n        this.element.removeChild(this.element.querySelector('.' + EMPTY));\n      }\n    }\n  };\n\n  DetailsView.prototype.onOpenInit = function () {\n    if (this.parent.activeModule === 'detailsview') {\n      // eslint-disable-next-line\n      var data = this.gridObj.getSelectedRecords()[0];\n      this.openContent(data);\n    }\n  };\n\n  DetailsView.prototype.DblClickEvents = function (args) {\n    this.gridObj.selectRows([args.rowIndex]); // eslint-disable-next-line\n\n    var data;\n\n    if (args.rowData) {\n      data = JSON.parse(JSON.stringify(args.rowData));\n      this.openContent(data);\n    }\n  }; // eslint-disable-next-line\n\n\n  DetailsView.prototype.openContent = function (data) {\n    var _this = this;\n\n    if (!hasReadAccess(data)) {\n      createDeniedDialog(this.parent, data, permissionRead);\n      return;\n    }\n\n    var eventArgs = {\n      cancel: false,\n      fileDetails: data,\n      module: 'DetailsView'\n    };\n    this.parent.trigger('fileOpen', eventArgs, function (fileOpenArgs) {\n      if (!fileOpenArgs.cancel) {\n        var name_2 = getValue('name', data);\n\n        if (getValue('isFile', data)) {\n          var icon = fileType(data);\n\n          if (icon === ICON_IMAGE) {\n            var imgUrl = getImageUrl(_this.parent, data);\n            createImageDialog(_this.parent, name_2, imgUrl);\n          }\n        } else {\n          var val = _this.parent.breadcrumbbarModule.searchObj.element.value;\n\n          if (val === '' && !_this.parent.isFiltered) {\n            var id = getValue('id', data);\n            _this.parent.oldPath = _this.parent.path;\n            var newPath = _this.parent.path + (isNullOrUndefined(id) ? name_2 : id) + '/';\n\n            _this.parent.setProperties({\n              path: newPath\n            }, true);\n\n            _this.parent.pathNames.push(name_2);\n\n            _this.parent.pathId.push(getValue('_fm_id', data));\n\n            _this.parent.itemData = [data];\n            openAction(_this.parent);\n          } else {\n            openSearchFolder(_this.parent, data);\n          }\n\n          _this.parent.isFiltered = false;\n        }\n\n        _this.element.focus();\n      }\n    });\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onLayoutChange = function (args) {\n    if (this.parent.view === 'Details') {\n      if (!this.gridObj) {\n        this.render(args);\n      } else {\n        this.isLoaded = true;\n      }\n\n      if (this.parent.isFiltered) {\n        this.updatePathColumn();\n        this.parent.setProperties({\n          selectedItems: []\n        }, true);\n      }\n\n      this.gridObj.dataSource = getSortedData(this.parent, args.files);\n      this.parent.notify(hideLayout, {});\n      this.gridObj.element.classList.remove(DISPLAY_NONE);\n      this.isInteracted = false;\n      this.gridObj.clearSelection();\n\n      if (this.parent.breadcrumbbarModule.searchObj.element.value.trim() !== '') {\n        this.onSearchFiles(args);\n      }\n\n      this.adjustHeight();\n\n      if (this.gridObj.sortSettings.columns.length > 0 && this.gridObj.sortSettings.columns[0].field !== this.parent.sortBy) {\n        if (this.parent.sortOrder !== 'None') {\n          this.gridObj.sortColumn(this.parent.sortBy, this.parent.sortOrder);\n        }\n      }\n    }\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onSearchFiles = function (args) {\n    if (this.parent.view === 'Details') {\n      this.parent.setProperties({\n        selectedItems: []\n      }, true);\n      this.parent.notify(selectionChanged, {});\n\n      if (!this.parent.isLayoutChange) {\n        this.parent.layoutSelectedItems = [];\n      }\n\n      this.updatePathColumn();\n      this.parent.searchedItems = args.files;\n      this.onPathChanged(args);\n    }\n  };\n\n  DetailsView.prototype.removePathColumn = function (isRefresh) {\n    var len = this.gridObj.columns.length;\n    var columnData = JSON.parse(JSON.stringify(this.gridObj.columns));\n\n    if (columnData[len - 1].field && columnData[len - 1].field === 'filterPath') {\n      /* istanbul ignore next */\n      if (this.gridObj.sortSettings.columns[0].field === 'filterPath') {\n        if (this.parent.sortOrder !== 'None') {\n          this.gridObj.sortColumn('name', this.parent.sortOrder);\n        } else {\n          // eslint-disable-next-line\n          this.gridObj.dataSource = getSortedData(this.parent, this.gridObj.dataSource);\n        }\n\n        this.parent.notify(sortByChange, {});\n      }\n\n      this.gridObj.columns.pop();\n\n      if (!isRefresh) {\n        this.isColumnRefresh = true;\n        this.gridObj.refreshColumns();\n      }\n    }\n  };\n\n  DetailsView.prototype.onFinalizeEnd = function (args) {\n    if (this.parent.view !== 'Details') {\n      return;\n    }\n\n    if (!this.gridObj) {\n      this.render(args);\n    } else {\n      this.onPathChanged(args);\n    }\n  };\n\n  DetailsView.prototype.onCreateEnd = function (args) {\n    if (this.parent.view !== 'Details') {\n      return;\n    }\n\n    this.onPathChanged(args);\n  };\n\n  DetailsView.prototype.onRenameInit = function () {\n    if (this.parent.activeModule === 'detailsview' && this.parent.selectedItems.length === 1) {\n      this.updateRenameData();\n    }\n  };\n\n  DetailsView.prototype.onSelectedData = function () {\n    if (this.parent.activeModule === 'detailsview') {\n      this.parent.itemData = this.gridObj.getSelectedRecords();\n    }\n  };\n\n  DetailsView.prototype.onDeleteInit = function () {\n    if (this.parent.activeModule === 'detailsview') {\n      Delete(this.parent, this.parent.selectedItems, this.parent.path, 'delete');\n    }\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onDeleteEnd = function (args) {\n    if (this.parent.view !== 'Details') {\n      return;\n    }\n\n    this.onPathChanged(args);\n    this.parent.setProperties({\n      selectedItems: []\n    }, true);\n  };\n\n  DetailsView.prototype.onRefreshEnd = function (args) {\n    if (this.parent.view !== 'Details') {\n      return;\n    }\n\n    this.isInteracted = false;\n    this.removePathColumn(false);\n    this.gridObj.dataSource = getSortedData(this.parent, args.files);\n    this.emptyArgs = args;\n  };\n\n  DetailsView.prototype.onHideLayout = function () {\n    if (this.parent.view !== 'Details' && this.gridObj) {\n      this.gridObj.element.classList.add(DISPLAY_NONE);\n    }\n  };\n\n  DetailsView.prototype.onSelectAllInit = function () {\n    if (this.parent.view === 'Details') {\n      this.isInteracted = false;\n\n      if (this.parent.allowMultiSelection) {\n        this.gridObj.selectionModule.selectRowsByRange(0, this.gridObj.getRows().length);\n      } else {\n        this.gridObj.selectRow(this.gridObj.getRows().length - 1);\n      }\n\n      this.isInteracted = true;\n      this.interaction = true;\n    }\n  };\n\n  DetailsView.prototype.onClearAllInit = function () {\n    if (this.parent.view === 'Details') {\n      this.removeSelection();\n      this.interaction = true;\n    }\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onSelectionChanged = function () {\n    removeClass([this.element], HEADER_CHECK);\n\n    if (this.parent.selectedItems.length > 0) {\n      addClass([this.element], HEADER_CHECK);\n    }\n  };\n\n  DetailsView.prototype.onLayoutRefresh = function () {\n    if (this.parent.view !== 'Details') {\n      return;\n    }\n\n    this.adjustHeight();\n  };\n\n  DetailsView.prototype.onBeforeRequest = function () {\n    this.isRendered = false;\n  };\n\n  DetailsView.prototype.onAfterRequest = function () {\n    this.isRendered = true;\n  };\n\n  DetailsView.prototype.onUpdateSelectionData = function () {\n    if (this.parent.view !== 'Details') {\n      return;\n    }\n\n    this.parent.itemData = this.gridObj.getSelectedRecords();\n  };\n\n  DetailsView.prototype.addEventListener = function () {\n    this.parent.on(finalizeEnd, this.onFinalizeEnd, this);\n    this.parent.on(destroy, this.destroy, this);\n    this.parent.on(layoutChange, this.onLayoutChange, this);\n    this.parent.on(pathChanged, this.onPathChanged, this);\n    this.parent.on(createEnd, this.onCreateEnd, this);\n    this.parent.on(dropInit, this.onDropInit, this);\n    this.parent.on(detailsInit, this.onDetailsInit, this);\n    this.parent.on(refreshEnd, this.onRefreshEnd, this);\n    this.parent.on(search, this.onSearchFiles, this);\n    this.parent.on(methodCall, this.onMethodCall, this);\n    this.parent.on(actionFailure, this.onActionFailure, this);\n    this.parent.on(modelChanged, this.onPropertyChanged, this);\n    this.parent.on(deleteInit, this.onDeleteInit, this);\n    this.parent.on(deleteEnd, this.onDeleteEnd, this);\n    this.parent.on(selectedData, this.onSelectedData, this);\n    this.parent.on(renameInit, this.onRenameInit, this);\n    this.parent.on(renameEnd, this.onPathChanged, this);\n    this.parent.on(openInit, this.onOpenInit, this);\n    this.parent.on(sortColumn, this.onSortColumn, this);\n    this.parent.on(openEnd, this.onPathChanged, this);\n    this.parent.on(filterEnd, this.onPathChanged, this);\n    this.parent.on(pasteInit, this.onPasteInit, this);\n    this.parent.on(hideLayout, this.onHideLayout, this);\n    this.parent.on(selectAllInit, this.onSelectAllInit, this);\n    this.parent.on(clearAllInit, this.onClearAllInit, this);\n    this.parent.on(pathColumn, this.onPathColumn, this);\n    this.parent.on(selectionChanged, this.onSelectionChanged, this);\n    this.parent.on(beforeRequest, this.onBeforeRequest, this);\n    this.parent.on(afterRequest, this.onAfterRequest, this);\n    this.parent.on(pasteEnd, this.onpasteEnd, this);\n    this.parent.on(cutCopyInit, this.oncutCopyInit, this);\n    this.parent.on(menuItemData, this.onMenuItemData, this);\n    this.parent.on(resizeEnd, this.onDetailsResizeHandler, this);\n    this.parent.on(splitterResize, this.onDetailsResize, this);\n    this.parent.on(layoutRefresh, this.onLayoutRefresh, this);\n    this.parent.on(dropPath, this.onDropPath, this);\n    this.parent.on(updateSelectionData, this.onUpdateSelectionData, this);\n  };\n\n  DetailsView.prototype.removeEventListener = function () {\n    this.parent.off(finalizeEnd, this.onFinalizeEnd);\n    this.parent.off(destroy, this.destroy);\n    this.parent.off(layoutChange, this.onLayoutChange);\n    this.parent.off(pathChanged, this.onPathChanged);\n    this.parent.off(pasteInit, this.onPasteInit);\n    this.parent.off(createEnd, this.onCreateEnd);\n    this.parent.off(refreshEnd, this.onRefreshEnd);\n    this.parent.off(search, this.onSearchFiles);\n    this.parent.off(methodCall, this.onMethodCall);\n    this.parent.off(actionFailure, this.onActionFailure);\n    this.parent.off(modelChanged, this.onPropertyChanged);\n    this.parent.off(renameInit, this.onRenameInit);\n    this.parent.off(renameEnd, this.onPathChanged);\n    this.parent.off(filterEnd, this.onPathChanged);\n    this.parent.off(openInit, this.onOpenInit);\n    this.parent.off(sortColumn, this.onSortColumn);\n    this.parent.off(openEnd, this.onPathChanged);\n    this.parent.off(hideLayout, this.onHideLayout);\n    this.parent.off(selectAllInit, this.onSelectAllInit);\n    this.parent.off(clearAllInit, this.onClearAllInit);\n    this.parent.off(deleteInit, this.onDeleteInit);\n    this.parent.off(deleteEnd, this.onDeleteEnd);\n    this.parent.off(pathColumn, this.onPathColumn);\n    this.parent.off(selectionChanged, this.onSelectionChanged);\n    this.parent.off(beforeRequest, this.onBeforeRequest);\n    this.parent.off(afterRequest, this.onAfterRequest);\n    this.parent.off(pasteEnd, this.onpasteEnd);\n    this.parent.off(cutCopyInit, this.oncutCopyInit);\n    this.parent.off(dropInit, this.onDropInit);\n    this.parent.off(selectedData, this.onSelectedData);\n    this.parent.off(detailsInit, this.onDetailsInit);\n    this.parent.off(menuItemData, this.onMenuItemData);\n    this.parent.off(resizeEnd, this.onDetailsResizeHandler);\n    this.parent.off(splitterResize, this.onDetailsResize);\n    this.parent.off(layoutRefresh, this.onLayoutRefresh);\n    this.parent.off(dropPath, this.onDropPath);\n    this.parent.off(updateSelectionData, this.onUpdateSelectionData);\n  };\n\n  DetailsView.prototype.onActionFailure = function () {\n    this.interaction = true;\n  }; // eslint-disable-next-line\n\n\n  DetailsView.prototype.onMenuItemData = function (args) {\n    if (this.parent.activeModule === this.getModuleName()) {\n      this.parent.itemData = [this.gridObj.getRowInfo(args.target).rowData];\n    }\n  };\n\n  DetailsView.prototype.onPasteInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      this.parent.itemData = this.parent.folderPath !== '' ? this.gridObj.getSelectedRecords() : [getPathObject(this.parent)];\n    }\n  };\n\n  DetailsView.prototype.onDetailsInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      if (this.parent.selectedItems.length !== 0) {\n        this.parent.itemData = this.gridObj.getSelectedRecords();\n      } else {\n        this.parent.itemData = [getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent)];\n      }\n    }\n  };\n\n  DetailsView.prototype.dragHelper = function (args) {\n    var dragTarget = args.sender.target;\n    var dragLi = dragTarget.closest('tr.e-row');\n\n    if (!dragLi) {\n      return null;\n    }\n\n    var name;\n\n    if (dragLi.getElementsByClassName('e-fe-text')[0]) {\n      name = dragLi.getElementsByClassName('e-fe-text')[0].innerText;\n    } else if (dragLi.getElementsByClassName(\"e-rowcell e-templatecell\")[0].nextElementSibling) {\n      name = dragLi.getElementsByClassName(\"e-rowcell e-templatecell\")[0].nextElementSibling.innerText;\n    }\n\n    if (dragLi && !dragLi.querySelector('.e-active')) {\n      this.selectRecords([name]);\n    }\n\n    getModule(this.parent, dragLi);\n    this.parent.activeElements = [];\n    this.parent.dragData = []; // eslint-disable-next-line\n\n    this.parent.dragData = this.gridObj.getSelectedRecords();\n    var dragRow;\n\n    if (this.parent.dragData.length === 0 && dragLi) {\n      dragRow = this.gridObj.getRowInfo(dragLi);\n    }\n\n    if (dragRow) {\n      this.parent.dragData.push(dragRow.rowData);\n    }\n\n    this.parent.dragPath = this.parent.path;\n    this.parent.activeElements = this.gridObj.getSelectedRows();\n    createVirtualDragElement(this.parent);\n    return this.parent.virtualDragElement;\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onDetailsResize = function () {\n    if (this.parent.view === 'Details' && !this.parent.isMobile && !isNullOrUndefined(this.gridObj)) {\n      var gridHeader = this.gridObj.getHeaderContent().querySelector('.e-headercontent');\n      var gridHeaderColGroup = gridHeader.firstChild.childNodes[0];\n      var gridContentColGroup = this.gridObj.getContent().querySelector('.e-content .e-table').children[0];\n      var gridHeaderColNames = this.gridObj.getColumns();\n\n      for (var i = 0; i < gridHeaderColNames.length; i++) {\n        if (!this.isNameWidth && gridHeaderColNames[i].field === 'name' || gridHeaderColNames[i].field === 'filterPath') {\n          if (this.parent.breadcrumbbarModule.searchObj.element.value === '' && !this.parent.isFiltered) {\n            if (this.element.clientWidth <= 500) {\n              gridHeaderColGroup.children[i].setAttribute('style', 'width: 120px');\n              gridContentColGroup.children[i].setAttribute('style', 'width: 120px');\n            } else if (this.element.clientWidth > 500) {\n              gridHeaderColGroup.children[i].setAttribute('style', 'width: auto');\n              gridContentColGroup.children[i].setAttribute('style', 'width: auto');\n            }\n          } else {\n            if (this.element.clientWidth <= 680) {\n              if (gridHeaderColNames[i].field === 'name') {\n                gridHeaderColGroup.children[i].setAttribute('style', 'width: 120px');\n                gridContentColGroup.children[i].setAttribute('style', 'width: 120px');\n              } else {\n                gridHeaderColGroup.children[i].setAttribute('style', 'width: 180px');\n                gridContentColGroup.children[i].setAttribute('style', 'width: 180px');\n              }\n            } else if (this.element.clientWidth > 680) {\n              gridHeaderColGroup.children[i].setAttribute('style', 'width: auto');\n              gridContentColGroup.children[i].setAttribute('style', 'width: auto');\n            }\n          }\n        }\n      }\n    }\n  };\n\n  DetailsView.prototype.onDetailsResizeHandler = function () {\n    this.onDetailsResize();\n\n    if (this.parent.view === 'Details' && !this.parent.isMobile && !isNullOrUndefined(this.gridObj)) {\n      this.adjustHeight();\n    }\n  };\n\n  DetailsView.prototype.createDragObj = function () {\n    var _this = this;\n\n    if (!this.parent.isMobile && this.gridObj) {\n      if (this.parent.allowDragAndDrop) {\n        if (this.dragObj) {\n          this.dragObj.destroy();\n        }\n\n        this.dragObj = new Draggable(this.gridObj.element, {\n          cursorAt: this.parent.dragCursorPosition,\n          distance: 5,\n          enableTailMode: true,\n          dragArea: this.parent.element,\n          dragTarget: '.' + ROW,\n          drag: draggingHandler.bind(this, this.parent),\n          dragStart: function (args) {\n            dragStartHandler(_this.parent, args, _this.dragObj);\n          },\n          dragStop: dragStopHandler.bind(this, this.parent),\n          enableAutoScroll: true,\n          helper: this.dragHelper.bind(this)\n        });\n      } else if (!this.parent.allowDragAndDrop && this.dragObj) {\n        this.dragObj.destroy();\n      }\n    }\n  };\n\n  DetailsView.prototype.onDropInit = function (args) {\n    if (this.parent.targetModule === this.getModuleName()) {\n      /* istanbul ignore next */\n      // eslint-disable-next-line\n      var cwdData = getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent);\n\n      if (!args.target.closest('tr')) {\n        this.parent.dropPath = this.parent.path;\n        this.parent.dropData = cwdData;\n      } else {\n        // eslint-disable-next-line\n        var info = null; // eslint-disable-next-line\n\n        info = this.gridObj.getRowInfo(args.target).rowData;\n        this.parent.dropPath = info.isFile ? this.parent.path : getFullPath(this.parent, info, this.parent.path);\n        this.parent.dropData = info.isFile ? cwdData : info;\n      }\n    }\n  };\n\n  DetailsView.prototype.oncutCopyInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      this.parent.activeRecords = this.gridObj.getSelectedRecords();\n      this.parent.activeElements = this.gridObj.getSelectedRows();\n    }\n  };\n\n  DetailsView.prototype.onpasteEnd = function (args) {\n    if (this.parent.view === 'Details') {\n      this.isPasteOperation = true;\n\n      if (this.parent.path === this.parent.destinationPath || this.parent.path === getDirectoryPath(this.parent, args)) {\n        this.onPathChanged(args);\n      }\n    }\n  };\n\n  DetailsView.prototype.onDropPath = function (args) {\n    if (this.parent.view === 'Details') {\n      this.isPasteOperation = true;\n      this.onPathChanged(args);\n    }\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} - returns modules name.\n   * @private\n   */\n\n\n  DetailsView.prototype.getModuleName = function () {\n    return 'detailsview';\n  };\n\n  DetailsView.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeEventListener();\n\n    if (this.gridObj) {\n      this.unWireEvents();\n      this.gridObj.destroy();\n    }\n  };\n\n  DetailsView.prototype.updateType = function (item) {\n    var folder = select('.' + FOLDER, item);\n    this.parent.isFile = isNullOrUndefined(folder) ? true : false;\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onSelection = function (action, args) {\n    var eventArgs = {\n      action: action,\n      fileDetails: args.data,\n      isInteracted: this.interaction,\n      cancel: false,\n      target: args.target\n    };\n    this.parent.trigger('fileSelection', eventArgs);\n    args.cancel = eventArgs.cancel;\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onSelected = function (args) {\n    this.parent.activeModule = 'detailsview';\n\n    if (!this.parent.isLayoutChange || this.parent.isFiltered) {\n      this.selectedRecords();\n    }\n\n    this.parent.notify(selectionChanged, {});\n\n    if (this.gridObj.getSelectedRowIndexes().length === 1) {\n      this.firstItemIndex = this.gridObj.selectedRowIndex;\n    }\n\n    this.gridObj.element.setAttribute('tabindex', '-1');\n    this.triggerSelect('select', args);\n    var item = this.gridObj.getRowByIndex(this.gridObj.selectedRowIndex);\n    this.updateType(item);\n\n    if (!isNullOrUndefined(item) && !isNullOrUndefined(item.querySelector('.e-checkselect'))) {\n      if (this.gridObj.getSelectedRowIndexes().length !== 1) {\n        var lastItemIndex = this.gridObj.getSelectedRowIndexes()[this.gridObj.getSelectedRowIndexes().length - 2];\n        var lastItem = this.gridObj.getRowByIndex(lastItemIndex);\n        lastItem.querySelector('.e-checkselect').setAttribute('tabindex', '-1');\n      }\n\n      item.querySelector('.e-rowcell.e-fe-checkbox').removeAttribute('tabindex');\n    }\n\n    if (!isNullOrUndefined(this.gridObj) && !isNullOrUndefined(this.gridObj.element.querySelector('.e-checkselectall'))) {\n      this.gridObj.element.querySelector('.e-checkselectall').setAttribute('tabindex', '-1');\n    }\n\n    var rows = this.gridObj.getSelectedRowIndexes();\n\n    if (!this.parent.allowMultiSelection) {\n      for (var i = 0; i < rows.length; i++) {\n        if (rows[i] === this.gridObj.selectedRowIndex) {\n          this.gridObj.getRowByIndex(rows[i]).setAttribute('tabindex', '0');\n        } else {\n          this.gridObj.getRowByIndex(rows[i]).removeAttribute('tabindex');\n        }\n      }\n    }\n\n    var len = rows.length;\n\n    if (len > 0) {\n      // eslint-disable-next-line\n      var data = this.gridObj.getRowsObject()[rows[len - 1]].data;\n      this.parent.currentItemText = getValue('name', data);\n    }\n\n    var indexes = getValue('rowIndexes', args);\n    var multiSelect = getValue('enableSelectMultiTouch', this.gridObj.selectionModule);\n\n    if (this.parent.isDevice && isNullOrUndefined(indexes) && args.target && !multiSelect && !args.target.closest('.e-headercell')) {\n      this.parent.isFile = getValue('isFile', args.data);\n\n      if (!this.parent.isFile) {\n        this.openContent(args.data);\n      }\n    }\n\n    this.parent.visitedItem = args.row;\n\n    if (this.parent.allowMultiSelection && !isNullOrUndefined(item) && !isNullOrUndefined(item.querySelector('.e-checkselect'))) {\n      var checkItem = item.querySelector('.e-checkselect');\n      checkItem.focus();\n    }\n\n    this.addFocus(this.gridObj.selectedRowIndex);\n\n    if (!this.parent.isLayoutChange) {\n      this.isInteracted = true;\n    }\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onPathColumn = function () {\n    if (this.parent.view === 'Details' && !isNullOrUndefined(this.gridObj)) {\n      if (this.parent.breadcrumbbarModule.searchObj.element.value === '' && !this.parent.isFiltered) {\n        this.removePathColumn(false);\n      }\n    }\n  };\n\n  DetailsView.prototype.selectedRecords = function () {\n    this.parent.setProperties({\n      selectedItems: []\n    }, true); // eslint-disable-next-line\n\n    var selectedRecords = this.gridSelectNodes();\n    var selectSize = 0;\n\n    while (selectSize < selectedRecords.length) {\n      var record = selectedRecords[selectSize];\n      var name_3 = getItemName(this.parent, record);\n      this.parent.selectedItems.push(name_3);\n      selectSize++;\n    }\n\n    this.parent.setProperties({\n      selectedItems: this.parent.selectedItems\n    }, true);\n  };\n\n  DetailsView.prototype.onDeSelection = function (args) {\n    /* istanbul ignore next */\n    if (!this.parent.allowMultiSelection && isNullOrUndefined(args.data)) {\n      this.gridObj.getRowByIndex(args.rowIndex).removeAttribute('tabindex');\n    } else if (this.gridObj.getSelectedRowIndexes().length > 1) {\n      var lastItemIndex = this.gridObj.getSelectedRowIndexes()[this.gridObj.getSelectedRowIndexes().length - 2];\n      this.gridObj.getRowByIndex(lastItemIndex).querySelector('.e-checkselect').removeAttribute('tabindex');\n    }\n\n    if (this.gridObj.selectedRowIndex === -1) {\n      this.gridObj.element.setAttribute('tabindex', '0');\n    }\n\n    if (!this.isInteracted) {\n      this.isInteracted = true;\n      return;\n    }\n\n    this.selectedRecords();\n\n    if (this.parent.selectedItems.length === 0) {\n      setValue('enableSelectMultiTouch', false, this.gridObj.selectionModule);\n      removeClass([this.parent.element], MULTI_SELECT);\n    }\n\n    this.parent.notify(selectionChanged, {});\n    this.triggerSelect('unselect', args);\n    this.parent.visitedItem = null;\n  };\n\n  DetailsView.prototype.triggerSelect = function (action, args) {\n    var eventArgs = {\n      action: action,\n      fileDetails: args.data,\n      isInteracted: this.interaction\n    };\n    this.parent.trigger('fileSelect', eventArgs);\n    this.interaction = true;\n  };\n\n  DetailsView.prototype.wireEvents = function () {\n    this.wireClickEvent(true);\n    this.keyboardModule = new KeyboardEvents(this.gridObj.element, {\n      keyAction: this.keyupHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keyup'\n    });\n    this.keyboardDownModule = new KeyboardEvents(this.element, {\n      keyAction: this.keydownHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n    EventHandler.add(this.gridObj.element, 'blur', this.removeFocus, this);\n  };\n\n  DetailsView.prototype.unWireEvents = function () {\n    this.wireClickEvent(false);\n    this.keyboardModule.destroy();\n    this.keyboardDownModule.destroy();\n    EventHandler.remove(this.gridObj.element, 'blur', this.removeFocus);\n  };\n\n  DetailsView.prototype.wireClickEvent = function (toBind) {\n    if (toBind) {\n      // eslint-disable-next-line\n      var proxy_1 = this;\n      var ele = this.gridObj.getContent();\n      this.clickObj = new Touch(ele, {\n        tap: function (eve) {\n          if (eve.tapCount === 1 && eve.originalEvent.target.classList.contains('e-content')) {\n            proxy_1.onClearAllInit();\n          }\n        },\n        tapHold: function (e) {\n          if (proxy_1.parent.isDevice) {\n            e.originalEvent.preventDefault();\n\n            if (proxy_1.parent.allowMultiSelection) {\n              setValue('enableSelectMultiTouch', proxy_1.parent.allowMultiSelection, proxy_1.gridObj.selectionModule);\n              addClass([proxy_1.parent.element], MULTI_SELECT);\n            }\n\n            var target = e.originalEvent.target;\n\n            if (target) {\n              var row = closest(target, '.' + ROW);\n              var index = proxy_1.gridObj.getRows().indexOf(row);\n              proxy_1.gridObj.selectRow(index);\n            }\n          }\n        }\n      });\n    } else {\n      if (this.clickObj) {\n        this.clickObj.destroy();\n      }\n    }\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.removeSelection = function () {\n    removeClass([this.parent.element], MULTI_SELECT);\n    this.gridObj.clearSelection();\n    this.parent.setProperties({\n      selectedItems: []\n    }, true);\n    this.parent.notify(selectionChanged, {});\n\n    if (this.gridObj.selectedRowIndex === -1) {\n      this.startIndex = null;\n    }\n\n    this.isInteracted = true;\n  };\n\n  DetailsView.prototype.removeFocus = function () {\n    this.addFocus(null);\n  };\n\n  DetailsView.prototype.getFocusedItemIndex = function () {\n    return !isNullOrUndefined(this.getFocusedItem()) ? parseInt(this.getFocusedItem().getAttribute('data-rowindex'), 10) : null;\n  };\n  /* istanbul ignore next */\n  // eslint:disable-next-line\n\n\n  DetailsView.prototype.keydownHandler = function (e) {\n    if (!this.isRendered) {\n      return;\n    }\n\n    switch (e.action) {\n      case 'end':\n      case 'home':\n      case 'space':\n      case 'ctrlSpace':\n      case 'shiftSpace':\n      case 'csSpace':\n      case 'ctrlA':\n      case 'enter':\n      case 'altEnter':\n      case 'ctrlEnd':\n      case 'shiftEnd':\n      case 'csEnd':\n      case 'ctrlHome':\n      case 'shiftHome':\n      case 'csHome':\n      case 'ctrlDown':\n      case 'shiftDown':\n      case 'csDown':\n      case 'ctrlLeft':\n      case 'shiftLeft':\n      case 'csLeft':\n      case 'esc':\n      case 'del':\n      case 'shiftdel':\n      case 'ctrlC':\n      case 'ctrlV':\n      case 'ctrlX':\n      case 'f2':\n      case 'moveDown':\n      case 'moveUp':\n      case 'ctrlD':\n        e.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  };\n  /* istanbul ignore next */\n  // eslint:disable-next-line\n\n\n  DetailsView.prototype.keyupHandler = function (e) {\n    if (!this.isRendered) {\n      return;\n    }\n\n    e.preventDefault();\n    var action = e.action; // eslint-disable-next-line\n\n    var gridItems = getSortedData(this.parent, this.gridObj.dataSource);\n    var gridLength = gridItems.length;\n    var focItem = this.getFocusedItem();\n    var focIndex = this.getFocusedItemIndex();\n    var selIndex = this.gridObj.selectedRowIndex;\n    var selRowIndeces = this.gridObj.getSelectedRowIndexes(); // eslint-disable-next-line\n\n    var rowData;\n    var firstItem;\n    var lastItem;\n\n    switch (action) {\n      case 'altEnter':\n        GetDetails(this.parent, this.parent.selectedItems, this.parent.path, 'details');\n        break;\n\n      case 'esc':\n        removeActive(this.parent);\n        break;\n\n      case 'del':\n      case 'shiftdel':\n        this.performDelete();\n        break;\n\n      case 'enter':\n        if (this.gridObj.selectedRowIndex === -1) {\n          break;\n        }\n\n        rowData = this.gridObj.getRowsObject()[this.gridObj.selectedRowIndex].data;\n\n        if (rowData) {\n          // eslint-disable-next-line\n          var data = JSON.parse(JSON.stringify(rowData));\n          this.openContent(data);\n        }\n\n        break;\n\n      case 'ctrlC':\n        copyFiles(this.parent);\n        break;\n\n      case 'ctrlV':\n        this.parent.folderPath = '';\n        pasteHandler(this.parent);\n        break;\n\n      case 'ctrlX':\n        cutFiles(this.parent);\n        break;\n\n      case 'ctrlD':\n        this.doDownload();\n        break;\n\n      case 'f2':\n        this.performRename();\n        break;\n\n      case 'ctrlA':\n        if (!isNullOrUndefined(gridItems[0]) && this.parent.allowMultiSelection) {\n          var cnTable = this.gridObj.getContent().querySelector('.e-content');\n          var crtSrlPos = cnTable.scrollTop;\n          var crtFocusIndex = this.gridObj.selectedRowIndex;\n          this.gridObj.selectionModule.selectRowsByRange(0, gridItems.length - 1);\n          cnTable.scrollTop = crtSrlPos;\n\n          if (crtFocusIndex !== -1) {\n            this.addFocus(crtFocusIndex);\n          }\n        }\n\n        break;\n\n      case 'ctrlHome':\n      case 'tab':\n        if (!isNullOrUndefined(gridItems[0])) {\n          if (!this.parent.allowMultiSelection && e.action === 'ctrlHome') {\n            this.gridObj.selectRow(0);\n          } else if (this.gridObj.selectedRowIndex !== -1 && e.action === 'tab') {\n            return;\n          } else {\n            this.addFocus(0);\n          }\n        }\n\n        break;\n\n      case 'ctrlEnd':\n        if (!isNullOrUndefined(gridItems[0])) {\n          if (!this.parent.allowMultiSelection) {\n            this.gridObj.selectRow(gridLength - 1);\n          } else {\n            this.addFocus(gridLength - 1);\n          }\n        }\n\n        break;\n\n      case 'shiftHome':\n      case 'shiftEnd':\n      case 'csHome':\n      case 'csEnd':\n        if (!this.parent.allowMultiSelection) {\n          this.gridObj.selectRow(e.action === 'shiftHome' || e.action === 'csHome' ? 0 : gridItems.length - 1);\n        } else {\n          if (!isNullOrUndefined(gridItems[0])) {\n            if (!isNullOrUndefined(selIndex) && selIndex !== -1) {\n              this.checkRowsKey(gridItems, selIndex, null, e);\n            } else {\n              if (e.action === 'csHome' || e.action === 'shiftHome') {\n                this.gridObj.selectRow(0);\n              } else {\n                this.gridObj.selectionModule.selectRowsByRange(0, gridItems.length - 1);\n              }\n            }\n          }\n        }\n\n        break;\n\n      case 'space':\n      case 'csSpace':\n      case 'shiftSpace':\n      case 'ctrlSpace':\n        this.spaceSelection(selRowIndeces, focIndex, selIndex, e);\n        break;\n\n      case 'csUp':\n      case 'csDown':\n      case 'shiftUp':\n      case 'shiftDown':\n        this.shiftMoveMethod(gridItems, selIndex, focIndex, selRowIndeces, e);\n        break;\n\n      case 'ctrlUp':\n      case 'ctrlDown':\n        if (!this.parent.allowMultiSelection) {\n          this.moveFunction(gridItems, e, selIndex);\n        } else {\n          this.ctrlMoveFunction(gridItems, e, selIndex);\n        }\n\n        break;\n\n      case 'home':\n        firstItem = [getValue(this.parent.hasId ? 'id' : 'name', gridItems[0])];\n        this.parent.setProperties({\n          selectedItems: firstItem\n        }, true);\n        this.selectRecords(firstItem);\n        break;\n\n      case 'moveUp':\n      case 'moveDown':\n        this.moveFunction(gridItems, e, selIndex);\n        break;\n\n      case 'end':\n        lastItem = [getValue(this.parent.hasId ? 'id' : 'name', gridItems[gridLength - 1])];\n        this.parent.setProperties({\n          selectedItems: lastItem\n        }, true);\n        this.selectRecords(lastItem);\n        break;\n    }\n  }; // eslint-disable-next-line\n\n\n  DetailsView.prototype.gridSelectNodes = function () {\n    return this.gridObj.getSelectedRecords();\n  };\n\n  DetailsView.prototype.doDownload = function () {\n    if (this.parent.selectedItems.length !== 0) {\n      this.parent.itemData = this.gridObj.getSelectedRecords(); // eslint-disable-next-line\n\n      var items = this.parent.itemData;\n\n      for (var i = 0; i < items.length; i++) {\n        if (!hasDownloadAccess(items[i])) {\n          createDeniedDialog(this.parent, items[i], permissionDownload);\n          return;\n        }\n      }\n\n      Download(this.parent, this.parent.path, this.parent.selectedItems);\n    }\n  };\n\n  DetailsView.prototype.performDelete = function () {\n    if (this.parent.selectedItems && this.parent.selectedItems.length > 0) {\n      this.parent.itemData = this.gridObj.getSelectedRecords(); // eslint-disable-next-line\n\n      var items = this.parent.itemData;\n\n      for (var i = 0; i < items.length; i++) {\n        if (!hasEditAccess(items[i])) {\n          createDeniedDialog(this.parent, items[i], permissionEdit);\n          return;\n        }\n      }\n\n      createDialog(this.parent, 'Delete');\n    }\n  };\n\n  DetailsView.prototype.performRename = function () {\n    if (this.parent.selectedItems.length === 1) {\n      this.updateRenameData();\n      doRename(this.parent);\n    }\n  };\n\n  DetailsView.prototype.updateRenameData = function () {\n    // eslint-disable-next-line\n    var data = this.gridSelectNodes()[0];\n    updateRenamingData(this.parent, data);\n  }; // eslint-disable-next-line\n\n\n  DetailsView.prototype.shiftMoveMethod = function (gridItems, selIndex, focIndex, selRowIndeces, e) {\n    if (!this.parent.allowMultiSelection) {\n      this.moveFunction(gridItems, e, selIndex);\n    } else {\n      if (selIndex === -1 && (e.action === 'csUp' || e.action === 'csDown')) {\n        this.ctrlMoveFunction(gridItems, e, selIndex);\n      } else if (selIndex !== -1 && focIndex !== selIndex && !((e.action === 'csUp' || e.action === 'csDown') && this.isSelected(selRowIndeces, focIndex))) {\n        this.shiftSelectFocusItem(selIndex, focIndex, selRowIndeces, e);\n      } else {\n        this.shiftSelectedItem(selIndex, selRowIndeces, gridItems, e);\n      }\n    }\n  }; // eslint-disable-next-line\n\n\n  DetailsView.prototype.moveFunction = function (selectedItems, e, rowIndex) {\n    if (!isNullOrUndefined(this.getFocusedItem()) && this.parent.allowMultiSelection) {\n      if (e.action === 'moveDown') {\n        this.gridObj.selectRow(this.getFocusedItemIndex() + 1);\n      } else {\n        this.gridObj.selectRow(this.getFocusedItemIndex() - 1);\n      }\n    } else if (!isNullOrUndefined(rowIndex) && rowIndex !== -1) {\n      if (e.action === 'moveDown' || e.action === 'ctrlDown' || e.action === 'shiftDown' || e.action === 'csDown') {\n        this.gridObj.selectRow(rowIndex + (rowIndex !== selectedItems.length - 1 ? 1 : 0));\n      } else {\n        this.gridObj.selectRow(rowIndex - (rowIndex !== 0 ? 1 : 0));\n      }\n    } else {\n      if (!isNullOrUndefined(selectedItems[0])) {\n        this.gridObj.selectRow(0);\n      }\n    }\n  };\n\n  DetailsView.prototype.spaceSelection = function (selRowIndeces, focIndex, selIndex, e) {\n    if (!this.isSelected(selRowIndeces, focIndex) && selIndex !== -1 && (e.action === 'shiftSpace' || e.action === 'csSpace')) {\n      if (focIndex < selIndex) {\n        this.gridObj.selectionModule.selectRowsByRange(focIndex, selIndex);\n      } else {\n        this.gridObj.selectionModule.selectRowsByRange(selIndex, focIndex);\n      }\n    } else if (!isNullOrUndefined(this.getFocusedItem()) && focIndex !== selIndex) {\n      selRowIndeces.push(this.getFocusedItemIndex());\n      this.gridObj.selectRows(selRowIndeces);\n    } else if (selIndex !== -1 && e.action === 'ctrlSpace' && this.parent.allowMultiSelection) {\n      var lItem = selIndex;\n      selRowIndeces.pop();\n      this.gridObj.selectRows(selRowIndeces);\n      this.addFocus(lItem);\n    } else if (e.action === 'shiftSpace') {\n      this.gridObj.selectRow(selIndex);\n    }\n  }; // eslint-disable-next-line\n\n\n  DetailsView.prototype.ctrlMoveFunction = function (items, e, rowIndex) {\n    var nextItem;\n\n    if (!isNullOrUndefined(this.getFocusedItem())) {\n      var nextIndex = this.getFocusedItemIndex();\n      nextItem = e.action === 'ctrlDown' || e.action === 'csDown' ? nextIndex + (nextIndex < items.length - 1 ? 1 : 0) : nextIndex - (nextIndex < 1 ? 0 : 1);\n    } else if (!isNullOrUndefined(rowIndex) && rowIndex !== -1) {\n      nextItem = e.action === 'ctrlDown' || e.action === 'csDown' ? rowIndex + (rowIndex < items.length ? 1 : 0) : rowIndex - (rowIndex < 1 ? 0 : 1);\n    } else {\n      if (!isNullOrUndefined(items[0])) {\n        nextItem = 0;\n      }\n    }\n\n    this.addFocus(nextItem);\n  }; // eslint-disable-next-line\n\n\n  DetailsView.prototype.checkRowsKey = function (items, indexValue, focIndex, e) {\n    if (this.gridObj.checkAllRows === 'Uncheck' || this.gridObj.checkAllRows === 'Intermediate') {\n      if (e.action !== 'csHome' && e.action !== 'csEnd') {\n        if (isNullOrUndefined(this.startIndex) && this.firstItemIndex !== indexValue) {\n          this.firstItemIndex = indexValue;\n        }\n\n        if (e.action === 'shiftEnd') {\n          this.gridObj.selectionModule.selectRowsByRange(this.firstItemIndex, items.length - 1);\n        } else {\n          this.gridObj.selectionModule.selectRowsByRange(0, this.firstItemIndex);\n        }\n\n        this.startIndex = indexValue;\n      } else {\n        if (e.action === 'csEnd') {\n          this.gridObj.selectRows(this.InnerItems(isNullOrUndefined(indexValue) ? 0 : indexValue, isNullOrUndefined(focIndex) ? items.length - 1 : focIndex, e));\n        } else {\n          if (isNullOrUndefined(indexValue)) {\n            this.gridObj.selectRow(0);\n          } else {\n            this.gridObj.selectRows(this.InnerItems(isNullOrUndefined(focIndex) ? 0 : focIndex, indexValue, e));\n          }\n        }\n      }\n    } else {\n      this.gridObj.selectionModule.selectRow(e.action === 'shiftHome' || e.action === 'csHome' ? 0 : items.length - 1);\n    }\n  };\n\n  DetailsView.prototype.InnerItems = function (fItem, lItem, e) {\n    var itemArr = this.gridObj.getSelectedRowIndexes();\n\n    if (e.action === 'csEnd') {\n      for (var i = fItem + 1; i <= lItem; i++) {\n        itemArr.push(i);\n      }\n    } else {\n      for (var i = lItem - 1; fItem <= i; i--) {\n        itemArr.push(i);\n      }\n    }\n\n    return itemArr;\n  };\n\n  DetailsView.prototype.shiftSelectFocusItem = function (selIndex, fIndex, selRowIndexes, e) {\n    var lItem = fIndex + (e.action === 'shiftDown' || e.action === 'csDown' ? 1 : -1);\n    var fItem = isNullOrUndefined(this.startIndex) ? selIndex : selRowIndexes[0];\n\n    if (fItem === lItem) {\n      this.gridObj.selectRow(fItem);\n    } else {\n      if (fItem < lItem) {\n        if (e.action === 'shiftDown' || e.action === 'csDown') {\n          this.gridObj.selectionModule.selectRowsByRange(fItem, lItem);\n        } else {\n          this.gridObj.selectionModule.selectRowsByRange(lItem, fItem);\n        }\n      } else if (e.action === 'shiftDown' || e.action === 'csDown') {\n        this.gridObj.selectionModule.selectRowsByRange(lItem, fItem);\n      } else {\n        this.gridObj.selectionModule.selectRowsByRange(fItem, lItem);\n      }\n    }\n\n    this.startIndex = this.gridObj.selectedRowIndex;\n  };\n\n  DetailsView.prototype.addFocus = function (item) {\n    var fItem = this.getFocusedItem();\n    var itemElement = this.gridObj.getRowByIndex(item);\n\n    if (fItem) {\n      fItem.removeAttribute('tabindex');\n      removeClass([fItem], [FOCUS, FOCUSED]);\n    }\n\n    if (!isNullOrUndefined(itemElement)) {\n      this.gridObj.element.setAttribute('tabindex', '-1');\n      itemElement.setAttribute('tabindex', '0');\n      itemElement.focus();\n      addClass([itemElement], [FOCUS, FOCUSED]);\n    }\n  };\n\n  DetailsView.prototype.getFocusedItem = function () {\n    return select('.' + FOCUSED, this.element);\n  };\n\n  DetailsView.prototype.isSelected = function (selRowIndexes, focIndex) {\n    var check = false;\n\n    for (var i = 0; i <= selRowIndexes.length - 1; i++) {\n      if (selRowIndexes[i] === focIndex) {\n        check = true;\n        break;\n      }\n    }\n\n    return check;\n  }; // eslint-disable-next-line\n\n\n  DetailsView.prototype.shiftSelectedItem = function (selIndex, selRowIndexes, gridItems, e) {\n    if (selIndex === -1) {\n      this.gridObj.selectRow(0);\n    } else {\n      if (isNullOrUndefined(this.startIndex) && e.shiftKey) {\n        this.startIndex = this.gridObj.selectedRowIndex;\n        this.gridObj.selectRows([selIndex, e.action === 'shiftDown' || e.action === 'csDown' ? selIndex + (selIndex !== gridItems.length - 1 ? 1 : 0) : selIndex - (selIndex !== 0 ? 1 : 0)]);\n      } else {\n        if (e.action === 'shiftDown' || e.action === 'shiftUp') {\n          if (e.action === 'shiftDown' && selRowIndexes.indexOf(selIndex + 1) === -1) {\n            if (selIndex !== gridItems.length - 1) {\n              selRowIndexes.push(selIndex + 1);\n            }\n          } else if (e.action === 'shiftUp' && selRowIndexes.indexOf(selIndex - 1) === -1) {\n            if (selIndex !== 0) {\n              selRowIndexes.push(selIndex - 1);\n            }\n          } else {\n            selRowIndexes.pop();\n          }\n\n          this.gridObj.selectRows(selRowIndexes);\n        } else {\n          if (e.action === 'csDown') {\n            if (!this.isSelected(selRowIndexes, this.getFocusedItemIndex() + 1)) {\n              selRowIndexes.push(this.getFocusedItemIndex() + 1);\n              this.gridObj.selectRows(selRowIndexes);\n            } else {\n              this.addFocus(this.getFocusedItemIndex() + 1);\n            }\n          } else if (!this.isSelected(selRowIndexes, this.getFocusedItemIndex() - 1)) {\n            selRowIndexes.push(this.getFocusedItemIndex() - 1);\n            this.gridObj.selectRows(selRowIndexes);\n          } else {\n            this.addFocus(this.getFocusedItemIndex() - 1);\n          }\n        }\n      }\n    }\n  }; // eslint-disable-next-line\n\n\n  DetailsView.prototype.onMethodCall = function (e) {\n    if (this.parent.view !== 'Details') {\n      return;\n    }\n\n    var action = getValue('action', e);\n\n    switch (action) {\n      case 'deleteFiles':\n        this.deleteFiles(getValue('ids', e));\n        break;\n\n      case 'downloadFiles':\n        this.downloadFiles(getValue('ids', e));\n        break;\n\n      case 'openFile':\n        this.openFile(getValue('id', e));\n        break;\n\n      case 'createFolder':\n        this.interaction = false;\n        break;\n\n      case 'renameFile':\n        this.interaction = false;\n        this.renameFile(getValue('id', e), getValue('newName', e));\n        break;\n\n      case 'selectAll':\n        this.interaction = false;\n        this.onSelectAllInit();\n        break;\n\n      case 'clearSelection':\n        this.interaction = false;\n        this.onClearAllInit();\n        break;\n    }\n  }; // eslint-disable-next-line\n\n\n  DetailsView.prototype.getRecords = function (nodes) {\n    // eslint-disable-next-line\n    var gridRecords = this.gridObj.getCurrentViewRecords(); // eslint-disable-next-line\n\n    var records = [];\n    var hasFilter = this.parent.breadcrumbbarModule.searchObj.element.value !== '' || this.parent.isFiltered ? true : false;\n    var filter$$1 = this.parent.hasId ? 'id' : 'name';\n\n    if (this.parent.hasId || !hasFilter) {\n      for (var i = 0, len = gridRecords.length; i < len; i++) {\n        if (nodes.indexOf(getValue(filter$$1, gridRecords[i])) !== -1) {\n          records.push(gridRecords[i]);\n        }\n      }\n    } else {\n      for (var i = 0, len = gridRecords.length; i < len; i++) {\n        var name_4 = getValue('filterPath', gridRecords[i]) + getValue('name', gridRecords[i]);\n\n        if (nodes.indexOf(name_4) !== -1) {\n          records.push(gridRecords[i]);\n        }\n      }\n    }\n\n    return records;\n  };\n\n  DetailsView.prototype.deleteFiles = function (ids) {\n    this.parent.activeModule = 'detailsview';\n\n    if (isNullOrUndefined(ids)) {\n      this.performDelete();\n      return;\n    } // eslint-disable-next-line\n\n\n    var records = this.getRecords(ids);\n\n    if (records.length === 0) {\n      return;\n    } // eslint-disable-next-line\n\n\n    var data = [];\n    var newIds = [];\n\n    for (var i = 0; i < records.length; i++) {\n      data[i] = records[i];\n      newIds[i] = getItemName(this.parent, data[i]);\n    }\n\n    doDeleteFiles(this.parent, data, newIds);\n  };\n\n  DetailsView.prototype.downloadFiles = function (ids) {\n    if (isNullOrUndefined(ids)) {\n      this.doDownload();\n      return;\n    } // eslint-disable-next-line\n\n\n    var dRecords = this.getRecords(ids);\n\n    if (dRecords.length === 0) {\n      return;\n    } // eslint-disable-next-line\n\n\n    var data = [];\n    var newIds = [];\n\n    for (var i = 0; i < dRecords.length; i++) {\n      data[i] = dRecords[i];\n      newIds[i] = getItemName(this.parent, data[i]);\n    }\n\n    doDownloadFiles(this.parent, data, newIds);\n  };\n\n  DetailsView.prototype.openFile = function (id) {\n    if (isNullOrUndefined(id)) {\n      return;\n    } // eslint-disable-next-line\n\n\n    var records = this.getRecords([id]);\n\n    if (records.length > 0) {\n      this.openContent(records[0]);\n    }\n  };\n\n  DetailsView.prototype.renameFile = function (id, name) {\n    this.parent.activeModule = 'detailsview';\n\n    if (isNullOrUndefined(id)) {\n      this.performRename();\n      return;\n    } // eslint-disable-next-line\n\n\n    var records = this.getRecords([id]);\n\n    if (records.length > 0) {\n      updateRenamingData(this.parent, records[0]);\n\n      if (!isNullOrUndefined(name)) {\n        if (hasEditAccess(this.parent.itemData[0])) {\n          rename(this.parent, this.parent.path, name);\n        } else {\n          createDeniedDialog(this.parent, this.parent.itemData[0], permissionEdit);\n        }\n      } else {\n        doRename(this.parent);\n      }\n    }\n  };\n\n  return DetailsView;\n}();\n/**\n * File Manager layout modules\n */\n\n/**\n * File Manager pop-up modules\n */\n\n/**\n * File Manager modules\n */\n\n/**\n * File Manager all modules\n */\n\n\nexport { AjaxSettings, toolbarItems, ToolbarSettings, SearchSettings, columnArray, DetailsViewSettings, fileItems, folderItems, layoutItems, ContextMenuSettings, NavigationPaneSettings, UploadSettings, Column, TOOLBAR_ID, LAYOUT_ID, NAVIGATION_ID, TREE_ID, GRID_ID, LARGEICON_ID, DIALOG_ID, ALT_DIALOG_ID, IMG_DIALOG_ID, EXTN_DIALOG_ID, UPLOAD_DIALOG_ID, RETRY_DIALOG_ID, CONTEXT_MENU_ID, SORTBY_ID, VIEW_ID, SPLITTER_ID, CONTENT_ID, BREADCRUMBBAR_ID, UPLOAD_ID, RETRY_ID, SEARCH_ID, ROOT, CONTROL, CHECK_SELECT, ROOT_POPUP, MOBILE, MOB_POPUP, MULTI_SELECT, FILTER, LAYOUT, NAVIGATION, LAYOUT_CONTENT, LARGE_ICONS, TB_ITEM, LIST_ITEM, LIST_TEXT, LIST_PARENT, TB_OPTION_TICK, TB_OPTION_DOT, BLUR, ACTIVE, HOVER, FOCUS, FOCUSED, CHECK, FRAME, CB_WRAP, ROW, ROWCELL, EMPTY, EMPTY_CONTENT, EMPTY_INNER_CONTENT, CLONE, DROP_FOLDER, DROP_FILE, FOLDER, ICON_IMAGE, ICON_MUSIC, ICON_VIDEO, LARGE_ICON, LARGE_EMPTY_FOLDER, LARGE_EMPTY_FOLDER_TWO, LARGE_ICON_FOLDER, SELECTED_ITEMS, TEXT_CONTENT, GRID_HEADER, TEMPLATE_CELL, TREE_VIEW, MENU_ITEM, MENU_ICON, SUBMENU_ICON, GRID_VIEW, GRID_CONTENT, ICON_VIEW, ICON_OPEN, ICON_UPLOAD, ICON_CUT, ICON_COPY, ICON_PASTE, ICON_DELETE, ICON_RENAME, ICON_NEWFOLDER, ICON_DETAILS, ICON_SHORTBY, ICON_REFRESH, ICON_SELECTALL, ICON_DOWNLOAD, ICON_OPTIONS, ICON_GRID, ICON_LARGE, ICON_BREADCRUMB, ICON_CLEAR, ICON_DROP_IN, ICON_DROP_OUT, ICON_NO_DROP, ICONS, DETAILS_LABEL, ERROR_CONTENT, STATUS, BREADCRUMBS, RTL, DISPLAY_NONE, COLLAPSED, FULLROW, ICON_COLLAPSIBLE, SPLIT_BAR, HEADER_CHECK, OVERLAY, VALUE, isFile, modelChanged, initialEnd, finalizeEnd, createEnd, filterEnd, beforeDelete, pathDrag, deleteInit, deleteEnd, refreshEnd, resizeEnd, splitterResize, pathChanged, destroy, beforeRequest, upload, skipUpload, afterRequest, download, layoutRefresh, actionFailure, search, openInit, openEnd, selectionChanged, selectAllInit, clearAllInit, clearPathInit, layoutChange, sortByChange, nodeExpand, detailsInit, menuItemData, renameInit, renameEndParent, renameEnd, showPaste, hidePaste, selectedData, cutCopyInit, pasteInit, pasteEnd, cutEnd, hideLayout, updateTreeSelection, treeSelect, sortColumn, pathColumn, searchTextChange, beforeDownload, downloadInit, dropInit, dragEnd, dropPath, dragHelper, dragging, updateSelectionData, methodCall, permissionRead, permissionEdit, permissionEditContents, permissionCopy, permissionUpload, permissionDownload, FileManager, Toolbar$1 as Toolbar, BreadCrumbBar, NavigationPane, DetailsView, LargeIconsView, createDialog, createExtDialog, createImageDialog, ContextMenu$2 as ContextMenu }; //# sourceMappingURL=ej2-filemanager.es5.js.map","map":null,"metadata":{},"sourceType":"module"}