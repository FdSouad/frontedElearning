{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let TokenService = /*#__PURE__*/(() => {\n  class TokenService {\n    constructor() {\n      if (this.getToken() != null) {\n        this.getRoles();\n      }\n    }\n\n    set(data) {\n      localStorage.setItem('token', data.access_token);\n      localStorage.setItem('id', data.id);\n      localStorage.setItem('pole', data.pole);\n      localStorage.setItem('perimetre', data.perimetre);\n      this.getRoles();\n    }\n\n    handle(data) {\n      this.set(data);\n    }\n\n    getToken() {\n      return localStorage.getItem('token');\n    }\n\n    getPole() {\n      return localStorage.getItem('pole');\n    }\n\n    getPerimetre() {\n      return localStorage.getItem('perimetre');\n    }\n\n    getName() {\n      return this.payload(this.getToken()).name;\n    }\n\n    getEmail() {\n      return this.payload(this.getToken()).email;\n    }\n\n    getId() {\n      return localStorage.getItem('id');\n    }\n\n    getRoles() {\n      let data = this.payload(this.getToken());\n      data = data[\"resource_access\"];\n      data = data[\"e-learning-app\"];\n      let roles = Object.values(Object.values(data)).toString();\n      var result = new Array();\n\n      for (var i = 0; i < roles.split(',').length; i++) {\n        // console.log(\"roles :: \" + roles.split(',')[i])\n        // and then you can perform push()\n        result.push(roles.split(',')[i]); //console.log(\"done :: \" + result[1])\n      }\n\n      this.roles = result;\n    }\n\n    isAdmin() {\n      for (var i = 0; i < this.roles.length; i++) {\n        if (this.roles[i] == \"admin\") return true;\n      }\n\n      return false;\n    }\n\n    isSpecialiste() {\n      for (var i = 0; i < this.roles.length; i++) {\n        if (this.roles[i] == \"specialiste\") return true;\n      }\n\n      return false;\n    }\n\n    printRoles() {\n      for (var i = 0; i < this.roles.length; i++) {// console.log(\"role print : \" + this.roles[i])\n      }\n    }\n\n    isTeamManager() {\n      for (var i = 0; i < this.roles.length; i++) {\n        if (this.roles[i] == \"team_manager\") return true;\n      }\n\n      return false;\n    }\n\n    getinfoToken() {\n      var jwt = this.getToken();\n      var role = '';\n\n      if (jwt != null) {\n        let jwtData = jwt.split('.')[1];\n        let decodedJwtJsonData = window.atob(jwtData); // console.log(\"yeeeeeeeeeees\"+decodedJwtJsonData);\n\n        let decodedJwtData = JSON.parse(decodedJwtJsonData);\n        role = decodedJwtData.resource_access['e-learning-app'].roles[0]; // role=decodedJwtData.email;\n        // resource_access\":{\"e-learning-app\"\n        // \"resource_access\":{\n        //   \"e_learning_app\":{\n        //     \"roles\":[\"specialiste\"]},\"account\":{\"roles\":[\"manage-account\",\"manage-account-links\",\"view-profile\"]}\n        //   },\"scope\":\"profile email\",\"email_verified\":false,\"name\":\"coucou hhhhh\",\"preferred_username\":\"imiioli@gmail.com\",\"given_name\":\"coucou\",\"family_name\":\"hhhhh\",\"email\":\"imiioli@gmail.com\"\n      }\n\n      return role; //console.log(this.users)\n    }\n\n    isConsultant() {\n      for (var i = 0; i < this.roles.length; i++) {\n        if (this.roles[i] == \"consultant\") return true;\n      }\n\n      return false;\n    }\n\n    remove() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('id');\n    }\n\n    decode(payload) {\n      // console.log('payload : ', payload);\n      return JSON.parse(atob(payload));\n    }\n\n    payload(token) {\n      const payload = token.split('.')[1]; // console.log('payload - decode : ', this.decode(payload));\n\n      return this.decode(payload);\n    }\n\n    isValid() {\n      const token = this.getToken();\n      const id = this.getId();\n\n      if (token && id) {\n        //const payload = this.payload(token);\n        //if (payload) {\n        return true; //id == payload.id;\n        //}\n      }\n\n      return false;\n    }\n\n    getInfo() {\n      const token = this.getToken();\n\n      if (token) {\n        const payload = this.payload(token);\n        return payload ? payload : null;\n      }\n\n      return null;\n    }\n\n    loggedIn() {\n      return this.isValid();\n    }\n\n    setWithExpiry(code, email) {\n      const now = new Date(); // `item` is an object which contains the original value\n      // as well as the time when it's supposed to expire\n\n      let date = now.getTime() + 300000; //5min\n\n      localStorage.setItem(\"code-secret\", code);\n      localStorage.setItem(\"em\", email);\n      localStorage.setItem(\"expiry\", JSON.stringify(date));\n    }\n\n    getWithExpiry() {\n      const itemStr = localStorage.getItem(\"code-secret\");\n      const dateExp = localStorage.getItem(\"expiry\"); // if the item doesn't exist, return null\n\n      if (!itemStr) {\n        return null;\n      } else {\n        // console.log(\"parse\" + itemStr)\n        // console.log(\"expiry\" + dateExp)\n        const now = new Date(); // compare the expiry time of the item with the current time\n\n        if (dateExp != null && now.getTime() > parseInt(dateExp, 10)) {\n          // If the item is expired, delete the item from storage\n          // and return null\n          localStorage.removeItem(\"code-secret\");\n          localStorage.removeItem(\"expiry\");\n          localStorage.removeItem(\"em\");\n          return null;\n        }\n\n        return itemStr;\n      }\n    }\n\n    getEmailWithExpiry() {\n      return localStorage.getItem(\"em\");\n    }\n\n    vider() {\n      localStorage.removeItem(\"code-secret\");\n      localStorage.removeItem(\"expiry\");\n      localStorage.removeItem(\"em\");\n    }\n\n  }\n\n  TokenService.ɵfac = function TokenService_Factory(t) {\n    return new (t || TokenService)();\n  };\n\n  TokenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenService,\n    factory: TokenService.ɵfac,\n    providedIn: 'root'\n  });\n  return TokenService;\n})();","map":null,"metadata":{},"sourceType":"module"}